/*
PDS API

Portworx Data Services API Server

API version: 3.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// StatusDeploymentHealth struct for StatusDeploymentHealth
type StatusDeploymentHealth struct {
	Error *string `json:"error,omitempty"`
	Health *string `json:"health,omitempty"`
	Status *int32 `json:"status,omitempty"`
	Uid *string `json:"uid,omitempty"`
	Up *bool `json:"up,omitempty"`
}

// NewStatusDeploymentHealth instantiates a new StatusDeploymentHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusDeploymentHealth() *StatusDeploymentHealth {
	this := StatusDeploymentHealth{}
	return &this
}

// NewStatusDeploymentHealthWithDefaults instantiates a new StatusDeploymentHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusDeploymentHealthWithDefaults() *StatusDeploymentHealth {
	this := StatusDeploymentHealth{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *StatusDeploymentHealth) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDeploymentHealth) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *StatusDeploymentHealth) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *StatusDeploymentHealth) SetError(v string) {
	o.Error = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *StatusDeploymentHealth) GetHealth() string {
	if o == nil || o.Health == nil {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDeploymentHealth) GetHealthOk() (*string, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *StatusDeploymentHealth) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *StatusDeploymentHealth) SetHealth(v string) {
	o.Health = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StatusDeploymentHealth) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDeploymentHealth) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StatusDeploymentHealth) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *StatusDeploymentHealth) SetStatus(v int32) {
	o.Status = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *StatusDeploymentHealth) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDeploymentHealth) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *StatusDeploymentHealth) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *StatusDeploymentHealth) SetUid(v string) {
	o.Uid = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *StatusDeploymentHealth) GetUp() bool {
	if o == nil || o.Up == nil {
		var ret bool
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDeploymentHealth) GetUpOk() (*bool, bool) {
	if o == nil || o.Up == nil {
		return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *StatusDeploymentHealth) HasUp() bool {
	if o != nil && o.Up != nil {
		return true
	}

	return false
}

// SetUp gets a reference to the given bool and assigns it to the Up field.
func (o *StatusDeploymentHealth) SetUp(v bool) {
	o.Up = &v
}

func (o StatusDeploymentHealth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Up != nil {
		toSerialize["up"] = o.Up
	}
	return json.Marshal(toSerialize)
}

type NullableStatusDeploymentHealth struct {
	value *StatusDeploymentHealth
	isSet bool
}

func (v NullableStatusDeploymentHealth) Get() *StatusDeploymentHealth {
	return v.value
}

func (v *NullableStatusDeploymentHealth) Set(val *StatusDeploymentHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusDeploymentHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusDeploymentHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusDeploymentHealth(val *StatusDeploymentHealth) *NullableStatusDeploymentHealth {
	return &NullableStatusDeploymentHealth{value: val, isSet: true}
}

func (v NullableStatusDeploymentHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusDeploymentHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


