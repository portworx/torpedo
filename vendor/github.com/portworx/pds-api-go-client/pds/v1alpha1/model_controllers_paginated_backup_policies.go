/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// ControllersPaginatedBackupPolicies struct for ControllersPaginatedBackupPolicies
type ControllersPaginatedBackupPolicies struct {
	Data []ModelsBackupPolicy `json:"data,omitempty"`
	Pagination *ConstraintPagination `json:"pagination,omitempty"`
}

// NewControllersPaginatedBackupPolicies instantiates a new ControllersPaginatedBackupPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersPaginatedBackupPolicies() *ControllersPaginatedBackupPolicies {
	this := ControllersPaginatedBackupPolicies{}
	return &this
}

// NewControllersPaginatedBackupPoliciesWithDefaults instantiates a new ControllersPaginatedBackupPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersPaginatedBackupPoliciesWithDefaults() *ControllersPaginatedBackupPolicies {
	this := ControllersPaginatedBackupPolicies{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ControllersPaginatedBackupPolicies) GetData() []ModelsBackupPolicy {
	if o == nil || o.Data == nil {
		var ret []ModelsBackupPolicy
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersPaginatedBackupPolicies) GetDataOk() ([]ModelsBackupPolicy, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ControllersPaginatedBackupPolicies) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []ModelsBackupPolicy and assigns it to the Data field.
func (o *ControllersPaginatedBackupPolicies) SetData(v []ModelsBackupPolicy) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ControllersPaginatedBackupPolicies) GetPagination() ConstraintPagination {
	if o == nil || o.Pagination == nil {
		var ret ConstraintPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersPaginatedBackupPolicies) GetPaginationOk() (*ConstraintPagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ControllersPaginatedBackupPolicies) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ConstraintPagination and assigns it to the Pagination field.
func (o *ControllersPaginatedBackupPolicies) SetPagination(v ConstraintPagination) {
	o.Pagination = &v
}

func (o ControllersPaginatedBackupPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	return json.Marshal(toSerialize)
}

type NullableControllersPaginatedBackupPolicies struct {
	value *ControllersPaginatedBackupPolicies
	isSet bool
}

func (v NullableControllersPaginatedBackupPolicies) Get() *ControllersPaginatedBackupPolicies {
	return v.value
}

func (v *NullableControllersPaginatedBackupPolicies) Set(val *ControllersPaginatedBackupPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersPaginatedBackupPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersPaginatedBackupPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersPaginatedBackupPolicies(val *ControllersPaginatedBackupPolicies) *NullableControllersPaginatedBackupPolicies {
	return &NullableControllersPaginatedBackupPolicies{value: val, isSet: true}
}

func (v NullableControllersPaginatedBackupPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersPaginatedBackupPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


