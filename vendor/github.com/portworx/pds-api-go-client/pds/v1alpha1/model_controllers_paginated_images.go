/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// ControllersPaginatedImages struct for ControllersPaginatedImages
type ControllersPaginatedImages struct {
	Data []ModelsImage `json:"data,omitempty"`
	Pagination *ConstraintPagination `json:"pagination,omitempty"`
}

// NewControllersPaginatedImages instantiates a new ControllersPaginatedImages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersPaginatedImages() *ControllersPaginatedImages {
	this := ControllersPaginatedImages{}
	return &this
}

// NewControllersPaginatedImagesWithDefaults instantiates a new ControllersPaginatedImages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersPaginatedImagesWithDefaults() *ControllersPaginatedImages {
	this := ControllersPaginatedImages{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ControllersPaginatedImages) GetData() []ModelsImage {
	if o == nil || o.Data == nil {
		var ret []ModelsImage
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersPaginatedImages) GetDataOk() ([]ModelsImage, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ControllersPaginatedImages) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []ModelsImage and assigns it to the Data field.
func (o *ControllersPaginatedImages) SetData(v []ModelsImage) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ControllersPaginatedImages) GetPagination() ConstraintPagination {
	if o == nil || o.Pagination == nil {
		var ret ConstraintPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersPaginatedImages) GetPaginationOk() (*ConstraintPagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ControllersPaginatedImages) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ConstraintPagination and assigns it to the Pagination field.
func (o *ControllersPaginatedImages) SetPagination(v ConstraintPagination) {
	o.Pagination = &v
}

func (o ControllersPaginatedImages) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	return json.Marshal(toSerialize)
}

type NullableControllersPaginatedImages struct {
	value *ControllersPaginatedImages
	isSet bool
}

func (v NullableControllersPaginatedImages) Get() *ControllersPaginatedImages {
	return v.value
}

func (v *NullableControllersPaginatedImages) Set(val *ControllersPaginatedImages) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersPaginatedImages) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersPaginatedImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersPaginatedImages(val *ControllersPaginatedImages) *NullableControllersPaginatedImages {
	return &NullableControllersPaginatedImages{value: val, isSet: true}
}

func (v NullableControllersPaginatedImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersPaginatedImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


