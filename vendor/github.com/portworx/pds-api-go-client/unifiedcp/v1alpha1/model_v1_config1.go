/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1Config1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Config1{}

// V1Config1 Desired configuration of the Deployment.
type V1Config1 struct {
	References *V1References2 `json:"references,omitempty"`
	// Flag to enable TLS for the Data Service.
	TlsEnabled *bool `json:"tlsEnabled,omitempty"`
	// A deployment topology contains a number of nodes that have various attributes as a collective group.
	DeploymentTopologies []V1DeploymentTopology `json:"deploymentTopologies,omitempty"`
}

// NewV1Config1 instantiates a new V1Config1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config1() *V1Config1 {
	this := V1Config1{}
	return &this
}

// NewV1Config1WithDefaults instantiates a new V1Config1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1Config1WithDefaults() *V1Config1 {
	this := V1Config1{}
	return &this
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *V1Config1) GetReferences() V1References2 {
	if o == nil || IsNil(o.References) {
		var ret V1References2
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config1) GetReferencesOk() (*V1References2, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *V1Config1) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given V1References2 and assigns it to the References field.
func (o *V1Config1) SetReferences(v V1References2) {
	o.References = &v
}

// GetTlsEnabled returns the TlsEnabled field value if set, zero value otherwise.
func (o *V1Config1) GetTlsEnabled() bool {
	if o == nil || IsNil(o.TlsEnabled) {
		var ret bool
		return ret
	}
	return *o.TlsEnabled
}

// GetTlsEnabledOk returns a tuple with the TlsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config1) GetTlsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsEnabled) {
		return nil, false
	}
	return o.TlsEnabled, true
}

// HasTlsEnabled returns a boolean if a field has been set.
func (o *V1Config1) HasTlsEnabled() bool {
	if o != nil && !IsNil(o.TlsEnabled) {
		return true
	}

	return false
}

// SetTlsEnabled gets a reference to the given bool and assigns it to the TlsEnabled field.
func (o *V1Config1) SetTlsEnabled(v bool) {
	o.TlsEnabled = &v
}

// GetDeploymentTopologies returns the DeploymentTopologies field value if set, zero value otherwise.
func (o *V1Config1) GetDeploymentTopologies() []V1DeploymentTopology {
	if o == nil || IsNil(o.DeploymentTopologies) {
		var ret []V1DeploymentTopology
		return ret
	}
	return o.DeploymentTopologies
}

// GetDeploymentTopologiesOk returns a tuple with the DeploymentTopologies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config1) GetDeploymentTopologiesOk() ([]V1DeploymentTopology, bool) {
	if o == nil || IsNil(o.DeploymentTopologies) {
		return nil, false
	}
	return o.DeploymentTopologies, true
}

// HasDeploymentTopologies returns a boolean if a field has been set.
func (o *V1Config1) HasDeploymentTopologies() bool {
	if o != nil && !IsNil(o.DeploymentTopologies) {
		return true
	}

	return false
}

// SetDeploymentTopologies gets a reference to the given []V1DeploymentTopology and assigns it to the DeploymentTopologies field.
func (o *V1Config1) SetDeploymentTopologies(v []V1DeploymentTopology) {
	o.DeploymentTopologies = v
}

func (o V1Config1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Config1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.TlsEnabled) {
		toSerialize["tlsEnabled"] = o.TlsEnabled
	}
	if !IsNil(o.DeploymentTopologies) {
		toSerialize["deploymentTopologies"] = o.DeploymentTopologies
	}
	return toSerialize, nil
}

type NullableV1Config1 struct {
	value *V1Config1
	isSet bool
}

func (v NullableV1Config1) Get() *V1Config1 {
	return v.value
}

func (v *NullableV1Config1) Set(val *V1Config1) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config1) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config1(val *V1Config1) *NullableV1Config1 {
	return &NullableV1Config1{value: val, isSet: true}
}

func (v NullableV1Config1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


