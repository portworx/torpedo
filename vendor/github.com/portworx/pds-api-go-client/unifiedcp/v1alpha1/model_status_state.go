/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
	"fmt"
)

// StatusState Enum for State of the Task.   - STATE_UNSPECIFIED: State is unspecified.  - QUEUED: Task queued.  - FAILED: Task failed.  - RUNNING: Task is still running.  - COMPLETED: Task is completed.
type StatusState string

// List of StatusState
const (
	STATUSSTATE_STATE_UNSPECIFIED StatusState = "STATE_UNSPECIFIED"
	STATUSSTATE_QUEUED StatusState = "QUEUED"
	STATUSSTATE_FAILED StatusState = "FAILED"
	STATUSSTATE_RUNNING StatusState = "RUNNING"
	STATUSSTATE_COMPLETED StatusState = "COMPLETED"
)

// All allowed values of StatusState enum
var AllowedStatusStateEnumValues = []StatusState{
	"STATE_UNSPECIFIED",
	"QUEUED",
	"FAILED",
	"RUNNING",
	"COMPLETED",
}

func (v *StatusState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusState(value)
	for _, existing := range AllowedStatusStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusState", value)
}

// NewStatusStateFromValue returns a pointer to a valid StatusState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusStateFromValue(v string) (*StatusState, error) {
	ev := StatusState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusState: valid values are %v", v, AllowedStatusStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusState) IsValid() bool {
	for _, existing := range AllowedStatusStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusState value
func (v StatusState) Ptr() *StatusState {
	return &v
}

type NullableStatusState struct {
	value *StatusState
	isSet bool
}

func (v NullableStatusState) Get() *StatusState {
	return v.value
}

func (v *NullableStatusState) Set(val *StatusState) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusState) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusState(val *StatusState) *NullableStatusState {
	return &NullableStatusState{value: val, isSet: true}
}

func (v NullableStatusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

