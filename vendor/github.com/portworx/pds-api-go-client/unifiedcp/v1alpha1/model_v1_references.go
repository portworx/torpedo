/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1References type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1References{}

// V1References References to other resources.
type V1References struct {
	// UID of the Data service.
	DataServiceId *string `json:"dataServiceId,omitempty"`
}

// NewV1References instantiates a new V1References object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1References() *V1References {
	this := V1References{}
	return &this
}

// NewV1ReferencesWithDefaults instantiates a new V1References object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ReferencesWithDefaults() *V1References {
	this := V1References{}
	return &this
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *V1References) GetDataServiceId() string {
	if o == nil || IsNil(o.DataServiceId) {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1References) GetDataServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataServiceId) {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *V1References) HasDataServiceId() bool {
	if o != nil && !IsNil(o.DataServiceId) {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *V1References) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

func (o V1References) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1References) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataServiceId) {
		toSerialize["dataServiceId"] = o.DataServiceId
	}
	return toSerialize, nil
}

type NullableV1References struct {
	value *V1References
	isSet bool
}

func (v NullableV1References) Get() *V1References {
	return v.value
}

func (v *NullableV1References) Set(val *V1References) {
	v.value = val
	v.isSet = true
}

func (v NullableV1References) IsSet() bool {
	return v.isSet
}

func (v *NullableV1References) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1References(val *V1References) *NullableV1References {
	return &NullableV1References{value: val, isSet: true}
}

func (v NullableV1References) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1References) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


