/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1CompatibleVersions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CompatibleVersions{}

// V1CompatibleVersions CompatibleVersions contains compatibility information for a particular Version.
type V1CompatibleVersions struct {
	DataServiceId *string `json:"dataServiceId,omitempty"`
	DataServiceName *string `json:"dataServiceName,omitempty"`
	VersionId *string `json:"versionId,omitempty"`
	VersionName *string `json:"versionName,omitempty"`
	LatestCompatiblePatch *V1DataServiceVersion `json:"latestCompatiblePatch,omitempty"`
	// LatestCompatibleVersions contains the latest patch versions of compatible major/minor versions.
	LatestCompatibleVersions []V1DataServiceVersion `json:"latestCompatibleVersions,omitempty"`
	// CompatibleVersions contains all compatible versions.
	CompatibleVersions []V1DataServiceVersion `json:"compatibleVersions,omitempty"`
}

// NewV1CompatibleVersions instantiates a new V1CompatibleVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CompatibleVersions() *V1CompatibleVersions {
	this := V1CompatibleVersions{}
	return &this
}

// NewV1CompatibleVersionsWithDefaults instantiates a new V1CompatibleVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CompatibleVersionsWithDefaults() *V1CompatibleVersions {
	this := V1CompatibleVersions{}
	return &this
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetDataServiceId() string {
	if o == nil || IsNil(o.DataServiceId) {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetDataServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataServiceId) {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasDataServiceId() bool {
	if o != nil && !IsNil(o.DataServiceId) {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *V1CompatibleVersions) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

// GetDataServiceName returns the DataServiceName field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetDataServiceName() string {
	if o == nil || IsNil(o.DataServiceName) {
		var ret string
		return ret
	}
	return *o.DataServiceName
}

// GetDataServiceNameOk returns a tuple with the DataServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetDataServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataServiceName) {
		return nil, false
	}
	return o.DataServiceName, true
}

// HasDataServiceName returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasDataServiceName() bool {
	if o != nil && !IsNil(o.DataServiceName) {
		return true
	}

	return false
}

// SetDataServiceName gets a reference to the given string and assigns it to the DataServiceName field.
func (o *V1CompatibleVersions) SetDataServiceName(v string) {
	o.DataServiceName = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *V1CompatibleVersions) SetVersionId(v string) {
	o.VersionId = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetVersionName() string {
	if o == nil || IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasVersionName() bool {
	if o != nil && !IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *V1CompatibleVersions) SetVersionName(v string) {
	o.VersionName = &v
}

// GetLatestCompatiblePatch returns the LatestCompatiblePatch field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetLatestCompatiblePatch() V1DataServiceVersion {
	if o == nil || IsNil(o.LatestCompatiblePatch) {
		var ret V1DataServiceVersion
		return ret
	}
	return *o.LatestCompatiblePatch
}

// GetLatestCompatiblePatchOk returns a tuple with the LatestCompatiblePatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetLatestCompatiblePatchOk() (*V1DataServiceVersion, bool) {
	if o == nil || IsNil(o.LatestCompatiblePatch) {
		return nil, false
	}
	return o.LatestCompatiblePatch, true
}

// HasLatestCompatiblePatch returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasLatestCompatiblePatch() bool {
	if o != nil && !IsNil(o.LatestCompatiblePatch) {
		return true
	}

	return false
}

// SetLatestCompatiblePatch gets a reference to the given V1DataServiceVersion and assigns it to the LatestCompatiblePatch field.
func (o *V1CompatibleVersions) SetLatestCompatiblePatch(v V1DataServiceVersion) {
	o.LatestCompatiblePatch = &v
}

// GetLatestCompatibleVersions returns the LatestCompatibleVersions field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetLatestCompatibleVersions() []V1DataServiceVersion {
	if o == nil || IsNil(o.LatestCompatibleVersions) {
		var ret []V1DataServiceVersion
		return ret
	}
	return o.LatestCompatibleVersions
}

// GetLatestCompatibleVersionsOk returns a tuple with the LatestCompatibleVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetLatestCompatibleVersionsOk() ([]V1DataServiceVersion, bool) {
	if o == nil || IsNil(o.LatestCompatibleVersions) {
		return nil, false
	}
	return o.LatestCompatibleVersions, true
}

// HasLatestCompatibleVersions returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasLatestCompatibleVersions() bool {
	if o != nil && !IsNil(o.LatestCompatibleVersions) {
		return true
	}

	return false
}

// SetLatestCompatibleVersions gets a reference to the given []V1DataServiceVersion and assigns it to the LatestCompatibleVersions field.
func (o *V1CompatibleVersions) SetLatestCompatibleVersions(v []V1DataServiceVersion) {
	o.LatestCompatibleVersions = v
}

// GetCompatibleVersions returns the CompatibleVersions field value if set, zero value otherwise.
func (o *V1CompatibleVersions) GetCompatibleVersions() []V1DataServiceVersion {
	if o == nil || IsNil(o.CompatibleVersions) {
		var ret []V1DataServiceVersion
		return ret
	}
	return o.CompatibleVersions
}

// GetCompatibleVersionsOk returns a tuple with the CompatibleVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CompatibleVersions) GetCompatibleVersionsOk() ([]V1DataServiceVersion, bool) {
	if o == nil || IsNil(o.CompatibleVersions) {
		return nil, false
	}
	return o.CompatibleVersions, true
}

// HasCompatibleVersions returns a boolean if a field has been set.
func (o *V1CompatibleVersions) HasCompatibleVersions() bool {
	if o != nil && !IsNil(o.CompatibleVersions) {
		return true
	}

	return false
}

// SetCompatibleVersions gets a reference to the given []V1DataServiceVersion and assigns it to the CompatibleVersions field.
func (o *V1CompatibleVersions) SetCompatibleVersions(v []V1DataServiceVersion) {
	o.CompatibleVersions = v
}

func (o V1CompatibleVersions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CompatibleVersions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataServiceId) {
		toSerialize["dataServiceId"] = o.DataServiceId
	}
	if !IsNil(o.DataServiceName) {
		toSerialize["dataServiceName"] = o.DataServiceName
	}
	if !IsNil(o.VersionId) {
		toSerialize["versionId"] = o.VersionId
	}
	if !IsNil(o.VersionName) {
		toSerialize["versionName"] = o.VersionName
	}
	if !IsNil(o.LatestCompatiblePatch) {
		toSerialize["latestCompatiblePatch"] = o.LatestCompatiblePatch
	}
	if !IsNil(o.LatestCompatibleVersions) {
		toSerialize["latestCompatibleVersions"] = o.LatestCompatibleVersions
	}
	if !IsNil(o.CompatibleVersions) {
		toSerialize["compatibleVersions"] = o.CompatibleVersions
	}
	return toSerialize, nil
}

type NullableV1CompatibleVersions struct {
	value *V1CompatibleVersions
	isSet bool
}

func (v NullableV1CompatibleVersions) Get() *V1CompatibleVersions {
	return v.value
}

func (v *NullableV1CompatibleVersions) Set(val *V1CompatibleVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CompatibleVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CompatibleVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CompatibleVersions(val *V1CompatibleVersions) *NullableV1CompatibleVersions {
	return &NullableV1CompatibleVersions{value: val, isSet: true}
}

func (v NullableV1CompatibleVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CompatibleVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


