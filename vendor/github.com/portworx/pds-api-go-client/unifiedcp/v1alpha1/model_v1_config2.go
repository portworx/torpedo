/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1Config2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Config2{}

// V1Config2 Desired configuration of the Backup.
type V1Config2 struct {
	References *V1References3 `json:"references,omitempty"`
	// BackupCapability of the deployment target when the snapshot was created.
	BackupCapability *string `json:"backupCapability,omitempty"`
}

// NewV1Config2 instantiates a new V1Config2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config2() *V1Config2 {
	this := V1Config2{}
	return &this
}

// NewV1Config2WithDefaults instantiates a new V1Config2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1Config2WithDefaults() *V1Config2 {
	this := V1Config2{}
	return &this
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *V1Config2) GetReferences() V1References3 {
	if o == nil || IsNil(o.References) {
		var ret V1References3
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config2) GetReferencesOk() (*V1References3, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *V1Config2) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given V1References3 and assigns it to the References field.
func (o *V1Config2) SetReferences(v V1References3) {
	o.References = &v
}

// GetBackupCapability returns the BackupCapability field value if set, zero value otherwise.
func (o *V1Config2) GetBackupCapability() string {
	if o == nil || IsNil(o.BackupCapability) {
		var ret string
		return ret
	}
	return *o.BackupCapability
}

// GetBackupCapabilityOk returns a tuple with the BackupCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config2) GetBackupCapabilityOk() (*string, bool) {
	if o == nil || IsNil(o.BackupCapability) {
		return nil, false
	}
	return o.BackupCapability, true
}

// HasBackupCapability returns a boolean if a field has been set.
func (o *V1Config2) HasBackupCapability() bool {
	if o != nil && !IsNil(o.BackupCapability) {
		return true
	}

	return false
}

// SetBackupCapability gets a reference to the given string and assigns it to the BackupCapability field.
func (o *V1Config2) SetBackupCapability(v string) {
	o.BackupCapability = &v
}

func (o V1Config2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Config2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.BackupCapability) {
		toSerialize["backupCapability"] = o.BackupCapability
	}
	return toSerialize, nil
}

type NullableV1Config2 struct {
	value *V1Config2
	isSet bool
}

func (v NullableV1Config2) Get() *V1Config2 {
	return v.value
}

func (v *NullableV1Config2) Set(val *V1Config2) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config2) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config2(val *V1Config2) *NullableV1Config2 {
	return &NullableV1Config2{value: val, isSet: true}
}

func (v NullableV1Config2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


