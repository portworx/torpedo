/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
	"fmt"
)

// V1ErrorCode - ERROR_CODE_UNSPECIFIED: Error code not specified.  - PX_CLOUD_CREDENTIALS_NOT_FOUND: Cloud credentials specified in Restore spec were not found by Portworx.  - PX_CLOUD_SNAP_RESTORE_TRIGGER_FAILED: Problem triggering the cloudsnap restore in PX.  - PX_CLOUD_SNAP_RESTORE_FAILED: Problem with finishing the cloudsnap restore in PX.  - PX_GET_CLOUD_SNAP_STATUS_FAILED: Problem with getting the cloudsnap restore status from PX.  - PX_GET_VOLUME_FAILED: Problem with getting the volume from PX.  - READ_DATA_SERVICE_MANIFEST_FAILED: Problem with reading the data service manifest from the busybox pod.  - UNMARSHAL_DATA_SERVICE_JSON: Problem with unmarshalling the JSON with data service manifest.  - DEPLOYMENT_NAME_ALREADY_EXIST: Deployment name already used in the namespace.  - TIMEOUT_BUSYBOX_POD_RUNNING: Timeout while waiting for the BusyBox pod to enter the running state.  - BUSYBOX_POD_FAILED: Busybox pod has failed.
type V1ErrorCode string

// List of v1ErrorCode
const (
	V1ERRORCODE_ERROR_CODE_UNSPECIFIED V1ErrorCode = "ERROR_CODE_UNSPECIFIED"
	V1ERRORCODE_PX_CLOUD_CREDENTIALS_NOT_FOUND V1ErrorCode = "PX_CLOUD_CREDENTIALS_NOT_FOUND"
	V1ERRORCODE_PX_CLOUD_SNAP_RESTORE_TRIGGER_FAILED V1ErrorCode = "PX_CLOUD_SNAP_RESTORE_TRIGGER_FAILED"
	V1ERRORCODE_PX_CLOUD_SNAP_RESTORE_FAILED V1ErrorCode = "PX_CLOUD_SNAP_RESTORE_FAILED"
	V1ERRORCODE_PX_GET_CLOUD_SNAP_STATUS_FAILED V1ErrorCode = "PX_GET_CLOUD_SNAP_STATUS_FAILED"
	V1ERRORCODE_PX_GET_VOLUME_FAILED V1ErrorCode = "PX_GET_VOLUME_FAILED"
	V1ERRORCODE_READ_DATA_SERVICE_MANIFEST_FAILED V1ErrorCode = "READ_DATA_SERVICE_MANIFEST_FAILED"
	V1ERRORCODE_UNMARSHAL_DATA_SERVICE_JSON V1ErrorCode = "UNMARSHAL_DATA_SERVICE_JSON"
	V1ERRORCODE_DEPLOYMENT_NAME_ALREADY_EXIST V1ErrorCode = "DEPLOYMENT_NAME_ALREADY_EXIST"
	V1ERRORCODE_TIMEOUT_BUSYBOX_POD_RUNNING V1ErrorCode = "TIMEOUT_BUSYBOX_POD_RUNNING"
	V1ERRORCODE_BUSYBOX_POD_FAILED V1ErrorCode = "BUSYBOX_POD_FAILED"
)

// All allowed values of V1ErrorCode enum
var AllowedV1ErrorCodeEnumValues = []V1ErrorCode{
	"ERROR_CODE_UNSPECIFIED",
	"PX_CLOUD_CREDENTIALS_NOT_FOUND",
	"PX_CLOUD_SNAP_RESTORE_TRIGGER_FAILED",
	"PX_CLOUD_SNAP_RESTORE_FAILED",
	"PX_GET_CLOUD_SNAP_STATUS_FAILED",
	"PX_GET_VOLUME_FAILED",
	"READ_DATA_SERVICE_MANIFEST_FAILED",
	"UNMARSHAL_DATA_SERVICE_JSON",
	"DEPLOYMENT_NAME_ALREADY_EXIST",
	"TIMEOUT_BUSYBOX_POD_RUNNING",
	"BUSYBOX_POD_FAILED",
}

func (v *V1ErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ErrorCode(value)
	for _, existing := range AllowedV1ErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ErrorCode", value)
}

// NewV1ErrorCodeFromValue returns a pointer to a valid V1ErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ErrorCodeFromValue(v string) (*V1ErrorCode, error) {
	ev := V1ErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ErrorCode: valid values are %v", v, AllowedV1ErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ErrorCode) IsValid() bool {
	for _, existing := range AllowedV1ErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ErrorCode value
func (v V1ErrorCode) Ptr() *V1ErrorCode {
	return &v
}

type NullableV1ErrorCode struct {
	value *V1ErrorCode
	isSet bool
}

func (v NullableV1ErrorCode) Get() *V1ErrorCode {
	return v.value
}

func (v *NullableV1ErrorCode) Set(val *V1ErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ErrorCode(val *V1ErrorCode) *NullableV1ErrorCode {
	return &NullableV1ErrorCode{value: val, isSet: true}
}

func (v NullableV1ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

