/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DeploymentConfigUpdateServiceAPIService DeploymentConfigUpdateServiceAPI service
type DeploymentConfigUpdateServiceAPIService service

type ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest struct {
	ctx context.Context
	ApiService *DeploymentConfigUpdateServiceAPIService
	deploymentConfigUpdateConfigDeploymentMetaUid string
	configOfTheDeploymentForWhichConfigUpdateIsRequested *ConfigOfTheDeploymentForWhichConfigUpdateIsRequested
}

// Config of the deployment for which config update is requested
func (r ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest) ConfigOfTheDeploymentForWhichConfigUpdateIsRequested(configOfTheDeploymentForWhichConfigUpdateIsRequested ConfigOfTheDeploymentForWhichConfigUpdateIsRequested) ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest {
	r.configOfTheDeploymentForWhichConfigUpdateIsRequested = &configOfTheDeploymentForWhichConfigUpdateIsRequested
	return r
}

func (r ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest) Execute() (*V1DeploymentConfigUpdate, *http.Response, error) {
	return r.ApiService.DeploymentConfigUpdateServiceCreateDeploymentConfigUpdateExecute(r)
}

/*
DeploymentConfigUpdateServiceCreateDeploymentConfigUpdate CreateDeploymentConfigUpdate API creates a deployment config update (-- api-linter: core::0133::http-method=disabled     aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentConfigUpdateConfigDeploymentMetaUid UID of the resource of the format <resource prefix>-<uuid>.
 @return ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest
*/
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceCreateDeploymentConfigUpdate(ctx context.Context, deploymentConfigUpdateConfigDeploymentMetaUid string) ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest {
	return ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest{
		ApiService: a,
		ctx: ctx,
		deploymentConfigUpdateConfigDeploymentMetaUid: deploymentConfigUpdateConfigDeploymentMetaUid,
	}
}

// Execute executes the request
//  @return V1DeploymentConfigUpdate
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceCreateDeploymentConfigUpdateExecute(r ApiDeploymentConfigUpdateServiceCreateDeploymentConfigUpdateRequest) (*V1DeploymentConfigUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DeploymentConfigUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentConfigUpdateServiceAPIService.DeploymentConfigUpdateServiceCreateDeploymentConfigUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/deployments/{deploymentConfigUpdate.config.deploymentMeta.uid}/deploymentConfigUpdates"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentConfigUpdate.config.deploymentMeta.uid"+"}", url.PathEscape(parameterValueToString(r.deploymentConfigUpdateConfigDeploymentMetaUid, "deploymentConfigUpdateConfigDeploymentMetaUid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configOfTheDeploymentForWhichConfigUpdateIsRequested == nil {
		return localVarReturnValue, nil, reportError("configOfTheDeploymentForWhichConfigUpdateIsRequested is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configOfTheDeploymentForWhichConfigUpdateIsRequested
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest struct {
	ctx context.Context
	ApiService *DeploymentConfigUpdateServiceAPIService
	id string
}

func (r ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest) Execute() (*V1DeploymentConfigUpdate, *http.Response, error) {
	return r.ApiService.DeploymentConfigUpdateServiceGetDeploymentConfigUpdateExecute(r)
}

/*
DeploymentConfigUpdateServiceGetDeploymentConfigUpdate GetDeploymentConfigUpdate API returns a deployment config update by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the deployment config update
 @return ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest
*/
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceGetDeploymentConfigUpdate(ctx context.Context, id string) ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest {
	return ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1DeploymentConfigUpdate
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceGetDeploymentConfigUpdateExecute(r ApiDeploymentConfigUpdateServiceGetDeploymentConfigUpdateRequest) (*V1DeploymentConfigUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DeploymentConfigUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentConfigUpdateServiceAPIService.DeploymentConfigUpdateServiceGetDeploymentConfigUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/deploymentConfigUpdates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest struct {
	ctx context.Context
	ApiService *DeploymentConfigUpdateServiceAPIService
	deploymentId *string
	sortSortBy *string
	sortSortOrder *string
	paginationPageNumber *string
	paginationPageSize *string
}

// UID of the deployment
func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) DeploymentId(deploymentId string) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	r.deploymentId = &deploymentId
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) SortSortBy(sortSortBy string) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) SortSortOrder(sortSortOrder string) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

// Page number is the page number to return based on the size
func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) PaginationPageNumber(paginationPageNumber string) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) PaginationPageSize(paginationPageSize string) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) Execute() (*V1ListDeploymentConfigUpdatesResponse, *http.Response, error) {
	return r.ApiService.DeploymentConfigUpdateServiceListDeploymentConfigUpdatesExecute(r)
}

/*
DeploymentConfigUpdateServiceListDeploymentConfigUpdates ListDeploymentConfigUpdates API returns a list of deployment config updates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest
*/
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceListDeploymentConfigUpdates(ctx context.Context) ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest {
	return ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListDeploymentConfigUpdatesResponse
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceListDeploymentConfigUpdatesExecute(r ApiDeploymentConfigUpdateServiceListDeploymentConfigUpdatesRequest) (*V1ListDeploymentConfigUpdatesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListDeploymentConfigUpdatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentConfigUpdateServiceAPIService.DeploymentConfigUpdateServiceListDeploymentConfigUpdates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/deploymentConfigUpdates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deploymentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploymentId", r.deploymentId, "")
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest struct {
	ctx context.Context
	ApiService *DeploymentConfigUpdateServiceAPIService
	id string
	body *map[string]interface{}
}

func (r ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest) Body(body map[string]interface{}) ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest) Execute() (*V1DeploymentConfigUpdate, *http.Response, error) {
	return r.ApiService.DeploymentConfigUpdateServiceRetryDeploymentConfigUpdateExecute(r)
}

/*
DeploymentConfigUpdateServiceRetryDeploymentConfigUpdate RetryDeploymentConfigUpdate API retries a deployment config update

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the deployment config update
 @return ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest
*/
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceRetryDeploymentConfigUpdate(ctx context.Context, id string) ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest {
	return ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1DeploymentConfigUpdate
func (a *DeploymentConfigUpdateServiceAPIService) DeploymentConfigUpdateServiceRetryDeploymentConfigUpdateExecute(r ApiDeploymentConfigUpdateServiceRetryDeploymentConfigUpdateRequest) (*V1DeploymentConfigUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DeploymentConfigUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentConfigUpdateServiceAPIService.DeploymentConfigUpdateServiceRetryDeploymentConfigUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/deploymentConfigUpdates/{id}:retry"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
