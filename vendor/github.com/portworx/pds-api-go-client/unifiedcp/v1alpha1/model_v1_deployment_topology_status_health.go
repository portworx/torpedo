/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
	"fmt"
)

// V1DeploymentTopologyStatusHealth Enum for Health of the deployment topology.   - UNKNOWN: Health is unknown.  - UNAVAILABLE: Deployment Topology is Unavailable.  - PARTIALLY_AVAILABLE: Deployment Topology is Partially available.  - AVAILABLE: Deployment Topology is available.
type V1DeploymentTopologyStatusHealth string

// List of v1DeploymentTopologyStatusHealth
const (
	V1DEPLOYMENTTOPOLOGYSTATUSHEALTH_UNKNOWN V1DeploymentTopologyStatusHealth = "UNKNOWN"
	V1DEPLOYMENTTOPOLOGYSTATUSHEALTH_UNAVAILABLE V1DeploymentTopologyStatusHealth = "UNAVAILABLE"
	V1DEPLOYMENTTOPOLOGYSTATUSHEALTH_PARTIALLY_AVAILABLE V1DeploymentTopologyStatusHealth = "PARTIALLY_AVAILABLE"
	V1DEPLOYMENTTOPOLOGYSTATUSHEALTH_AVAILABLE V1DeploymentTopologyStatusHealth = "AVAILABLE"
)

// All allowed values of V1DeploymentTopologyStatusHealth enum
var AllowedV1DeploymentTopologyStatusHealthEnumValues = []V1DeploymentTopologyStatusHealth{
	"UNKNOWN",
	"UNAVAILABLE",
	"PARTIALLY_AVAILABLE",
	"AVAILABLE",
}

func (v *V1DeploymentTopologyStatusHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1DeploymentTopologyStatusHealth(value)
	for _, existing := range AllowedV1DeploymentTopologyStatusHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1DeploymentTopologyStatusHealth", value)
}

// NewV1DeploymentTopologyStatusHealthFromValue returns a pointer to a valid V1DeploymentTopologyStatusHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1DeploymentTopologyStatusHealthFromValue(v string) (*V1DeploymentTopologyStatusHealth, error) {
	ev := V1DeploymentTopologyStatusHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1DeploymentTopologyStatusHealth: valid values are %v", v, AllowedV1DeploymentTopologyStatusHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1DeploymentTopologyStatusHealth) IsValid() bool {
	for _, existing := range AllowedV1DeploymentTopologyStatusHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1DeploymentTopologyStatusHealth value
func (v V1DeploymentTopologyStatusHealth) Ptr() *V1DeploymentTopologyStatusHealth {
	return &v
}

type NullableV1DeploymentTopologyStatusHealth struct {
	value *V1DeploymentTopologyStatusHealth
	isSet bool
}

func (v NullableV1DeploymentTopologyStatusHealth) Get() *V1DeploymentTopologyStatusHealth {
	return v.value
}

func (v *NullableV1DeploymentTopologyStatusHealth) Set(val *V1DeploymentTopologyStatusHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeploymentTopologyStatusHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeploymentTopologyStatusHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeploymentTopologyStatusHealth(val *V1DeploymentTopologyStatusHealth) *NullableV1DeploymentTopologyStatusHealth {
	return &NullableV1DeploymentTopologyStatusHealth{value: val, isSet: true}
}

func (v NullableV1DeploymentTopologyStatusHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeploymentTopologyStatusHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

