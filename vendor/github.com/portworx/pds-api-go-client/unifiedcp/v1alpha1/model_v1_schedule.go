/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Schedule{}

// V1Schedule Schedule associated with the backup config.
type V1Schedule struct {
	// UID of the schedule associated with the backup configuration.
	Id *string `json:"id,omitempty"`
	// Resource version of the schedule.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
}

// NewV1Schedule instantiates a new V1Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Schedule() *V1Schedule {
	this := V1Schedule{}
	return &this
}

// NewV1ScheduleWithDefaults instantiates a new V1Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ScheduleWithDefaults() *V1Schedule {
	this := V1Schedule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Schedule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Schedule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Schedule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Schedule) SetId(v string) {
	o.Id = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *V1Schedule) GetResourceVersion() string {
	if o == nil || IsNil(o.ResourceVersion) {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Schedule) GetResourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceVersion) {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *V1Schedule) HasResourceVersion() bool {
	if o != nil && !IsNil(o.ResourceVersion) {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *V1Schedule) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

func (o V1Schedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ResourceVersion) {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	return toSerialize, nil
}

type NullableV1Schedule struct {
	value *V1Schedule
	isSet bool
}

func (v NullableV1Schedule) Get() *V1Schedule {
	return v.value
}

func (v *NullableV1Schedule) Set(val *V1Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Schedule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Schedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Schedule(val *V1Schedule) *NullableV1Schedule {
	return &NullableV1Schedule{value: val, isSet: true}
}

func (v NullableV1Schedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Schedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


