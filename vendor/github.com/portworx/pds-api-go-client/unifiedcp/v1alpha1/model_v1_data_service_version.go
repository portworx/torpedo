/*
public/portworx/pds/tasks/apiv1/tasks.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdsclient

import (
	"encoding/json"
)

// checks if the V1DataServiceVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DataServiceVersion{}

// V1DataServiceVersion Version represents a particular version of a data service.
type V1DataServiceVersion struct {
	Meta *V1Meta `json:"meta,omitempty"`
	Info *V1Info2 `json:"info,omitempty"`
}

// NewV1DataServiceVersion instantiates a new V1DataServiceVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DataServiceVersion() *V1DataServiceVersion {
	this := V1DataServiceVersion{}
	return &this
}

// NewV1DataServiceVersionWithDefaults instantiates a new V1DataServiceVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DataServiceVersionWithDefaults() *V1DataServiceVersion {
	this := V1DataServiceVersion{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *V1DataServiceVersion) GetMeta() V1Meta {
	if o == nil || IsNil(o.Meta) {
		var ret V1Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DataServiceVersion) GetMetaOk() (*V1Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *V1DataServiceVersion) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given V1Meta and assigns it to the Meta field.
func (o *V1DataServiceVersion) SetMeta(v V1Meta) {
	o.Meta = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *V1DataServiceVersion) GetInfo() V1Info2 {
	if o == nil || IsNil(o.Info) {
		var ret V1Info2
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DataServiceVersion) GetInfoOk() (*V1Info2, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *V1DataServiceVersion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given V1Info2 and assigns it to the Info field.
func (o *V1DataServiceVersion) SetInfo(v V1Info2) {
	o.Info = &v
}

func (o V1DataServiceVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DataServiceVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullableV1DataServiceVersion struct {
	value *V1DataServiceVersion
	isSet bool
}

func (v NullableV1DataServiceVersion) Get() *V1DataServiceVersion {
	return v.value
}

func (v *NullableV1DataServiceVersion) Set(val *V1DataServiceVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DataServiceVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DataServiceVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DataServiceVersion(val *V1DataServiceVersion) *NullableV1DataServiceVersion {
	return &NullableV1DataServiceVersion{value: val, isSet: true}
}

func (v NullableV1DataServiceVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DataServiceVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


