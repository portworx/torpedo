/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Invitationv1Status struct for Invitationv1Status
type Invitationv1Status struct {
	// Textual information for the current state of the invitation.
	Reason *string `json:"reason,omitempty"`
	Phase *StatusPhase2 `json:"phase,omitempty"`
}

// NewInvitationv1Status instantiates a new Invitationv1Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvitationv1Status() *Invitationv1Status {
	this := Invitationv1Status{}
	var phase StatusPhase2 = PHASE_UNSPECIFIED
	this.Phase = &phase
	return &this
}

// NewInvitationv1StatusWithDefaults instantiates a new Invitationv1Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvitationv1StatusWithDefaults() *Invitationv1Status {
	this := Invitationv1Status{}
	var phase StatusPhase2 = PHASE_UNSPECIFIED
	this.Phase = &phase
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Invitationv1Status) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invitationv1Status) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Invitationv1Status) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Invitationv1Status) SetReason(v string) {
	o.Reason = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *Invitationv1Status) GetPhase() StatusPhase2 {
	if o == nil || o.Phase == nil {
		var ret StatusPhase2
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invitationv1Status) GetPhaseOk() (*StatusPhase2, bool) {
	if o == nil || o.Phase == nil {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *Invitationv1Status) HasPhase() bool {
	if o != nil && o.Phase != nil {
		return true
	}

	return false
}

// SetPhase gets a reference to the given StatusPhase2 and assigns it to the Phase field.
func (o *Invitationv1Status) SetPhase(v StatusPhase2) {
	o.Phase = &v
}

func (o Invitationv1Status) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Phase != nil {
		toSerialize["phase"] = o.Phase
	}
	return json.Marshal(toSerialize)
}

type NullableInvitationv1Status struct {
	value *Invitationv1Status
	isSet bool
}

func (v NullableInvitationv1Status) Get() *Invitationv1Status {
	return v.value
}

func (v *NullableInvitationv1Status) Set(val *Invitationv1Status) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationv1Status) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationv1Status) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationv1Status(val *Invitationv1Status) *NullableInvitationv1Status {
	return &NullableInvitationv1Status{value: val, isSet: true}
}

func (v NullableInvitationv1Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationv1Status) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


