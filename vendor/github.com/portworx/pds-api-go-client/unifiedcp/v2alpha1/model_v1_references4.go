/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1References4 References to other resources.
type V1References4 struct {
	// UID of the Data service.
	DataServiceId *string `json:"dataServiceId,omitempty"`
}

// NewV1References4 instantiates a new V1References4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1References4() *V1References4 {
	this := V1References4{}
	return &this
}

// NewV1References4WithDefaults instantiates a new V1References4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1References4WithDefaults() *V1References4 {
	this := V1References4{}
	return &this
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *V1References4) GetDataServiceId() string {
	if o == nil || o.DataServiceId == nil {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1References4) GetDataServiceIdOk() (*string, bool) {
	if o == nil || o.DataServiceId == nil {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *V1References4) HasDataServiceId() bool {
	if o != nil && o.DataServiceId != nil {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *V1References4) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

func (o V1References4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataServiceId != nil {
		toSerialize["dataServiceId"] = o.DataServiceId
	}
	return json.Marshal(toSerialize)
}

type NullableV1References4 struct {
	value *V1References4
	isSet bool
}

func (v NullableV1References4) Get() *V1References4 {
	return v.value
}

func (v *NullableV1References4) Set(val *V1References4) {
	v.value = val
	v.isSet = true
}

func (v NullableV1References4) IsSet() bool {
	return v.isSet
}

func (v *NullableV1References4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1References4(val *V1References4) *NullableV1References4 {
	return &NullableV1References4{value: val, isSet: true}
}

func (v NullableV1References4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1References4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


