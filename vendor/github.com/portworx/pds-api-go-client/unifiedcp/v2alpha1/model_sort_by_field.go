/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SortByField Field names for sorting the list of resources.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
type SortByField string

// List of SortByField
const (
	FIELD_UNSPECIFIED SortByField = "FIELD_UNSPECIFIED"
	NAME SortByField = "NAME"
	CREATED_AT SortByField = "CREATED_AT"
	UPDATED_AT SortByField = "UPDATED_AT"
	PHASE SortByField = "PHASE"
)

// All allowed values of SortByField enum
var AllowedSortByFieldEnumValues = []SortByField{
	"FIELD_UNSPECIFIED",
	"NAME",
	"CREATED_AT",
	"UPDATED_AT",
	"PHASE",
}

func (v *SortByField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortByField(value)
	for _, existing := range AllowedSortByFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortByField", value)
}

// NewSortByFieldFromValue returns a pointer to a valid SortByField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortByFieldFromValue(v string) (*SortByField, error) {
	ev := SortByField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortByField: valid values are %v", v, AllowedSortByFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortByField) IsValid() bool {
	for _, existing := range AllowedSortByFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortByField value
func (v SortByField) Ptr() *SortByField {
	return &v
}

type NullableSortByField struct {
	value *SortByField
	isSet bool
}

func (v NullableSortByField) Get() *SortByField {
	return v.value
}

func (v *NullableSortByField) Set(val *SortByField) {
	v.value = val
	v.isSet = true
}

func (v NullableSortByField) IsSet() bool {
	return v.isSet
}

func (v *NullableSortByField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortByField(val *SortByField) *NullableSortByField {
	return &NullableSortByField{value: val, isSet: true}
}

func (v NullableSortByField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortByField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

