/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1EventType EventType is type of kubernetes event.   - EVENT_TYPE_UNSPECIFIED: Unspecified.  - NORMAL: Normal event.  - WARNING: Warning event.
type V1EventType string

// List of v1EventType
const (
	EVENT_TYPE_UNSPECIFIED V1EventType = "EVENT_TYPE_UNSPECIFIED"
	NORMAL V1EventType = "NORMAL"
	WARNING V1EventType = "WARNING"
)

// All allowed values of V1EventType enum
var AllowedV1EventTypeEnumValues = []V1EventType{
	"EVENT_TYPE_UNSPECIFIED",
	"NORMAL",
	"WARNING",
}

func (v *V1EventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1EventType(value)
	for _, existing := range AllowedV1EventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1EventType", value)
}

// NewV1EventTypeFromValue returns a pointer to a valid V1EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1EventTypeFromValue(v string) (*V1EventType, error) {
	ev := V1EventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1EventType: valid values are %v", v, AllowedV1EventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1EventType) IsValid() bool {
	for _, existing := range AllowedV1EventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1EventType value
func (v V1EventType) Ptr() *V1EventType {
	return &v
}

type NullableV1EventType struct {
	value *V1EventType
	isSet bool
}

func (v NullableV1EventType) Get() *V1EventType {
	return v.value
}

func (v *NullableV1EventType) Set(val *V1EventType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EventType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EventType(val *V1EventType) *NullableV1EventType {
	return &NullableV1EventType{value: val, isSet: true}
}

func (v NullableV1EventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

