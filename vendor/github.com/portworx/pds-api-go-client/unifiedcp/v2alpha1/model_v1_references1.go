/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1References1 References to other resources.
type V1References1 struct {
	// UID of the image of the data service which will needs to be backup .
	ImageId *string `json:"imageId,omitempty"`
}

// NewV1References1 instantiates a new V1References1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1References1() *V1References1 {
	this := V1References1{}
	return &this
}

// NewV1References1WithDefaults instantiates a new V1References1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1References1WithDefaults() *V1References1 {
	this := V1References1{}
	return &this
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *V1References1) GetImageId() string {
	if o == nil || o.ImageId == nil {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1References1) GetImageIdOk() (*string, bool) {
	if o == nil || o.ImageId == nil {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *V1References1) HasImageId() bool {
	if o != nil && o.ImageId != nil {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *V1References1) SetImageId(v string) {
	o.ImageId = &v
}

func (o V1References1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageId != nil {
		toSerialize["imageId"] = o.ImageId
	}
	return json.Marshal(toSerialize)
}

type NullableV1References1 struct {
	value *V1References1
	isSet bool
}

func (v NullableV1References1) Get() *V1References1 {
	return v.value
}

func (v *NullableV1References1) Set(val *V1References1) {
	v.value = val
	v.isSet = true
}

func (v NullableV1References1) IsSet() bool {
	return v.isSet
}

func (v *NullableV1References1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1References1(val *V1References1) *NullableV1References1 {
	return &NullableV1References1{value: val, isSet: true}
}

func (v NullableV1References1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1References1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


