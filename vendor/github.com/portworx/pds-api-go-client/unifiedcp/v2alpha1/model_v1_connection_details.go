/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ConnectionDetails ConnectionDetails of data service.
type V1ConnectionDetails struct {
	// Nodes of the data service.
	Nodes []string `json:"nodes,omitempty"`
	// Ports provided by the data service (name and number).
	Ports *map[string]int32 `json:"ports,omitempty"`
}

// NewV1ConnectionDetails instantiates a new V1ConnectionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConnectionDetails() *V1ConnectionDetails {
	this := V1ConnectionDetails{}
	return &this
}

// NewV1ConnectionDetailsWithDefaults instantiates a new V1ConnectionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConnectionDetailsWithDefaults() *V1ConnectionDetails {
	this := V1ConnectionDetails{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V1ConnectionDetails) GetNodes() []string {
	if o == nil || o.Nodes == nil {
		var ret []string
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionDetails) GetNodesOk() ([]string, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V1ConnectionDetails) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []string and assigns it to the Nodes field.
func (o *V1ConnectionDetails) SetNodes(v []string) {
	o.Nodes = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *V1ConnectionDetails) GetPorts() map[string]int32 {
	if o == nil || o.Ports == nil {
		var ret map[string]int32
		return ret
	}
	return *o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionDetails) GetPortsOk() (*map[string]int32, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *V1ConnectionDetails) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given map[string]int32 and assigns it to the Ports field.
func (o *V1ConnectionDetails) SetPorts(v map[string]int32) {
	o.Ports = &v
}

func (o V1ConnectionDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	return json.Marshal(toSerialize)
}

type NullableV1ConnectionDetails struct {
	value *V1ConnectionDetails
	isSet bool
}

func (v NullableV1ConnectionDetails) Get() *V1ConnectionDetails {
	return v.value
}

func (v *NullableV1ConnectionDetails) Set(val *V1ConnectionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConnectionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConnectionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConnectionDetails(val *V1ConnectionDetails) *NullableV1ConnectionDetails {
	return &NullableV1ConnectionDetails{value: val, isSet: true}
}

func (v NullableV1ConnectionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConnectionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


