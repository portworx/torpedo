/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// TargetClusterServiceApiService TargetClusterServiceApi service
type TargetClusterServiceApiService service

type ApiTargetClusterServiceDeleteTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceApiService
	id string
	force *bool
}

// Flag to indicate force delete
func (r ApiTargetClusterServiceDeleteTargetClusterRequest) Force(force bool) ApiTargetClusterServiceDeleteTargetClusterRequest {
	r.force = &force
	return r
}

func (r ApiTargetClusterServiceDeleteTargetClusterRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TargetClusterServiceDeleteTargetClusterExecute(r)
}

/*
TargetClusterServiceDeleteTargetCluster DeleteTargetCluster API deletes the specified TargetCluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique identifier of the cluster whose details needs to be fetched
 @return ApiTargetClusterServiceDeleteTargetClusterRequest
*/
func (a *TargetClusterServiceApiService) TargetClusterServiceDeleteTargetCluster(ctx context.Context, id string) ApiTargetClusterServiceDeleteTargetClusterRequest {
	return ApiTargetClusterServiceDeleteTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TargetClusterServiceApiService) TargetClusterServiceDeleteTargetClusterExecute(r ApiTargetClusterServiceDeleteTargetClusterRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceApiService.TargetClusterServiceDeleteTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/clusters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceGetTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceApiService
	id string
}

func (r ApiTargetClusterServiceGetTargetClusterRequest) Execute() (*V1TargetCluster, *http.Response, error) {
	return r.ApiService.TargetClusterServiceGetTargetClusterExecute(r)
}

/*
TargetClusterServiceGetTargetCluster GetTargetCluster API returns the info about the TargetCluster for given name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique identifier of the cluster whose details needs to be fetched
 @return ApiTargetClusterServiceGetTargetClusterRequest
*/
func (a *TargetClusterServiceApiService) TargetClusterServiceGetTargetCluster(ctx context.Context, id string) ApiTargetClusterServiceGetTargetClusterRequest {
	return ApiTargetClusterServiceGetTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1TargetCluster
func (a *TargetClusterServiceApiService) TargetClusterServiceGetTargetClusterExecute(r ApiTargetClusterServiceGetTargetClusterRequest) (*V1TargetCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1TargetCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceApiService.TargetClusterServiceGetTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/clusters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceListTargetClustersRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceApiService
	accountId *string
	projectId *string
	tenantId *string
	paginationPageNumber *string
	paginationPageSize *string
}

// list target clusters associated with an account
func (r ApiTargetClusterServiceListTargetClustersRequest) AccountId(accountId string) ApiTargetClusterServiceListTargetClustersRequest {
	r.accountId = &accountId
	return r
}

// list target clusters associated with a project
func (r ApiTargetClusterServiceListTargetClustersRequest) ProjectId(projectId string) ApiTargetClusterServiceListTargetClustersRequest {
	r.projectId = &projectId
	return r
}

// list target clusters associated with a tenant
func (r ApiTargetClusterServiceListTargetClustersRequest) TenantId(tenantId string) ApiTargetClusterServiceListTargetClustersRequest {
	r.tenantId = &tenantId
	return r
}

// Page number is the page number to return based on the size
func (r ApiTargetClusterServiceListTargetClustersRequest) PaginationPageNumber(paginationPageNumber string) ApiTargetClusterServiceListTargetClustersRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiTargetClusterServiceListTargetClustersRequest) PaginationPageSize(paginationPageSize string) ApiTargetClusterServiceListTargetClustersRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiTargetClusterServiceListTargetClustersRequest) Execute() (*V1ListTargetClustersResponse, *http.Response, error) {
	return r.ApiService.TargetClusterServiceListTargetClustersExecute(r)
}

/*
TargetClusterServiceListTargetClusters ListTargetCluster API lists the TargetClusters visible to the caller

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTargetClusterServiceListTargetClustersRequest
*/
func (a *TargetClusterServiceApiService) TargetClusterServiceListTargetClusters(ctx context.Context) ApiTargetClusterServiceListTargetClustersRequest {
	return ApiTargetClusterServiceListTargetClustersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTargetClustersResponse
func (a *TargetClusterServiceApiService) TargetClusterServiceListTargetClustersExecute(r ApiTargetClusterServiceListTargetClustersRequest) (*V1ListTargetClustersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTargetClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceApiService.TargetClusterServiceListTargetClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		localVarQueryParams.Add("accountId", parameterToString(*r.accountId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.tenantId != nil {
		localVarQueryParams.Add("tenantId", parameterToString(*r.tenantId, ""))
	}
	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceUpdateTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceApiService
	targetClusterMetaUid string
	targetClusterDetails *TargetClusterDetails
}

// Target cluster details
func (r ApiTargetClusterServiceUpdateTargetClusterRequest) TargetClusterDetails(targetClusterDetails TargetClusterDetails) ApiTargetClusterServiceUpdateTargetClusterRequest {
	r.targetClusterDetails = &targetClusterDetails
	return r
}

func (r ApiTargetClusterServiceUpdateTargetClusterRequest) Execute() (*V1TargetCluster, *http.Response, error) {
	return r.ApiService.TargetClusterServiceUpdateTargetClusterExecute(r)
}

/*
TargetClusterServiceUpdateTargetCluster UpdateTargetCluster API updates the metadata(e.g name or labels) of the specified TargetCluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetClusterMetaUid UID of the resource of the format <resource prefix>-<uuid>.
 @return ApiTargetClusterServiceUpdateTargetClusterRequest
*/
func (a *TargetClusterServiceApiService) TargetClusterServiceUpdateTargetCluster(ctx context.Context, targetClusterMetaUid string) ApiTargetClusterServiceUpdateTargetClusterRequest {
	return ApiTargetClusterServiceUpdateTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		targetClusterMetaUid: targetClusterMetaUid,
	}
}

// Execute executes the request
//  @return V1TargetCluster
func (a *TargetClusterServiceApiService) TargetClusterServiceUpdateTargetClusterExecute(r ApiTargetClusterServiceUpdateTargetClusterRequest) (*V1TargetCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1TargetCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceApiService.TargetClusterServiceUpdateTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/clusters/{targetCluster.meta.uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetCluster.meta.uid"+"}", url.PathEscape(parameterToString(r.targetClusterMetaUid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetClusterDetails == nil {
		return localVarReturnValue, nil, reportError("targetClusterDetails is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.targetClusterDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
