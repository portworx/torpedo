/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ListNamespacesResponse struct for V1ListNamespacesResponse
type V1ListNamespacesResponse struct {
	Namespaces []V1Namespace `json:"namespaces,omitempty"`
}

// NewV1ListNamespacesResponse instantiates a new V1ListNamespacesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListNamespacesResponse() *V1ListNamespacesResponse {
	this := V1ListNamespacesResponse{}
	return &this
}

// NewV1ListNamespacesResponseWithDefaults instantiates a new V1ListNamespacesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListNamespacesResponseWithDefaults() *V1ListNamespacesResponse {
	this := V1ListNamespacesResponse{}
	return &this
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *V1ListNamespacesResponse) GetNamespaces() []V1Namespace {
	if o == nil || o.Namespaces == nil {
		var ret []V1Namespace
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesResponse) GetNamespacesOk() ([]V1Namespace, bool) {
	if o == nil || o.Namespaces == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *V1ListNamespacesResponse) HasNamespaces() bool {
	if o != nil && o.Namespaces != nil {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []V1Namespace and assigns it to the Namespaces field.
func (o *V1ListNamespacesResponse) SetNamespaces(v []V1Namespace) {
	o.Namespaces = v
}

func (o V1ListNamespacesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	return json.Marshal(toSerialize)
}

type NullableV1ListNamespacesResponse struct {
	value *V1ListNamespacesResponse
	isSet bool
}

func (v NullableV1ListNamespacesResponse) Get() *V1ListNamespacesResponse {
	return v.value
}

func (v *NullableV1ListNamespacesResponse) Set(val *V1ListNamespacesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListNamespacesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListNamespacesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListNamespacesResponse(val *V1ListNamespacesResponse) *NullableV1ListNamespacesResponse {
	return &NullableV1ListNamespacesResponse{value: val, isSet: true}
}

func (v NullableV1ListNamespacesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListNamespacesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


