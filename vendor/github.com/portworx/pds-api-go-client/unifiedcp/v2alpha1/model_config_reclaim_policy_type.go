/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConfigReclaimPolicyType Enum for Reclaim Policy for the backup configuration.   - RECLAIM_POLICY_TYPE_UNSPECIFIED: Unspecified.  - DELETE: Delete snapshot.  - RETAIN: Retain snapshot.
type ConfigReclaimPolicyType string

// List of ConfigReclaimPolicyType
const (
	RECLAIM_POLICY_TYPE_UNSPECIFIED ConfigReclaimPolicyType = "RECLAIM_POLICY_TYPE_UNSPECIFIED"
	DELETE ConfigReclaimPolicyType = "DELETE"
	RETAIN ConfigReclaimPolicyType = "RETAIN"
)

// All allowed values of ConfigReclaimPolicyType enum
var AllowedConfigReclaimPolicyTypeEnumValues = []ConfigReclaimPolicyType{
	"RECLAIM_POLICY_TYPE_UNSPECIFIED",
	"DELETE",
	"RETAIN",
}

func (v *ConfigReclaimPolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigReclaimPolicyType(value)
	for _, existing := range AllowedConfigReclaimPolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigReclaimPolicyType", value)
}

// NewConfigReclaimPolicyTypeFromValue returns a pointer to a valid ConfigReclaimPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigReclaimPolicyTypeFromValue(v string) (*ConfigReclaimPolicyType, error) {
	ev := ConfigReclaimPolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigReclaimPolicyType: valid values are %v", v, AllowedConfigReclaimPolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigReclaimPolicyType) IsValid() bool {
	for _, existing := range AllowedConfigReclaimPolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigReclaimPolicyType value
func (v ConfigReclaimPolicyType) Ptr() *ConfigReclaimPolicyType {
	return &v
}

type NullableConfigReclaimPolicyType struct {
	value *ConfigReclaimPolicyType
	isSet bool
}

func (v NullableConfigReclaimPolicyType) Get() *ConfigReclaimPolicyType {
	return v.value
}

func (v *NullableConfigReclaimPolicyType) Set(val *ConfigReclaimPolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigReclaimPolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigReclaimPolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigReclaimPolicyType(val *ConfigReclaimPolicyType) *NullableConfigReclaimPolicyType {
	return &NullableConfigReclaimPolicyType{value: val, isSet: true}
}

func (v NullableConfigReclaimPolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigReclaimPolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

