/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1InfraResourceType Type of the resource.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - ACCOUNT: Currently supported infra resources. Infra resource of type account.  - TENANT: Infra resource of type tenant.  - PROJECT: Infra resource of type projects.  - TARGET_CLUSTER: Infra resource target cluster.  - NAMESPACE: Infra resource of type namespace.  - CREDENTIAL: Infra resource of type credential.  - BACKUP_LOCATION: Infra resource of type backup location.
type V1InfraResourceType string

// List of v1InfraResourceType
const (
	TYPE_UNSPECIFIED V1InfraResourceType = "TYPE_UNSPECIFIED"
	ACCOUNT V1InfraResourceType = "ACCOUNT"
	TENANT V1InfraResourceType = "TENANT"
	PROJECT V1InfraResourceType = "PROJECT"
	TARGET_CLUSTER V1InfraResourceType = "TARGET_CLUSTER"
	NAMESPACE V1InfraResourceType = "NAMESPACE"
	CREDENTIAL V1InfraResourceType = "CREDENTIAL"
	BACKUP_LOCATION V1InfraResourceType = "BACKUP_LOCATION"
)

// All allowed values of V1InfraResourceType enum
var AllowedV1InfraResourceTypeEnumValues = []V1InfraResourceType{
	"TYPE_UNSPECIFIED",
	"ACCOUNT",
	"TENANT",
	"PROJECT",
	"TARGET_CLUSTER",
	"NAMESPACE",
	"CREDENTIAL",
	"BACKUP_LOCATION",
}

func (v *V1InfraResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1InfraResourceType(value)
	for _, existing := range AllowedV1InfraResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1InfraResourceType", value)
}

// NewV1InfraResourceTypeFromValue returns a pointer to a valid V1InfraResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1InfraResourceTypeFromValue(v string) (*V1InfraResourceType, error) {
	ev := V1InfraResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1InfraResourceType: valid values are %v", v, AllowedV1InfraResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1InfraResourceType) IsValid() bool {
	for _, existing := range AllowedV1InfraResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1InfraResourceType value
func (v V1InfraResourceType) Ptr() *V1InfraResourceType {
	return &v
}

type NullableV1InfraResourceType struct {
	value *V1InfraResourceType
	isSet bool
}

func (v NullableV1InfraResourceType) Get() *V1InfraResourceType {
	return v.value
}

func (v *NullableV1InfraResourceType) Set(val *V1InfraResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InfraResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InfraResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InfraResourceType(val *V1InfraResourceType) *NullableV1InfraResourceType {
	return &NullableV1InfraResourceType{value: val, isSet: true}
}

func (v NullableV1InfraResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InfraResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

