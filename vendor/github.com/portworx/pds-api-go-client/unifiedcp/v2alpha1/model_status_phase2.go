/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatusPhase2 - PHASE_UNSPECIFIED: Invitation status unspecified  - PENDING: Invitation acceptance pending  - ACCEPTED: Invitation Accepted
type StatusPhase2 string

// List of StatusPhase2
const (
	PHASE_UNSPECIFIED StatusPhase2 = "PHASE_UNSPECIFIED"
	PENDING StatusPhase2 = "PENDING"
	ACCEPTED StatusPhase2 = "ACCEPTED"
)

// All allowed values of StatusPhase2 enum
var AllowedStatusPhase2EnumValues = []StatusPhase2{
	"PHASE_UNSPECIFIED",
	"PENDING",
	"ACCEPTED",
}

func (v *StatusPhase2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusPhase2(value)
	for _, existing := range AllowedStatusPhase2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusPhase2", value)
}

// NewStatusPhase2FromValue returns a pointer to a valid StatusPhase2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusPhase2FromValue(v string) (*StatusPhase2, error) {
	ev := StatusPhase2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusPhase2: valid values are %v", v, AllowedStatusPhase2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusPhase2) IsValid() bool {
	for _, existing := range AllowedStatusPhase2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusPhase2 value
func (v StatusPhase2) Ptr() *StatusPhase2 {
	return &v
}

type NullableStatusPhase2 struct {
	value *StatusPhase2
	isSet bool
}

func (v NullableStatusPhase2) Get() *StatusPhase2 {
	return v.value
}

func (v *NullableStatusPhase2) Set(val *StatusPhase2) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusPhase2) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusPhase2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusPhase2(val *StatusPhase2) *NullableStatusPhase2 {
	return &NullableStatusPhase2{value: val, isSet: true}
}

func (v NullableStatusPhase2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusPhase2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

