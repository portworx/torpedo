/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// NamespaceServiceApiService NamespaceServiceApi service
type NamespaceServiceApiService service

type ApiNamespaceServiceListNamespacesRequest struct {
	ctx context.Context
	ApiService *NamespaceServiceApiService
	clusterId string
	tenantId *string
	projectId *string
	label *string
}

// tenant ID for which namespace need to be fetched
func (r ApiNamespaceServiceListNamespacesRequest) TenantId(tenantId string) ApiNamespaceServiceListNamespacesRequest {
	r.tenantId = &tenantId
	return r
}

// project ID for which namespaces need to be fetched
func (r ApiNamespaceServiceListNamespacesRequest) ProjectId(projectId string) ApiNamespaceServiceListNamespacesRequest {
	r.projectId = &projectId
	return r
}

// for label based filtering of the namespaces
func (r ApiNamespaceServiceListNamespacesRequest) Label(label string) ApiNamespaceServiceListNamespacesRequest {
	r.label = &label
	return r
}

func (r ApiNamespaceServiceListNamespacesRequest) Execute() (*V1ListNamespacesResponse, *http.Response, error) {
	return r.ApiService.NamespaceServiceListNamespacesExecute(r)
}

/*
NamespaceServiceListNamespaces ListNamespaces API will return all the namespaces on the control plane

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId cluster ID for which namespaces need to be fetched
 @return ApiNamespaceServiceListNamespacesRequest
*/
func (a *NamespaceServiceApiService) NamespaceServiceListNamespaces(ctx context.Context, clusterId string) ApiNamespaceServiceListNamespacesRequest {
	return ApiNamespaceServiceListNamespacesRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
	}
}

// Execute executes the request
//  @return V1ListNamespacesResponse
func (a *NamespaceServiceApiService) NamespaceServiceListNamespacesExecute(r ApiNamespaceServiceListNamespacesRequest) (*V1ListNamespacesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListNamespacesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamespaceServiceApiService.NamespaceServiceListNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/clusters/{clusterId}/namespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterToString(r.clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		localVarQueryParams.Add("tenantId", parameterToString(*r.tenantId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.label != nil {
		localVarQueryParams.Add("label", parameterToString(*r.label, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
