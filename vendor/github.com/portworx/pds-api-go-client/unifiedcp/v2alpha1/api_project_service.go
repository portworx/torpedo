/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ProjectServiceApiService ProjectServiceApi service
type ProjectServiceApiService service

type ApiProjectServiceAssociateResourcesRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	projectId string
	projectServiceAssociateResourcesBody *ProjectServiceAssociateResourcesBody
}

func (r ApiProjectServiceAssociateResourcesRequest) ProjectServiceAssociateResourcesBody(projectServiceAssociateResourcesBody ProjectServiceAssociateResourcesBody) ApiProjectServiceAssociateResourcesRequest {
	r.projectServiceAssociateResourcesBody = &projectServiceAssociateResourcesBody
	return r
}

func (r ApiProjectServiceAssociateResourcesRequest) Execute() (*V1Project, *http.Response, error) {
	return r.ApiService.ProjectServiceAssociateResourcesExecute(r)
}

/*
ProjectServiceAssociateResources AssociateResources will append the supplied resources to existing infra resources of a given project config. (-- api-linter: core::0136::http-method=disabled     aip.dev/not-precedent: We need to do this because renaming creating issues with other apis)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project.
 @return ApiProjectServiceAssociateResourcesRequest
*/
func (a *ProjectServiceApiService) ProjectServiceAssociateResources(ctx context.Context, projectId string) ApiProjectServiceAssociateResourcesRequest {
	return ApiProjectServiceAssociateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return V1Project
func (a *ProjectServiceApiService) ProjectServiceAssociateResourcesExecute(r ApiProjectServiceAssociateResourcesRequest) (*V1Project, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceAssociateResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}:associate"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectServiceAssociateResourcesBody == nil {
		return localVarReturnValue, nil, reportError("projectServiceAssociateResourcesBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectServiceAssociateResourcesBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectServiceCreateProjectRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	tenantId string
	projectServiceCreateProjectBody *ProjectServiceCreateProjectBody
}

func (r ApiProjectServiceCreateProjectRequest) ProjectServiceCreateProjectBody(projectServiceCreateProjectBody ProjectServiceCreateProjectBody) ApiProjectServiceCreateProjectRequest {
	r.projectServiceCreateProjectBody = &projectServiceCreateProjectBody
	return r
}

func (r ApiProjectServiceCreateProjectRequest) Execute() (*V1Project, *http.Response, error) {
	return r.ApiService.ProjectServiceCreateProjectExecute(r)
}

/*
ProjectServiceCreateProject Create project api creates a project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId The parent tenant under which project will be created (-- api-linter: core::0133::request-unknown-fields=disabled     aip.dev/not-precedent: We need this field for to support creation of     the resource in the tenant context. --)
 @return ApiProjectServiceCreateProjectRequest
*/
func (a *ProjectServiceApiService) ProjectServiceCreateProject(ctx context.Context, tenantId string) ApiProjectServiceCreateProjectRequest {
	return ApiProjectServiceCreateProjectRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return V1Project
func (a *ProjectServiceApiService) ProjectServiceCreateProjectExecute(r ApiProjectServiceCreateProjectRequest) (*V1Project, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceCreateProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/tenants/{tenantId}/projects"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterToString(r.tenantId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectServiceCreateProjectBody == nil {
		return localVarReturnValue, nil, reportError("projectServiceCreateProjectBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectServiceCreateProjectBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectServiceDeleteProjectRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	projectId string
}

func (r ApiProjectServiceDeleteProjectRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ProjectServiceDeleteProjectExecute(r)
}

/*
ProjectServiceDeleteProject Deletes a project and its associated resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project which needs to be deleted.
 @return ApiProjectServiceDeleteProjectRequest
*/
func (a *ProjectServiceApiService) ProjectServiceDeleteProject(ctx context.Context, projectId string) ApiProjectServiceDeleteProjectRequest {
	return ApiProjectServiceDeleteProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ProjectServiceApiService) ProjectServiceDeleteProjectExecute(r ApiProjectServiceDeleteProjectRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceDeleteProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectServiceDisassociateResourcesRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	projectId string
	projectServiceDisassociateResourcesBody *ProjectServiceDisassociateResourcesBody
}

func (r ApiProjectServiceDisassociateResourcesRequest) ProjectServiceDisassociateResourcesBody(projectServiceDisassociateResourcesBody ProjectServiceDisassociateResourcesBody) ApiProjectServiceDisassociateResourcesRequest {
	r.projectServiceDisassociateResourcesBody = &projectServiceDisassociateResourcesBody
	return r
}

func (r ApiProjectServiceDisassociateResourcesRequest) Execute() (*V1Project, *http.Response, error) {
	return r.ApiService.ProjectServiceDisassociateResourcesExecute(r)
}

/*
ProjectServiceDisassociateResources DisassociateResource will remove the infra resources supplied in the request from the project config. (-- api-linter: core::0136::http-method=disabled     aip.dev/not-precedent: We need to do this because renaming creating issues with other apis)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project from which infra resources to be disassociated.
 @return ApiProjectServiceDisassociateResourcesRequest
*/
func (a *ProjectServiceApiService) ProjectServiceDisassociateResources(ctx context.Context, projectId string) ApiProjectServiceDisassociateResourcesRequest {
	return ApiProjectServiceDisassociateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return V1Project
func (a *ProjectServiceApiService) ProjectServiceDisassociateResourcesExecute(r ApiProjectServiceDisassociateResourcesRequest) (*V1Project, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceDisassociateResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}:disassociate"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectServiceDisassociateResourcesBody == nil {
		return localVarReturnValue, nil, reportError("projectServiceDisassociateResourcesBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectServiceDisassociateResourcesBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectServiceGetProjectRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	projectId string
}

func (r ApiProjectServiceGetProjectRequest) Execute() (*V1Project, *http.Response, error) {
	return r.ApiService.ProjectServiceGetProjectExecute(r)
}

/*
ProjectServiceGetProject Get project apis returns a requested project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project id.
 @return ApiProjectServiceGetProjectRequest
*/
func (a *ProjectServiceApiService) ProjectServiceGetProject(ctx context.Context, projectId string) ApiProjectServiceGetProjectRequest {
	return ApiProjectServiceGetProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return V1Project
func (a *ProjectServiceApiService) ProjectServiceGetProjectExecute(r ApiProjectServiceGetProjectRequest) (*V1Project, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceGetProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectServiceListProjectsRequest struct {
	ctx context.Context
	ApiService *ProjectServiceApiService
	queryAppResource *string
	queryInfraResource *string
	queryResourceId *string
	sortSortBy *string
	sortSortOrder *string
	paginationPageNumber *string
	paginationPageSize *string
}

// Type of the application managed resource for which projects to be listed.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - PDS_DEPLOYMENT: List of supported PDS application resources. PDS application resource of type deployment.  - PDS_BACKUP: PDS application resource of type backup.  - PDS_RESTORE: PDS application resource of type restore.  - BAAS_BACKUP: List of supported BAAS application resources. BAAS application resource of type backup.
func (r ApiProjectServiceListProjectsRequest) QueryAppResource(queryAppResource string) ApiProjectServiceListProjectsRequest {
	r.queryAppResource = &queryAppResource
	return r
}

// Type of the infra resource for which projects to be listed.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - ACCOUNT: Currently supported infra resources. Infra resource of type account.  - TENANT: Infra resource of type tenant.  - PROJECT: Infra resource of type projects.  - TARGET_CLUSTER: Infra resource target cluster.  - NAMESPACE: Infra resource of type namespace.  - CREDENTIAL: Infra resource of type credential.  - BACKUP_LOCATION: Infra resource of type backup location.
func (r ApiProjectServiceListProjectsRequest) QueryInfraResource(queryInfraResource string) ApiProjectServiceListProjectsRequest {
	r.queryInfraResource = &queryInfraResource
	return r
}

// ID of the resource for which projects to be listed.
func (r ApiProjectServiceListProjectsRequest) QueryResourceId(queryResourceId string) ApiProjectServiceListProjectsRequest {
	r.queryResourceId = &queryResourceId
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiProjectServiceListProjectsRequest) SortSortBy(sortSortBy string) ApiProjectServiceListProjectsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiProjectServiceListProjectsRequest) SortSortOrder(sortSortOrder string) ApiProjectServiceListProjectsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

// Page number is the page number to return based on the size
func (r ApiProjectServiceListProjectsRequest) PaginationPageNumber(paginationPageNumber string) ApiProjectServiceListProjectsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiProjectServiceListProjectsRequest) PaginationPageSize(paginationPageSize string) ApiProjectServiceListProjectsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiProjectServiceListProjectsRequest) Execute() (*V1ListProjectsResponse, *http.Response, error) {
	return r.ApiService.ProjectServiceListProjectsExecute(r)
}

/*
ProjectServiceListProjects ListProjects API lists the projects visible to the caller for the provided tenant.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProjectServiceListProjectsRequest
*/
func (a *ProjectServiceApiService) ProjectServiceListProjects(ctx context.Context) ApiProjectServiceListProjectsRequest {
	return ApiProjectServiceListProjectsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListProjectsResponse
func (a *ProjectServiceApiService) ProjectServiceListProjectsExecute(r ApiProjectServiceListProjectsRequest) (*V1ListProjectsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListProjectsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectServiceApiService.ProjectServiceListProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.queryAppResource != nil {
		localVarQueryParams.Add("query.appResource", parameterToString(*r.queryAppResource, ""))
	}
	if r.queryInfraResource != nil {
		localVarQueryParams.Add("query.infraResource", parameterToString(*r.queryInfraResource, ""))
	}
	if r.queryResourceId != nil {
		localVarQueryParams.Add("query.resourceId", parameterToString(*r.queryResourceId, ""))
	}
	if r.sortSortBy != nil {
		localVarQueryParams.Add("sort.sortBy", parameterToString(*r.sortSortBy, ""))
	}
	if r.sortSortOrder != nil {
		localVarQueryParams.Add("sort.sortOrder", parameterToString(*r.sortSortOrder, ""))
	}
	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
