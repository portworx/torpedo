/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NamespacePhasePhase - PHASE_UNSPECIFIED: Must be set in the proto file; ignore.  - AVAILABLE: Available namespaces can be used to deploy applications, they have \"<platform-domain>/available: true\" label  - RESERVED: Reserved namespaces are used by platform agents and cannot be used to deploy applications, they have \"<platform-domain>/reserved: true\" label  - UNAVAILABLE: Unavailable namespaces are the ones deleted by user with active deployments or by removing available label
type NamespacePhasePhase string

// List of NamespacePhasePhase
const (
	PHASE_UNSPECIFIED NamespacePhasePhase = "PHASE_UNSPECIFIED"
	AVAILABLE NamespacePhasePhase = "AVAILABLE"
	RESERVED NamespacePhasePhase = "RESERVED"
	UNAVAILABLE NamespacePhasePhase = "UNAVAILABLE"
)

// All allowed values of NamespacePhasePhase enum
var AllowedNamespacePhasePhaseEnumValues = []NamespacePhasePhase{
	"PHASE_UNSPECIFIED",
	"AVAILABLE",
	"RESERVED",
	"UNAVAILABLE",
}

func (v *NamespacePhasePhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NamespacePhasePhase(value)
	for _, existing := range AllowedNamespacePhasePhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NamespacePhasePhase", value)
}

// NewNamespacePhasePhaseFromValue returns a pointer to a valid NamespacePhasePhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNamespacePhasePhaseFromValue(v string) (*NamespacePhasePhase, error) {
	ev := NamespacePhasePhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NamespacePhasePhase: valid values are %v", v, AllowedNamespacePhasePhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NamespacePhasePhase) IsValid() bool {
	for _, existing := range AllowedNamespacePhasePhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NamespacePhasePhase value
func (v NamespacePhasePhase) Ptr() *NamespacePhasePhase {
	return &v
}

type NullableNamespacePhasePhase struct {
	value *NamespacePhasePhase
	isSet bool
}

func (v NullableNamespacePhasePhase) Get() *NamespacePhasePhase {
	return v.value
}

func (v *NullableNamespacePhasePhase) Set(val *NamespacePhasePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespacePhasePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespacePhasePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespacePhasePhase(val *NamespacePhasePhase) *NullableNamespacePhasePhase {
	return &NullableNamespacePhasePhase{value: val, isSet: true}
}

func (v NullableNamespacePhasePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespacePhasePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

