/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// BackupServiceApiService BackupServiceApi service
type BackupServiceApiService service

type ApiBackupServiceDeleteBackupRequest struct {
	ctx context.Context
	ApiService *BackupServiceApiService
	id string
}

func (r ApiBackupServiceDeleteBackupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BackupServiceDeleteBackupExecute(r)
}

/*
BackupServiceDeleteBackup DeleteBackup API deletes the Backup resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the Backup.
 @return ApiBackupServiceDeleteBackupRequest
*/
func (a *BackupServiceApiService) BackupServiceDeleteBackup(ctx context.Context, id string) ApiBackupServiceDeleteBackupRequest {
	return ApiBackupServiceDeleteBackupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BackupServiceApiService) BackupServiceDeleteBackupExecute(r ApiBackupServiceDeleteBackupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupServiceApiService.BackupServiceDeleteBackup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupServiceGetBackupRequest struct {
	ctx context.Context
	ApiService *BackupServiceApiService
	id string
}

func (r ApiBackupServiceGetBackupRequest) Execute() (*V1Backup, *http.Response, error) {
	return r.ApiService.BackupServiceGetBackupExecute(r)
}

/*
BackupServiceGetBackup GetBackup API returns the Backup resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the Backup.
 @return ApiBackupServiceGetBackupRequest
*/
func (a *BackupServiceApiService) BackupServiceGetBackup(ctx context.Context, id string) ApiBackupServiceGetBackupRequest {
	return ApiBackupServiceGetBackupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1Backup
func (a *BackupServiceApiService) BackupServiceGetBackupExecute(r ApiBackupServiceGetBackupRequest) (*V1Backup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Backup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupServiceApiService.BackupServiceGetBackup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupServiceListBackupsRequest struct {
	ctx context.Context
	ApiService *BackupServiceApiService
	accountId *string
	tenantId *string
	clusterId *string
	namespaceId *string
	projectId *string
	backupConfigId *string
	paginationPageNumber *string
	paginationPageSize *string
	sortSortBy *string
	sortSortOrder *string
}

// UID of the account.
func (r ApiBackupServiceListBackupsRequest) AccountId(accountId string) ApiBackupServiceListBackupsRequest {
	r.accountId = &accountId
	return r
}

// UID of the tenant.
func (r ApiBackupServiceListBackupsRequest) TenantId(tenantId string) ApiBackupServiceListBackupsRequest {
	r.tenantId = &tenantId
	return r
}

// UID of the target cluster.
func (r ApiBackupServiceListBackupsRequest) ClusterId(clusterId string) ApiBackupServiceListBackupsRequest {
	r.clusterId = &clusterId
	return r
}

// UID of the namespace.
func (r ApiBackupServiceListBackupsRequest) NamespaceId(namespaceId string) ApiBackupServiceListBackupsRequest {
	r.namespaceId = &namespaceId
	return r
}

// UID of the project.
func (r ApiBackupServiceListBackupsRequest) ProjectId(projectId string) ApiBackupServiceListBackupsRequest {
	r.projectId = &projectId
	return r
}

// UID of the backupConfiguration
func (r ApiBackupServiceListBackupsRequest) BackupConfigId(backupConfigId string) ApiBackupServiceListBackupsRequest {
	r.backupConfigId = &backupConfigId
	return r
}

// Page number is the page number to return based on the size
func (r ApiBackupServiceListBackupsRequest) PaginationPageNumber(paginationPageNumber string) ApiBackupServiceListBackupsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiBackupServiceListBackupsRequest) PaginationPageSize(paginationPageSize string) ApiBackupServiceListBackupsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiBackupServiceListBackupsRequest) SortSortBy(sortSortBy string) ApiBackupServiceListBackupsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiBackupServiceListBackupsRequest) SortSortOrder(sortSortOrder string) ApiBackupServiceListBackupsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiBackupServiceListBackupsRequest) Execute() (*V1ListBackupsResponse, *http.Response, error) {
	return r.ApiService.BackupServiceListBackupsExecute(r)
}

/*
BackupServiceListBackups ListBackups API lists the Backup resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBackupServiceListBackupsRequest
*/
func (a *BackupServiceApiService) BackupServiceListBackups(ctx context.Context) ApiBackupServiceListBackupsRequest {
	return ApiBackupServiceListBackupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListBackupsResponse
func (a *BackupServiceApiService) BackupServiceListBackupsExecute(r ApiBackupServiceListBackupsRequest) (*V1ListBackupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListBackupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupServiceApiService.BackupServiceListBackups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		localVarQueryParams.Add("accountId", parameterToString(*r.accountId, ""))
	}
	if r.tenantId != nil {
		localVarQueryParams.Add("tenantId", parameterToString(*r.tenantId, ""))
	}
	if r.clusterId != nil {
		localVarQueryParams.Add("clusterId", parameterToString(*r.clusterId, ""))
	}
	if r.namespaceId != nil {
		localVarQueryParams.Add("namespaceId", parameterToString(*r.namespaceId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.backupConfigId != nil {
		localVarQueryParams.Add("backupConfigId", parameterToString(*r.backupConfigId, ""))
	}
	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	if r.sortSortBy != nil {
		localVarQueryParams.Add("sort.sortBy", parameterToString(*r.sortSortBy, ""))
	}
	if r.sortSortOrder != nil {
		localVarQueryParams.Add("sort.sortOrder", parameterToString(*r.sortSortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
