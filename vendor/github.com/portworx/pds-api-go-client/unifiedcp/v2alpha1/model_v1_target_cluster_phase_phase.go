/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1TargetClusterPhasePhase - PHASE_UNSPECIFIED: Must be set in the proto file; ignore.  - CONNECTED: Represents target cluster is connected to control plane  - DISCONNECTED: Represents target cluster is disconnected from control plane if heartbeat is not received for three consecutive cycles  - FAILED: Represents target cluster failed to setup agent  - DELETING: Represents target cluster deletion in progress
type V1TargetClusterPhasePhase string

// List of v1TargetClusterPhasePhase
const (
	PHASE_UNSPECIFIED V1TargetClusterPhasePhase = "PHASE_UNSPECIFIED"
	CONNECTED V1TargetClusterPhasePhase = "CONNECTED"
	DISCONNECTED V1TargetClusterPhasePhase = "DISCONNECTED"
	FAILED V1TargetClusterPhasePhase = "FAILED"
	DELETING V1TargetClusterPhasePhase = "DELETING"
)

// All allowed values of V1TargetClusterPhasePhase enum
var AllowedV1TargetClusterPhasePhaseEnumValues = []V1TargetClusterPhasePhase{
	"PHASE_UNSPECIFIED",
	"CONNECTED",
	"DISCONNECTED",
	"FAILED",
	"DELETING",
}

func (v *V1TargetClusterPhasePhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1TargetClusterPhasePhase(value)
	for _, existing := range AllowedV1TargetClusterPhasePhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1TargetClusterPhasePhase", value)
}

// NewV1TargetClusterPhasePhaseFromValue returns a pointer to a valid V1TargetClusterPhasePhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1TargetClusterPhasePhaseFromValue(v string) (*V1TargetClusterPhasePhase, error) {
	ev := V1TargetClusterPhasePhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1TargetClusterPhasePhase: valid values are %v", v, AllowedV1TargetClusterPhasePhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1TargetClusterPhasePhase) IsValid() bool {
	for _, existing := range AllowedV1TargetClusterPhasePhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1TargetClusterPhasePhase value
func (v V1TargetClusterPhasePhase) Ptr() *V1TargetClusterPhasePhase {
	return &v
}

type NullableV1TargetClusterPhasePhase struct {
	value *V1TargetClusterPhasePhase
	isSet bool
}

func (v NullableV1TargetClusterPhasePhase) Get() *V1TargetClusterPhasePhase {
	return v.value
}

func (v *NullableV1TargetClusterPhasePhase) Set(val *V1TargetClusterPhasePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TargetClusterPhasePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TargetClusterPhasePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TargetClusterPhasePhase(val *V1TargetClusterPhasePhase) *NullableV1TargetClusterPhasePhase {
	return &NullableV1TargetClusterPhasePhase{value: val, isSet: true}
}

func (v NullableV1TargetClusterPhasePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TargetClusterPhasePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

