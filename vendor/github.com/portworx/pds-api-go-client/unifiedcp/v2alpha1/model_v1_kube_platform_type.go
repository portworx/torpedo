/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1KubePlatformType - TYPE_UNSPECIFIED: Unsepecified  - AWS: Aws platform  - AZURE: Azure platform  - OCP: Openshift cloud platform  - GCP: Google cloud platform  - VSPHERE: VMware vSphere  - UNKNOWN: Unknown platform
type V1KubePlatformType string

// List of v1KubePlatformType
const (
	TYPE_UNSPECIFIED V1KubePlatformType = "TYPE_UNSPECIFIED"
	AWS V1KubePlatformType = "AWS"
	AZURE V1KubePlatformType = "AZURE"
	OCP V1KubePlatformType = "OCP"
	GCP V1KubePlatformType = "GCP"
	VSPHERE V1KubePlatformType = "VSPHERE"
	UNKNOWN V1KubePlatformType = "UNKNOWN"
)

// All allowed values of V1KubePlatformType enum
var AllowedV1KubePlatformTypeEnumValues = []V1KubePlatformType{
	"TYPE_UNSPECIFIED",
	"AWS",
	"AZURE",
	"OCP",
	"GCP",
	"VSPHERE",
	"UNKNOWN",
}

func (v *V1KubePlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1KubePlatformType(value)
	for _, existing := range AllowedV1KubePlatformTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1KubePlatformType", value)
}

// NewV1KubePlatformTypeFromValue returns a pointer to a valid V1KubePlatformType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1KubePlatformTypeFromValue(v string) (*V1KubePlatformType, error) {
	ev := V1KubePlatformType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1KubePlatformType: valid values are %v", v, AllowedV1KubePlatformTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1KubePlatformType) IsValid() bool {
	for _, existing := range AllowedV1KubePlatformTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1KubePlatformType value
func (v V1KubePlatformType) Ptr() *V1KubePlatformType {
	return &v
}

type NullableV1KubePlatformType struct {
	value *V1KubePlatformType
	isSet bool
}

func (v NullableV1KubePlatformType) Get() *V1KubePlatformType {
	return v.value
}

func (v *NullableV1KubePlatformType) Set(val *V1KubePlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1KubePlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1KubePlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1KubePlatformType(val *V1KubePlatformType) *NullableV1KubePlatformType {
	return &NullableV1KubePlatformType{value: val, isSet: true}
}

func (v NullableV1KubePlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1KubePlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

