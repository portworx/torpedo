/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1SearchQueryRequest struct for V1SearchQueryRequest
type V1SearchQueryRequest struct {
	// Id of the dataservice.
	DataServiceId *string `json:"dataServiceId,omitempty"`
	// Query string.
	Query *string `json:"query,omitempty"`
}

// NewV1SearchQueryRequest instantiates a new V1SearchQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SearchQueryRequest() *V1SearchQueryRequest {
	this := V1SearchQueryRequest{}
	return &this
}

// NewV1SearchQueryRequestWithDefaults instantiates a new V1SearchQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SearchQueryRequestWithDefaults() *V1SearchQueryRequest {
	this := V1SearchQueryRequest{}
	return &this
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *V1SearchQueryRequest) GetDataServiceId() string {
	if o == nil || o.DataServiceId == nil {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SearchQueryRequest) GetDataServiceIdOk() (*string, bool) {
	if o == nil || o.DataServiceId == nil {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *V1SearchQueryRequest) HasDataServiceId() bool {
	if o != nil && o.DataServiceId != nil {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *V1SearchQueryRequest) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *V1SearchQueryRequest) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SearchQueryRequest) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *V1SearchQueryRequest) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *V1SearchQueryRequest) SetQuery(v string) {
	o.Query = &v
}

func (o V1SearchQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataServiceId != nil {
		toSerialize["dataServiceId"] = o.DataServiceId
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableV1SearchQueryRequest struct {
	value *V1SearchQueryRequest
	isSet bool
}

func (v NullableV1SearchQueryRequest) Get() *V1SearchQueryRequest {
	return v.value
}

func (v *NullableV1SearchQueryRequest) Set(val *V1SearchQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SearchQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SearchQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SearchQueryRequest(val *V1SearchQueryRequest) *NullableV1SearchQueryRequest {
	return &NullableV1SearchQueryRequest{value: val, isSet: true}
}

func (v NullableV1SearchQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SearchQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


