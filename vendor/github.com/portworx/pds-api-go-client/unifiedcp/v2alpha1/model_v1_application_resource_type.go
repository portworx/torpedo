/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1ApplicationResourceType Type of the resource can be associated to the project.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - PDS_DEPLOYMENT: List of supported PDS application resources. PDS application resource of type deployment.  - PDS_BACKUP: PDS application resource of type backup.  - PDS_RESTORE: PDS application resource of type restore.  - BAAS_BACKUP: List of supported BAAS application resources. BAAS application resource of type backup.
type V1ApplicationResourceType string

// List of v1ApplicationResourceType
const (
	TYPE_UNSPECIFIED V1ApplicationResourceType = "TYPE_UNSPECIFIED"
	PDS_DEPLOYMENT V1ApplicationResourceType = "PDS_DEPLOYMENT"
	PDS_BACKUP V1ApplicationResourceType = "PDS_BACKUP"
	PDS_RESTORE V1ApplicationResourceType = "PDS_RESTORE"
	BAAS_BACKUP V1ApplicationResourceType = "BAAS_BACKUP"
)

// All allowed values of V1ApplicationResourceType enum
var AllowedV1ApplicationResourceTypeEnumValues = []V1ApplicationResourceType{
	"TYPE_UNSPECIFIED",
	"PDS_DEPLOYMENT",
	"PDS_BACKUP",
	"PDS_RESTORE",
	"BAAS_BACKUP",
}

func (v *V1ApplicationResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ApplicationResourceType(value)
	for _, existing := range AllowedV1ApplicationResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ApplicationResourceType", value)
}

// NewV1ApplicationResourceTypeFromValue returns a pointer to a valid V1ApplicationResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ApplicationResourceTypeFromValue(v string) (*V1ApplicationResourceType, error) {
	ev := V1ApplicationResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ApplicationResourceType: valid values are %v", v, AllowedV1ApplicationResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ApplicationResourceType) IsValid() bool {
	for _, existing := range AllowedV1ApplicationResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ApplicationResourceType value
func (v V1ApplicationResourceType) Ptr() *V1ApplicationResourceType {
	return &v
}

type NullableV1ApplicationResourceType struct {
	value *V1ApplicationResourceType
	isSet bool
}

func (v NullableV1ApplicationResourceType) Get() *V1ApplicationResourceType {
	return v.value
}

func (v *NullableV1ApplicationResourceType) Set(val *V1ApplicationResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ApplicationResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ApplicationResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ApplicationResourceType(val *V1ApplicationResourceType) *NullableV1ApplicationResourceType {
	return &NullableV1ApplicationResourceType{value: val, isSet: true}
}

func (v NullableV1ApplicationResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ApplicationResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

