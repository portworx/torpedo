/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// CloudCredentialServiceApiService CloudCredentialServiceApi service
type CloudCredentialServiceApiService service

type ApiCloudCredentialServiceCreateCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceApiService
	tenantId string
	v1CloudCredential *V1CloudCredential
}

// Cloud credential configuration
func (r ApiCloudCredentialServiceCreateCloudCredentialRequest) V1CloudCredential(v1CloudCredential V1CloudCredential) ApiCloudCredentialServiceCreateCloudCredentialRequest {
	r.v1CloudCredential = &v1CloudCredential
	return r
}

func (r ApiCloudCredentialServiceCreateCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceCreateCloudCredentialExecute(r)
}

/*
CloudCredentialServiceCreateCloudCredential Create API creates a set of cloud credentials for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId The parent tenant id under which cloud credential will be created (-- api-linter: core::0133::request-unknown-fields=disabled     aip.dev/not-precedent: We need this field for to support creation of     the resource in the tenant context. --)
 @return ApiCloudCredentialServiceCreateCloudCredentialRequest
*/
func (a *CloudCredentialServiceApiService) CloudCredentialServiceCreateCloudCredential(ctx context.Context, tenantId string) ApiCloudCredentialServiceCreateCloudCredentialRequest {
	return ApiCloudCredentialServiceCreateCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceApiService) CloudCredentialServiceCreateCloudCredentialExecute(r ApiCloudCredentialServiceCreateCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceApiService.CloudCredentialServiceCreateCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/tenants/{tenantId}/cloudCredentials"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterToString(r.tenantId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1CloudCredential == nil {
		return localVarReturnValue, nil, reportError("v1CloudCredential is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1CloudCredential
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceDeleteCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceApiService
	id string
}

func (r ApiCloudCredentialServiceDeleteCloudCredentialRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceDeleteCloudCredentialExecute(r)
}

/*
CloudCredentialServiceDeleteCloudCredential Delete API deletes the cloud credentials

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the cloud credential
 @return ApiCloudCredentialServiceDeleteCloudCredentialRequest
*/
func (a *CloudCredentialServiceApiService) CloudCredentialServiceDeleteCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceDeleteCloudCredentialRequest {
	return ApiCloudCredentialServiceDeleteCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CloudCredentialServiceApiService) CloudCredentialServiceDeleteCloudCredentialExecute(r ApiCloudCredentialServiceDeleteCloudCredentialRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceApiService.CloudCredentialServiceDeleteCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudCredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceGetCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceApiService
	id string
	includeConfig *bool
}

// Specifies option to include configuration details excluding sensitive information
func (r ApiCloudCredentialServiceGetCloudCredentialRequest) IncludeConfig(includeConfig bool) ApiCloudCredentialServiceGetCloudCredentialRequest {
	r.includeConfig = &includeConfig
	return r
}

func (r ApiCloudCredentialServiceGetCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceGetCloudCredentialExecute(r)
}

/*
CloudCredentialServiceGetCloudCredential Get API returns the cloud credential details sans the actual credentials

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the cloud credential
 @return ApiCloudCredentialServiceGetCloudCredentialRequest
*/
func (a *CloudCredentialServiceApiService) CloudCredentialServiceGetCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceGetCloudCredentialRequest {
	return ApiCloudCredentialServiceGetCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceApiService) CloudCredentialServiceGetCloudCredentialExecute(r ApiCloudCredentialServiceGetCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceApiService.CloudCredentialServiceGetCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudcredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeConfig != nil {
		localVarQueryParams.Add("includeConfig", parameterToString(*r.includeConfig, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceListCloudCredentialsRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceApiService
	tenantId *string
	projectId *string
	paginationPageNumber *string
	paginationPageSize *string
}

// Tenant ID for which the credentials will be listed
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) TenantId(tenantId string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.tenantId = &tenantId
	return r
}

// Project ID for which the credentials will be listed
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) ProjectId(projectId string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.projectId = &projectId
	return r
}

// Page number is the page number to return based on the size
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) PaginationPageNumber(paginationPageNumber string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) PaginationPageSize(paginationPageSize string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiCloudCredentialServiceListCloudCredentialsRequest) Execute() (*V1ListCloudCredentialsResponse, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceListCloudCredentialsExecute(r)
}

/*
CloudCredentialServiceListCloudCredentials List API lists all the cloud credentials for a tenant or project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCredentialServiceListCloudCredentialsRequest
*/
func (a *CloudCredentialServiceApiService) CloudCredentialServiceListCloudCredentials(ctx context.Context) ApiCloudCredentialServiceListCloudCredentialsRequest {
	return ApiCloudCredentialServiceListCloudCredentialsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListCloudCredentialsResponse
func (a *CloudCredentialServiceApiService) CloudCredentialServiceListCloudCredentialsExecute(r ApiCloudCredentialServiceListCloudCredentialsRequest) (*V1ListCloudCredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListCloudCredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceApiService.CloudCredentialServiceListCloudCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudCredentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		localVarQueryParams.Add("tenantId", parameterToString(*r.tenantId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceUpdateCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceApiService
	id string
	v1CloudCredential *V1CloudCredential
	updateMask *string
}

// Desired cloud credential configuration
func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) V1CloudCredential(v1CloudCredential V1CloudCredential) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	r.v1CloudCredential = &v1CloudCredential
	return r
}

// Specifies the field that should be updated to the value specified in cloud_credentials
func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) UpdateMask(updateMask string) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	r.updateMask = &updateMask
	return r
}

func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceUpdateCloudCredentialExecute(r)
}

/*
CloudCredentialServiceUpdateCloudCredential Update API updates a cloud credential

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id of the cloud credential to be updated
 @return ApiCloudCredentialServiceUpdateCloudCredentialRequest
*/
func (a *CloudCredentialServiceApiService) CloudCredentialServiceUpdateCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	return ApiCloudCredentialServiceUpdateCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceApiService) CloudCredentialServiceUpdateCloudCredentialExecute(r ApiCloudCredentialServiceUpdateCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceApiService.CloudCredentialServiceUpdateCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cloudCredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1CloudCredential == nil {
		return localVarReturnValue, nil, reportError("v1CloudCredential is required and must be specified")
	}

	if r.updateMask != nil {
		localVarQueryParams.Add("updateMask", parameterToString(*r.updateMask, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1CloudCredential
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
