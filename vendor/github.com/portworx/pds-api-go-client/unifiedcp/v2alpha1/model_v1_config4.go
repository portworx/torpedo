/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1Config4 struct for V1Config4
type V1Config4 struct {
	UserEmail *string `json:"userEmail,omitempty"`
	DnsName *string `json:"dnsName,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
}

// NewV1Config4 instantiates a new V1Config4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config4() *V1Config4 {
	this := V1Config4{}
	return &this
}

// NewV1Config4WithDefaults instantiates a new V1Config4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1Config4WithDefaults() *V1Config4 {
	this := V1Config4{}
	return &this
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *V1Config4) GetUserEmail() string {
	if o == nil || o.UserEmail == nil {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config4) GetUserEmailOk() (*string, bool) {
	if o == nil || o.UserEmail == nil {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *V1Config4) HasUserEmail() bool {
	if o != nil && o.UserEmail != nil {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *V1Config4) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *V1Config4) GetDnsName() string {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config4) GetDnsNameOk() (*string, bool) {
	if o == nil || o.DnsName == nil {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *V1Config4) HasDnsName() bool {
	if o != nil && o.DnsName != nil {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *V1Config4) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *V1Config4) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config4) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *V1Config4) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *V1Config4) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o V1Config4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserEmail != nil {
		toSerialize["userEmail"] = o.UserEmail
	}
	if o.DnsName != nil {
		toSerialize["dnsName"] = o.DnsName
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableV1Config4 struct {
	value *V1Config4
	isSet bool
}

func (v NullableV1Config4) Get() *V1Config4 {
	return v.value
}

func (v *NullableV1Config4) Set(val *V1Config4) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config4) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config4(val *V1Config4) *NullableV1Config4 {
	return &NullableV1Config4{value: val, isSet: true}
}

func (v NullableV1Config4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


