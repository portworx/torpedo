/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConfigBackupLevel Enum for Backup Level of the backup configuration.   - BACKUP_LEVEL_UNSPECIFIED: Unspecified level.  - SNAPSHOT: Snapshot.  - INCREMENTAL: Incremental.
type ConfigBackupLevel string

// List of ConfigBackupLevel
const (
	BACKUP_LEVEL_UNSPECIFIED ConfigBackupLevel = "BACKUP_LEVEL_UNSPECIFIED"
	SNAPSHOT ConfigBackupLevel = "SNAPSHOT"
	INCREMENTAL ConfigBackupLevel = "INCREMENTAL"
)

// All allowed values of ConfigBackupLevel enum
var AllowedConfigBackupLevelEnumValues = []ConfigBackupLevel{
	"BACKUP_LEVEL_UNSPECIFIED",
	"SNAPSHOT",
	"INCREMENTAL",
}

func (v *ConfigBackupLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigBackupLevel(value)
	for _, existing := range AllowedConfigBackupLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigBackupLevel", value)
}

// NewConfigBackupLevelFromValue returns a pointer to a valid ConfigBackupLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigBackupLevelFromValue(v string) (*ConfigBackupLevel, error) {
	ev := ConfigBackupLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigBackupLevel: valid values are %v", v, AllowedConfigBackupLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigBackupLevel) IsValid() bool {
	for _, existing := range AllowedConfigBackupLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigBackupLevel value
func (v ConfigBackupLevel) Ptr() *ConfigBackupLevel {
	return &v
}

type NullableConfigBackupLevel struct {
	value *ConfigBackupLevel
	isSet bool
}

func (v NullableConfigBackupLevel) Get() *ConfigBackupLevel {
	return v.value
}

func (v *NullableConfigBackupLevel) Set(val *ConfigBackupLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigBackupLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigBackupLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigBackupLevel(val *ConfigBackupLevel) *NullableConfigBackupLevel {
	return &NullableConfigBackupLevel{value: val, isSet: true}
}

func (v NullableConfigBackupLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigBackupLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

