/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1PhaseType Type of phase the project is in currently should be one of the below.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - ACTIVE: The project is in use and active.  - DELETE_PENDING: Deletion of project has not started.  - DELETE_IN_PROGRESS: Deletion of the project is scheduled and in progress.
type V1PhaseType string

// List of v1PhaseType
const (
	TYPE_UNSPECIFIED V1PhaseType = "TYPE_UNSPECIFIED"
	ACTIVE V1PhaseType = "ACTIVE"
	DELETE_PENDING V1PhaseType = "DELETE_PENDING"
	DELETE_IN_PROGRESS V1PhaseType = "DELETE_IN_PROGRESS"
)

// All allowed values of V1PhaseType enum
var AllowedV1PhaseTypeEnumValues = []V1PhaseType{
	"TYPE_UNSPECIFIED",
	"ACTIVE",
	"DELETE_PENDING",
	"DELETE_IN_PROGRESS",
}

func (v *V1PhaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1PhaseType(value)
	for _, existing := range AllowedV1PhaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1PhaseType", value)
}

// NewV1PhaseTypeFromValue returns a pointer to a valid V1PhaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1PhaseTypeFromValue(v string) (*V1PhaseType, error) {
	ev := V1PhaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1PhaseType: valid values are %v", v, AllowedV1PhaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1PhaseType) IsValid() bool {
	for _, existing := range AllowedV1PhaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1PhaseType value
func (v V1PhaseType) Ptr() *V1PhaseType {
	return &v
}

type NullableV1PhaseType struct {
	value *V1PhaseType
	isSet bool
}

func (v NullableV1PhaseType) Get() *V1PhaseType {
	return v.value
}

func (v *NullableV1PhaseType) Set(val *V1PhaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PhaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PhaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PhaseType(val *V1PhaseType) *NullableV1PhaseType {
	return &NullableV1PhaseType{value: val, isSet: true}
}

func (v NullableV1PhaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PhaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

