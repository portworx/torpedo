/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1Phase Enum for phase of the restore.   - PHASE_UNSPECIFIED: Phase is unspecified.  - INITIALIZING: Restore is initializing.  - PENDING: Restore has not yet started.  - RESTORING_CLOUDSNAP: Waiting for the cloud snap restore to complete.  - RESTORING_DATA_SERVICE_CR: PV and PVC resources are ready and we're waiting to get the data service manifest from the backup.  - RESTORING_DEPLOYMENT: New data service has been created and we're waiting for the restore process to complete.  - DEPLOYMENT_ENTERING_NORMAL_MODE: Restore process in data service has succeeded and we're waiting until it becomes healthy in normal mode.  - SUCCESSFUL: Restore successful.  - FAILED: Restore failed.
type V1Phase string

// List of v1Phase
const (
	PHASE_UNSPECIFIED V1Phase = "PHASE_UNSPECIFIED"
	INITIALIZING V1Phase = "INITIALIZING"
	PENDING V1Phase = "PENDING"
	RESTORING_CLOUDSNAP V1Phase = "RESTORING_CLOUDSNAP"
	RESTORING_DATA_SERVICE_CR V1Phase = "RESTORING_DATA_SERVICE_CR"
	RESTORING_DEPLOYMENT V1Phase = "RESTORING_DEPLOYMENT"
	DEPLOYMENT_ENTERING_NORMAL_MODE V1Phase = "DEPLOYMENT_ENTERING_NORMAL_MODE"
	SUCCESSFUL V1Phase = "SUCCESSFUL"
	FAILED V1Phase = "FAILED"
)

// All allowed values of V1Phase enum
var AllowedV1PhaseEnumValues = []V1Phase{
	"PHASE_UNSPECIFIED",
	"INITIALIZING",
	"PENDING",
	"RESTORING_CLOUDSNAP",
	"RESTORING_DATA_SERVICE_CR",
	"RESTORING_DEPLOYMENT",
	"DEPLOYMENT_ENTERING_NORMAL_MODE",
	"SUCCESSFUL",
	"FAILED",
}

func (v *V1Phase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1Phase(value)
	for _, existing := range AllowedV1PhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1Phase", value)
}

// NewV1PhaseFromValue returns a pointer to a valid V1Phase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1PhaseFromValue(v string) (*V1Phase, error) {
	ev := V1Phase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1Phase: valid values are %v", v, AllowedV1PhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1Phase) IsValid() bool {
	for _, existing := range AllowedV1PhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1Phase value
func (v V1Phase) Ptr() *V1Phase {
	return &v
}

type NullableV1Phase struct {
	value *V1Phase
	isSet bool
}

func (v NullableV1Phase) Get() *V1Phase {
	return v.value
}

func (v *NullableV1Phase) Set(val *V1Phase) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Phase) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Phase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Phase(val *V1Phase) *NullableV1Phase {
	return &NullableV1Phase{value: val, isSet: true}
}

func (v NullableV1Phase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Phase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

