/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// BackupConfigServiceApiService BackupConfigServiceApi service
type BackupConfigServiceApiService service

type ApiBackupConfigServiceCreateBackupConfigRequest struct {
	ctx context.Context
	ApiService *BackupConfigServiceApiService
	projectId string
	deploymentId *string
	v1BackupConfig *V1BackupConfig
}

// (-- api-linter: core::0133::request-unknown-fields&#x3D;disabled     aip.dev/not-precedent: We really need this field to be required     to support creation of the resource in the deployment context.. --) (-- api-linter: core::0133::request-required-fields&#x3D;disabled     aip.dev/not-precedent: We really need this field to be required     to support creation of the resource in the deployment context.. --) Deployment id associated with the backup configuration.
func (r ApiBackupConfigServiceCreateBackupConfigRequest) DeploymentId(deploymentId string) ApiBackupConfigServiceCreateBackupConfigRequest {
	r.deploymentId = &deploymentId
	return r
}

// Backup configuration for the backup.
func (r ApiBackupConfigServiceCreateBackupConfigRequest) V1BackupConfig(v1BackupConfig V1BackupConfig) ApiBackupConfigServiceCreateBackupConfigRequest {
	r.v1BackupConfig = &v1BackupConfig
	return r
}

func (r ApiBackupConfigServiceCreateBackupConfigRequest) Execute() (*V1BackupConfig, *http.Response, error) {
	return r.ApiService.BackupConfigServiceCreateBackupConfigExecute(r)
}

/*
BackupConfigServiceCreateBackupConfig CreateBackupConfig API creates the backup configuration of the backup.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId (-- api-linter: core::0133::request-required-fields=disabled     aip.dev/not-precedent: We really need this field to be required to support creation of     the resource in the project context. --) (-- api-linter: core::0133::request-unknown-fields=disabled     aip.dev/not-precedent: We really need this field to be required to support creation of     the resource in the project context. --) The parent project id under which backup configuration will be created.
 @return ApiBackupConfigServiceCreateBackupConfigRequest
*/
func (a *BackupConfigServiceApiService) BackupConfigServiceCreateBackupConfig(ctx context.Context, projectId string) ApiBackupConfigServiceCreateBackupConfigRequest {
	return ApiBackupConfigServiceCreateBackupConfigRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return V1BackupConfig
func (a *BackupConfigServiceApiService) BackupConfigServiceCreateBackupConfigExecute(r ApiBackupConfigServiceCreateBackupConfigRequest) (*V1BackupConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupConfigServiceApiService.BackupConfigServiceCreateBackupConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/projects/{projectId}/backupConfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deploymentId == nil {
		return localVarReturnValue, nil, reportError("deploymentId is required and must be specified")
	}
	if r.v1BackupConfig == nil {
		return localVarReturnValue, nil, reportError("v1BackupConfig is required and must be specified")
	}

	localVarQueryParams.Add("deploymentId", parameterToString(*r.deploymentId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1BackupConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupConfigServiceDeleteBackupConfigRequest struct {
	ctx context.Context
	ApiService *BackupConfigServiceApiService
	id string
}

func (r ApiBackupConfigServiceDeleteBackupConfigRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BackupConfigServiceDeleteBackupConfigExecute(r)
}

/*
BackupConfigServiceDeleteBackupConfig DeleteBackupConfig API deletes the backup configuration.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the backup configuration.
 @return ApiBackupConfigServiceDeleteBackupConfigRequest
*/
func (a *BackupConfigServiceApiService) BackupConfigServiceDeleteBackupConfig(ctx context.Context, id string) ApiBackupConfigServiceDeleteBackupConfigRequest {
	return ApiBackupConfigServiceDeleteBackupConfigRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BackupConfigServiceApiService) BackupConfigServiceDeleteBackupConfigExecute(r ApiBackupConfigServiceDeleteBackupConfigRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupConfigServiceApiService.BackupConfigServiceDeleteBackupConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backupConfigs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupConfigServiceGetBackupConfigRequest struct {
	ctx context.Context
	ApiService *BackupConfigServiceApiService
	id string
}

func (r ApiBackupConfigServiceGetBackupConfigRequest) Execute() (*V1BackupConfig, *http.Response, error) {
	return r.ApiService.BackupConfigServiceGetBackupConfigExecute(r)
}

/*
BackupConfigServiceGetBackupConfig GetBackupConfig API returns the the backup configuration resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the backup configuration.
 @return ApiBackupConfigServiceGetBackupConfigRequest
*/
func (a *BackupConfigServiceApiService) BackupConfigServiceGetBackupConfig(ctx context.Context, id string) ApiBackupConfigServiceGetBackupConfigRequest {
	return ApiBackupConfigServiceGetBackupConfigRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1BackupConfig
func (a *BackupConfigServiceApiService) BackupConfigServiceGetBackupConfigExecute(r ApiBackupConfigServiceGetBackupConfigRequest) (*V1BackupConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupConfigServiceApiService.BackupConfigServiceGetBackupConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backupConfigs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupConfigServiceListBackupConfigsRequest struct {
	ctx context.Context
	ApiService *BackupConfigServiceApiService
	accountId *string
	tenantId *string
	projectId *string
	targetClusterId *string
	namespaceId *string
	deploymentId *string
	paginationPageNumber *string
	paginationPageSize *string
	sortSortBy *string
	sortSortOrder *string
}

// Account ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) AccountId(accountId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.accountId = &accountId
	return r
}

// Tenant ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) TenantId(tenantId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.tenantId = &tenantId
	return r
}

// Project ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) ProjectId(projectId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.projectId = &projectId
	return r
}

// Cluster ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) TargetClusterId(targetClusterId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.targetClusterId = &targetClusterId
	return r
}

// Namespace ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) NamespaceId(namespaceId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.namespaceId = &namespaceId
	return r
}

// Deployment ID for which the backup configurations will be listed.
func (r ApiBackupConfigServiceListBackupConfigsRequest) DeploymentId(deploymentId string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.deploymentId = &deploymentId
	return r
}

// Page number is the page number to return based on the size
func (r ApiBackupConfigServiceListBackupConfigsRequest) PaginationPageNumber(paginationPageNumber string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiBackupConfigServiceListBackupConfigsRequest) PaginationPageSize(paginationPageSize string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiBackupConfigServiceListBackupConfigsRequest) SortSortBy(sortSortBy string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiBackupConfigServiceListBackupConfigsRequest) SortSortOrder(sortSortOrder string) ApiBackupConfigServiceListBackupConfigsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiBackupConfigServiceListBackupConfigsRequest) Execute() (*V1ListBackupConfigsResponse, *http.Response, error) {
	return r.ApiService.BackupConfigServiceListBackupConfigsExecute(r)
}

/*
BackupConfigServiceListBackupConfigs ListBackupConfigs API lists all the backup configuration for a deployment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBackupConfigServiceListBackupConfigsRequest
*/
func (a *BackupConfigServiceApiService) BackupConfigServiceListBackupConfigs(ctx context.Context) ApiBackupConfigServiceListBackupConfigsRequest {
	return ApiBackupConfigServiceListBackupConfigsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListBackupConfigsResponse
func (a *BackupConfigServiceApiService) BackupConfigServiceListBackupConfigsExecute(r ApiBackupConfigServiceListBackupConfigsRequest) (*V1ListBackupConfigsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListBackupConfigsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupConfigServiceApiService.BackupConfigServiceListBackupConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backupConfigs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		localVarQueryParams.Add("accountId", parameterToString(*r.accountId, ""))
	}
	if r.tenantId != nil {
		localVarQueryParams.Add("tenantId", parameterToString(*r.tenantId, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.targetClusterId != nil {
		localVarQueryParams.Add("targetClusterId", parameterToString(*r.targetClusterId, ""))
	}
	if r.namespaceId != nil {
		localVarQueryParams.Add("namespaceId", parameterToString(*r.namespaceId, ""))
	}
	if r.deploymentId != nil {
		localVarQueryParams.Add("deploymentId", parameterToString(*r.deploymentId, ""))
	}
	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	if r.sortSortBy != nil {
		localVarQueryParams.Add("sort.sortBy", parameterToString(*r.sortSortBy, ""))
	}
	if r.sortSortOrder != nil {
		localVarQueryParams.Add("sort.sortOrder", parameterToString(*r.sortSortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupConfigServiceUpdateBackupConfigRequest struct {
	ctx context.Context
	ApiService *BackupConfigServiceApiService
	backupConfigMetaUid string
	desiredBackupConfiguration *DesiredBackupConfiguration
}

// Desired backup configuration.
func (r ApiBackupConfigServiceUpdateBackupConfigRequest) DesiredBackupConfiguration(desiredBackupConfiguration DesiredBackupConfiguration) ApiBackupConfigServiceUpdateBackupConfigRequest {
	r.desiredBackupConfiguration = &desiredBackupConfiguration
	return r
}

func (r ApiBackupConfigServiceUpdateBackupConfigRequest) Execute() (*V1BackupConfig, *http.Response, error) {
	return r.ApiService.BackupConfigServiceUpdateBackupConfigExecute(r)
}

/*
BackupConfigServiceUpdateBackupConfig UpdateBackupConfig API updates the backup configuration of the backup.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param backupConfigMetaUid UID of the resource of the format <resource prefix>-<uuid>.
 @return ApiBackupConfigServiceUpdateBackupConfigRequest
*/
func (a *BackupConfigServiceApiService) BackupConfigServiceUpdateBackupConfig(ctx context.Context, backupConfigMetaUid string) ApiBackupConfigServiceUpdateBackupConfigRequest {
	return ApiBackupConfigServiceUpdateBackupConfigRequest{
		ApiService: a,
		ctx: ctx,
		backupConfigMetaUid: backupConfigMetaUid,
	}
}

// Execute executes the request
//  @return V1BackupConfig
func (a *BackupConfigServiceApiService) BackupConfigServiceUpdateBackupConfigExecute(r ApiBackupConfigServiceUpdateBackupConfigRequest) (*V1BackupConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupConfigServiceApiService.BackupConfigServiceUpdateBackupConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/backupConfigs/{backupConfig.meta.uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"backupConfig.meta.uid"+"}", url.PathEscape(parameterToString(r.backupConfigMetaUid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.desiredBackupConfiguration == nil {
		return localVarReturnValue, nil, reportError("desiredBackupConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.desiredBackupConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
