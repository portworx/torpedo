/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DeploymentEventServiceApiService DeploymentEventServiceApi service
type DeploymentEventServiceApiService service

type ApiDeploymentEventServiceListDeploymentEventsRequest struct {
	ctx context.Context
	ApiService *DeploymentEventServiceApiService
	deploymentId string
	paginationPageNumber *string
	paginationPageSize *string
	sortSortBy *string
	sortSortOrder *string
}

// Page number is the page number to return based on the size
func (r ApiDeploymentEventServiceListDeploymentEventsRequest) PaginationPageNumber(paginationPageNumber string) ApiDeploymentEventServiceListDeploymentEventsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page
func (r ApiDeploymentEventServiceListDeploymentEventsRequest) PaginationPageSize(paginationPageSize string) ApiDeploymentEventServiceListDeploymentEventsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiDeploymentEventServiceListDeploymentEventsRequest) SortSortBy(sortSortBy string) ApiDeploymentEventServiceListDeploymentEventsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiDeploymentEventServiceListDeploymentEventsRequest) SortSortOrder(sortSortOrder string) ApiDeploymentEventServiceListDeploymentEventsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiDeploymentEventServiceListDeploymentEventsRequest) Execute() (*V1ListDeploymentEventsResponse, *http.Response, error) {
	return r.ApiService.DeploymentEventServiceListDeploymentEventsExecute(r)
}

/*
DeploymentEventServiceListDeploymentEvents ListDeploymentEvents API returns the list of kubernetes events related to a deployment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deploymentId Deployment id for which events need to be listed.
 @return ApiDeploymentEventServiceListDeploymentEventsRequest
*/
func (a *DeploymentEventServiceApiService) DeploymentEventServiceListDeploymentEvents(ctx context.Context, deploymentId string) ApiDeploymentEventServiceListDeploymentEventsRequest {
	return ApiDeploymentEventServiceListDeploymentEventsRequest{
		ApiService: a,
		ctx: ctx,
		deploymentId: deploymentId,
	}
}

// Execute executes the request
//  @return V1ListDeploymentEventsResponse
func (a *DeploymentEventServiceApiService) DeploymentEventServiceListDeploymentEventsExecute(r ApiDeploymentEventServiceListDeploymentEventsRequest) (*V1ListDeploymentEventsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListDeploymentEventsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentEventServiceApiService.DeploymentEventServiceListDeploymentEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/deployments/{deploymentId}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"deploymentId"+"}", url.PathEscape(parameterToString(r.deploymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.paginationPageNumber != nil {
		localVarQueryParams.Add("pagination.pageNumber", parameterToString(*r.paginationPageNumber, ""))
	}
	if r.paginationPageSize != nil {
		localVarQueryParams.Add("pagination.pageSize", parameterToString(*r.paginationPageSize, ""))
	}
	if r.sortSortBy != nil {
		localVarQueryParams.Add("sort.sortBy", parameterToString(*r.sortSortBy, ""))
	}
	if r.sortSortOrder != nil {
		localVarQueryParams.Add("sort.sortOrder", parameterToString(*r.sortSortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
