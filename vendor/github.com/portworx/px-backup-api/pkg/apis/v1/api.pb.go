// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/v1/api.proto

package api

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClusterInfo_StatusInfo_Status int32

const (
	ClusterInfo_StatusInfo_Invalid       ClusterInfo_StatusInfo_Status = 0
	ClusterInfo_StatusInfo_Online        ClusterInfo_StatusInfo_Status = 1
	ClusterInfo_StatusInfo_Offline       ClusterInfo_StatusInfo_Status = 2
	ClusterInfo_StatusInfo_DeletePending ClusterInfo_StatusInfo_Status = 3
)

var ClusterInfo_StatusInfo_Status_name = map[int32]string{
	0: "Invalid",
	1: "Online",
	2: "Offline",
	3: "DeletePending",
}

var ClusterInfo_StatusInfo_Status_value = map[string]int32{
	"Invalid":       0,
	"Online":        1,
	"Offline":       2,
	"DeletePending": 3,
}

func (x ClusterInfo_StatusInfo_Status) String() string {
	return proto.EnumName(ClusterInfo_StatusInfo_Status_name, int32(x))
}

func (ClusterInfo_StatusInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{1, 0, 0}
}

type CloudCredentialInfo_Type int32

const (
	CloudCredentialInfo_Invalid CloudCredentialInfo_Type = 0
	CloudCredentialInfo_AWS     CloudCredentialInfo_Type = 1
	CloudCredentialInfo_Azure   CloudCredentialInfo_Type = 2
	CloudCredentialInfo_Google  CloudCredentialInfo_Type = 3
)

var CloudCredentialInfo_Type_name = map[int32]string{
	0: "Invalid",
	1: "AWS",
	2: "Azure",
	3: "Google",
}

var CloudCredentialInfo_Type_value = map[string]int32{
	"Invalid": 0,
	"AWS":     1,
	"Azure":   2,
	"Google":  3,
}

func (x CloudCredentialInfo_Type) String() string {
	return proto.EnumName(CloudCredentialInfo_Type_name, int32(x))
}

func (CloudCredentialInfo_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{8, 0}
}

type BackupScheduleInfo_ReclaimPolicyType int32

const (
	BackupScheduleInfo_Invalid BackupScheduleInfo_ReclaimPolicyType = 0
	BackupScheduleInfo_Delete  BackupScheduleInfo_ReclaimPolicyType = 1
	BackupScheduleInfo_Retain  BackupScheduleInfo_ReclaimPolicyType = 2
)

var BackupScheduleInfo_ReclaimPolicyType_name = map[int32]string{
	0: "Invalid",
	1: "Delete",
	2: "Retain",
}

var BackupScheduleInfo_ReclaimPolicyType_value = map[string]int32{
	"Invalid": 0,
	"Delete":  1,
	"Retain":  2,
}

func (x BackupScheduleInfo_ReclaimPolicyType) String() string {
	return proto.EnumName(BackupScheduleInfo_ReclaimPolicyType_name, int32(x))
}

func (BackupScheduleInfo_ReclaimPolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 0}
}

type BackupScheduleInfo_SuspendedBy_Source int32

const (
	BackupScheduleInfo_SuspendedBy_Invalid      BackupScheduleInfo_SuspendedBy_Source = 0
	BackupScheduleInfo_SuspendedBy_User         BackupScheduleInfo_SuspendedBy_Source = 1
	BackupScheduleInfo_SuspendedBy_LicenseCheck BackupScheduleInfo_SuspendedBy_Source = 2
)

var BackupScheduleInfo_SuspendedBy_Source_name = map[int32]string{
	0: "Invalid",
	1: "User",
	2: "LicenseCheck",
}

var BackupScheduleInfo_SuspendedBy_Source_value = map[string]int32{
	"Invalid":      0,
	"User":         1,
	"LicenseCheck": 2,
}

func (x BackupScheduleInfo_SuspendedBy_Source) String() string {
	return proto.EnumName(BackupScheduleInfo_SuspendedBy_Source_name, int32(x))
}

func (BackupScheduleInfo_SuspendedBy_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 2, 0}
}

type BackupScheduleInfo_StatusInfo_Status int32

const (
	BackupScheduleInfo_StatusInfo_Invalid        BackupScheduleInfo_StatusInfo_Status = 0
	BackupScheduleInfo_StatusInfo_Pending        BackupScheduleInfo_StatusInfo_Status = 1
	BackupScheduleInfo_StatusInfo_InProgress     BackupScheduleInfo_StatusInfo_Status = 2
	BackupScheduleInfo_StatusInfo_Aborted        BackupScheduleInfo_StatusInfo_Status = 3
	BackupScheduleInfo_StatusInfo_Failed         BackupScheduleInfo_StatusInfo_Status = 4
	BackupScheduleInfo_StatusInfo_Deleting       BackupScheduleInfo_StatusInfo_Status = 5
	BackupScheduleInfo_StatusInfo_Success        BackupScheduleInfo_StatusInfo_Status = 6
	BackupScheduleInfo_StatusInfo_Captured       BackupScheduleInfo_StatusInfo_Status = 7
	BackupScheduleInfo_StatusInfo_PartialSuccess BackupScheduleInfo_StatusInfo_Status = 8
	BackupScheduleInfo_StatusInfo_DeletePending  BackupScheduleInfo_StatusInfo_Status = 9
)

var BackupScheduleInfo_StatusInfo_Status_name = map[int32]string{
	0: "Invalid",
	1: "Pending",
	2: "InProgress",
	3: "Aborted",
	4: "Failed",
	5: "Deleting",
	6: "Success",
	7: "Captured",
	8: "PartialSuccess",
	9: "DeletePending",
}

var BackupScheduleInfo_StatusInfo_Status_value = map[string]int32{
	"Invalid":        0,
	"Pending":        1,
	"InProgress":     2,
	"Aborted":        3,
	"Failed":         4,
	"Deleting":       5,
	"Success":        6,
	"Captured":       7,
	"PartialSuccess": 8,
	"DeletePending":  9,
}

func (x BackupScheduleInfo_StatusInfo_Status) String() string {
	return proto.EnumName(BackupScheduleInfo_StatusInfo_Status_name, int32(x))
}

func (BackupScheduleInfo_StatusInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 4, 0}
}

type BackupLocationInfo_Type int32

const (
	BackupLocationInfo_Invalid BackupLocationInfo_Type = 0
	BackupLocationInfo_S3      BackupLocationInfo_Type = 1
	BackupLocationInfo_Azure   BackupLocationInfo_Type = 2
	BackupLocationInfo_Google  BackupLocationInfo_Type = 3
)

var BackupLocationInfo_Type_name = map[int32]string{
	0: "Invalid",
	1: "S3",
	2: "Azure",
	3: "Google",
}

var BackupLocationInfo_Type_value = map[string]int32{
	"Invalid": 0,
	"S3":      1,
	"Azure":   2,
	"Google":  3,
}

func (x BackupLocationInfo_Type) String() string {
	return proto.EnumName(BackupLocationInfo_Type_name, int32(x))
}

func (BackupLocationInfo_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{14, 0}
}

type BackupLocationInfo_StatusInfo_Status int32

const (
	BackupLocationInfo_StatusInfo_Invalid       BackupLocationInfo_StatusInfo_Status = 0
	BackupLocationInfo_StatusInfo_Valid         BackupLocationInfo_StatusInfo_Status = 1
	BackupLocationInfo_StatusInfo_DeletePending BackupLocationInfo_StatusInfo_Status = 2
)

var BackupLocationInfo_StatusInfo_Status_name = map[int32]string{
	0: "Invalid",
	1: "Valid",
	2: "DeletePending",
}

var BackupLocationInfo_StatusInfo_Status_value = map[string]int32{
	"Invalid":       0,
	"Valid":         1,
	"DeletePending": 2,
}

func (x BackupLocationInfo_StatusInfo_Status) String() string {
	return proto.EnumName(BackupLocationInfo_StatusInfo_Status_name, int32(x))
}

func (BackupLocationInfo_StatusInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{14, 0, 0}
}

type BackupInfo_Stage int32

const (
	BackupInfo_Invalid      BackupInfo_Stage = 0
	BackupInfo_Initial      BackupInfo_Stage = 1
	BackupInfo_PreExecRule  BackupInfo_Stage = 2
	BackupInfo_PostExecRule BackupInfo_Stage = 3
	BackupInfo_Volumes      BackupInfo_Stage = 4
	BackupInfo_Applications BackupInfo_Stage = 5
	BackupInfo_Final        BackupInfo_Stage = 6
)

var BackupInfo_Stage_name = map[int32]string{
	0: "Invalid",
	1: "Initial",
	2: "PreExecRule",
	3: "PostExecRule",
	4: "Volumes",
	5: "Applications",
	6: "Final",
}

var BackupInfo_Stage_value = map[string]int32{
	"Invalid":      0,
	"Initial":      1,
	"PreExecRule":  2,
	"PostExecRule": 3,
	"Volumes":      4,
	"Applications": 5,
	"Final":        6,
}

func (x BackupInfo_Stage) String() string {
	return proto.EnumName(BackupInfo_Stage_name, int32(x))
}

func (BackupInfo_Stage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17, 0}
}

type BackupInfo_StatusInfo_Status int32

const (
	BackupInfo_StatusInfo_Invalid            BackupInfo_StatusInfo_Status = 0
	BackupInfo_StatusInfo_Pending            BackupInfo_StatusInfo_Status = 1
	BackupInfo_StatusInfo_InProgress         BackupInfo_StatusInfo_Status = 2
	BackupInfo_StatusInfo_Aborted            BackupInfo_StatusInfo_Status = 3
	BackupInfo_StatusInfo_Failed             BackupInfo_StatusInfo_Status = 4
	BackupInfo_StatusInfo_Deleting           BackupInfo_StatusInfo_Status = 5
	BackupInfo_StatusInfo_Success            BackupInfo_StatusInfo_Status = 6
	BackupInfo_StatusInfo_Captured           BackupInfo_StatusInfo_Status = 7
	BackupInfo_StatusInfo_PartialSuccess     BackupInfo_StatusInfo_Status = 8
	BackupInfo_StatusInfo_DeletePending      BackupInfo_StatusInfo_Status = 9
	BackupInfo_StatusInfo_CloudBackupMissing BackupInfo_StatusInfo_Status = 10
)

var BackupInfo_StatusInfo_Status_name = map[int32]string{
	0:  "Invalid",
	1:  "Pending",
	2:  "InProgress",
	3:  "Aborted",
	4:  "Failed",
	5:  "Deleting",
	6:  "Success",
	7:  "Captured",
	8:  "PartialSuccess",
	9:  "DeletePending",
	10: "CloudBackupMissing",
}

var BackupInfo_StatusInfo_Status_value = map[string]int32{
	"Invalid":            0,
	"Pending":            1,
	"InProgress":         2,
	"Aborted":            3,
	"Failed":             4,
	"Deleting":           5,
	"Success":            6,
	"Captured":           7,
	"PartialSuccess":     8,
	"DeletePending":      9,
	"CloudBackupMissing": 10,
}

func (x BackupInfo_StatusInfo_Status) String() string {
	return proto.EnumName(BackupInfo_StatusInfo_Status_name, int32(x))
}

func (BackupInfo_StatusInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17, 3, 0}
}

type ReplacePolicy_Type int32

const (
	ReplacePolicy_Invalid ReplacePolicy_Type = 0
	ReplacePolicy_Retain  ReplacePolicy_Type = 1
	ReplacePolicy_Delete  ReplacePolicy_Type = 2
)

var ReplacePolicy_Type_name = map[int32]string{
	0: "Invalid",
	1: "Retain",
	2: "Delete",
}

var ReplacePolicy_Type_value = map[string]int32{
	"Invalid": 0,
	"Retain":  1,
	"Delete":  2,
}

func (x ReplacePolicy_Type) String() string {
	return proto.EnumName(ReplacePolicy_Type_name, int32(x))
}

func (ReplacePolicy_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{21, 0}
}

type RestoreInfo_StatusInfo_Status int32

const (
	RestoreInfo_StatusInfo_Invalid        RestoreInfo_StatusInfo_Status = 0
	RestoreInfo_StatusInfo_Pending        RestoreInfo_StatusInfo_Status = 1
	RestoreInfo_StatusInfo_InProgress     RestoreInfo_StatusInfo_Status = 2
	RestoreInfo_StatusInfo_Aborted        RestoreInfo_StatusInfo_Status = 3
	RestoreInfo_StatusInfo_Failed         RestoreInfo_StatusInfo_Status = 4
	RestoreInfo_StatusInfo_Deleting       RestoreInfo_StatusInfo_Status = 5
	RestoreInfo_StatusInfo_Success        RestoreInfo_StatusInfo_Status = 6
	RestoreInfo_StatusInfo_Retained       RestoreInfo_StatusInfo_Status = 7
	RestoreInfo_StatusInfo_PartialSuccess RestoreInfo_StatusInfo_Status = 8
)

var RestoreInfo_StatusInfo_Status_name = map[int32]string{
	0: "Invalid",
	1: "Pending",
	2: "InProgress",
	3: "Aborted",
	4: "Failed",
	5: "Deleting",
	6: "Success",
	7: "Retained",
	8: "PartialSuccess",
}

var RestoreInfo_StatusInfo_Status_value = map[string]int32{
	"Invalid":        0,
	"Pending":        1,
	"InProgress":     2,
	"Aborted":        3,
	"Failed":         4,
	"Deleting":       5,
	"Success":        6,
	"Retained":       7,
	"PartialSuccess": 8,
}

func (x RestoreInfo_StatusInfo_Status) String() string {
	return proto.EnumName(RestoreInfo_StatusInfo_Status_name, int32(x))
}

func (RestoreInfo_StatusInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{22, 4, 0}
}

type OrganizationObject struct {
	*Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
}

func (m *OrganizationObject) Reset()         { *m = OrganizationObject{} }
func (m *OrganizationObject) String() string { return proto.CompactTextString(m) }
func (*OrganizationObject) ProtoMessage()    {}
func (*OrganizationObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{0}
}
func (m *OrganizationObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationObject.Merge(m, src)
}
func (m *OrganizationObject) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationObject) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationObject.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationObject proto.InternalMessageInfo

type ClusterInfo struct {
	PxConfig        *PXConfig               `protobuf:"bytes,1,opt,name=px_config,json=pxConfig,proto3" json:"pxconfig"`
	Kubeconfig      string                  `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig" secure:"true"`
	CloudCredential string                  `protobuf:"bytes,3,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
	Status          *ClusterInfo_StatusInfo `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// delete_backups will determine whether the backups
	// belong to given cluster needs to be deleted or not.
	DeleteBackups bool `protobuf:"varint,5,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
	// delete_restores will determine whether the restore
	// belong to given cluster needs to be deleted or not.
	DeleteRestores bool `protobuf:"varint,6,opt,name=delete_restores,json=deleteRestores,proto3" json:"delete_restores,omitempty"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{1}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetPxConfig() *PXConfig {
	if m != nil {
		return m.PxConfig
	}
	return nil
}

func (m *ClusterInfo) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ClusterInfo) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

func (m *ClusterInfo) GetStatus() *ClusterInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterInfo) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

func (m *ClusterInfo) GetDeleteRestores() bool {
	if m != nil {
		return m.DeleteRestores
	}
	return false
}

// Message for maintaing status of the cluster.
type ClusterInfo_StatusInfo struct {
	Status ClusterInfo_StatusInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ClusterInfo_StatusInfo_Status" json:"status,omitempty"`
	Reason string                        `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ClusterInfo_StatusInfo) Reset()         { *m = ClusterInfo_StatusInfo{} }
func (m *ClusterInfo_StatusInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo_StatusInfo) ProtoMessage()    {}
func (*ClusterInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{1, 0}
}
func (m *ClusterInfo_StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo_StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo_StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo_StatusInfo.Merge(m, src)
}
func (m *ClusterInfo_StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo_StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo_StatusInfo proto.InternalMessageInfo

func (m *ClusterInfo_StatusInfo) GetStatus() ClusterInfo_StatusInfo_Status {
	if m != nil {
		return m.Status
	}
	return ClusterInfo_StatusInfo_Invalid
}

func (m *ClusterInfo_StatusInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ClusterObject struct {
	*Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	*ClusterInfo `protobuf:"bytes,2,opt,name=clusterInfo,proto3,embedded=clusterInfo" json:"clusterinfo"`
}

func (m *ClusterObject) Reset()         { *m = ClusterObject{} }
func (m *ClusterObject) String() string { return proto.CompactTextString(m) }
func (*ClusterObject) ProtoMessage()    {}
func (*ClusterObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{2}
}
func (m *ClusterObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterObject.Merge(m, src)
}
func (m *ClusterObject) XXX_Size() int {
	return m.Size()
}
func (m *ClusterObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterObject.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterObject proto.InternalMessageInfo

type PXConfig struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"accesstoken"`
}

func (m *PXConfig) Reset()         { *m = PXConfig{} }
func (m *PXConfig) String() string { return proto.CompactTextString(m) }
func (*PXConfig) ProtoMessage()    {}
func (*PXConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{3}
}
func (m *PXConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PXConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PXConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PXConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PXConfig.Merge(m, src)
}
func (m *PXConfig) XXX_Size() int {
	return m.Size()
}
func (m *PXConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PXConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PXConfig proto.InternalMessageInfo

func (m *PXConfig) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type AWSConfig struct {
	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"accesskey"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secretkey" secure:"true"`
}

func (m *AWSConfig) Reset()         { *m = AWSConfig{} }
func (m *AWSConfig) String() string { return proto.CompactTextString(m) }
func (*AWSConfig) ProtoMessage()    {}
func (*AWSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{4}
}
func (m *AWSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AWSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AWSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSConfig.Merge(m, src)
}
func (m *AWSConfig) XXX_Size() int {
	return m.Size()
}
func (m *AWSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AWSConfig proto.InternalMessageInfo

func (m *AWSConfig) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *AWSConfig) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

type S3Config struct {
	Endpoint         string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Region           string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	DisableSsl       bool   `protobuf:"varint,3,opt,name=disable_ssl,json=disableSsl,proto3" json:"disable_ssl,omitempty"`
	DisablePathStyle bool   `protobuf:"varint,4,opt,name=disable_path_style,json=disablePathStyle,proto3" json:"disable_path_style,omitempty"`
	StorageClass     string `protobuf:"bytes,5,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
}

func (m *S3Config) Reset()         { *m = S3Config{} }
func (m *S3Config) String() string { return proto.CompactTextString(m) }
func (*S3Config) ProtoMessage()    {}
func (*S3Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{5}
}
func (m *S3Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Config.Merge(m, src)
}
func (m *S3Config) XXX_Size() int {
	return m.Size()
}
func (m *S3Config) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Config.DiscardUnknown(m)
}

var xxx_messageInfo_S3Config proto.InternalMessageInfo

func (m *S3Config) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *S3Config) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *S3Config) GetDisableSsl() bool {
	if m != nil {
		return m.DisableSsl
	}
	return false
}

func (m *S3Config) GetDisablePathStyle() bool {
	if m != nil {
		return m.DisablePathStyle
	}
	return false
}

func (m *S3Config) GetStorageClass() string {
	if m != nil {
		return m.StorageClass
	}
	return ""
}

type AzureConfig struct {
	AccountName  string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountKey   string `protobuf:"bytes,2,opt,name=account_key,json=accountKey,proto3" json:"accountkey" secure:"true"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"clientsecret" secure:"true"`
	ClientId     string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"clientid" secure:"true"`
	TenantId     string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenantid" secure:"true"`
	// TODO: Need to see if this has to be here or in the backup object.
	SubscriptionId string `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscriptionid" secure:"true"`
}

func (m *AzureConfig) Reset()         { *m = AzureConfig{} }
func (m *AzureConfig) String() string { return proto.CompactTextString(m) }
func (*AzureConfig) ProtoMessage()    {}
func (*AzureConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{6}
}
func (m *AzureConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AzureConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AzureConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureConfig.Merge(m, src)
}
func (m *AzureConfig) XXX_Size() int {
	return m.Size()
}
func (m *AzureConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AzureConfig proto.InternalMessageInfo

func (m *AzureConfig) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AzureConfig) GetAccountKey() string {
	if m != nil {
		return m.AccountKey
	}
	return ""
}

func (m *AzureConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *AzureConfig) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AzureConfig) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AzureConfig) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

type GoogleConfig struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	JsonKey   string `protobuf:"bytes,2,opt,name=json_key,json=jsonKey,proto3" json:"jsonkey" secure:"true"`
}

func (m *GoogleConfig) Reset()         { *m = GoogleConfig{} }
func (m *GoogleConfig) String() string { return proto.CompactTextString(m) }
func (*GoogleConfig) ProtoMessage()    {}
func (*GoogleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{7}
}
func (m *GoogleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoogleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoogleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoogleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleConfig.Merge(m, src)
}
func (m *GoogleConfig) XXX_Size() int {
	return m.Size()
}
func (m *GoogleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleConfig proto.InternalMessageInfo

func (m *GoogleConfig) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GoogleConfig) GetJsonKey() string {
	if m != nil {
		return m.JsonKey
	}
	return ""
}

type CloudCredentialInfo struct {
	Type CloudCredentialInfo_Type `protobuf:"varint,1,opt,name=type,proto3,enum=CloudCredentialInfo_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*CloudCredentialInfo_AwsConfig
	//	*CloudCredentialInfo_AzureConfig
	//	*CloudCredentialInfo_GoogleConfig
	Config isCloudCredentialInfo_Config `protobuf_oneof:"config"`
}

func (m *CloudCredentialInfo) Reset()         { *m = CloudCredentialInfo{} }
func (m *CloudCredentialInfo) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialInfo) ProtoMessage()    {}
func (*CloudCredentialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{8}
}
func (m *CloudCredentialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialInfo.Merge(m, src)
}
func (m *CloudCredentialInfo) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialInfo proto.InternalMessageInfo

type isCloudCredentialInfo_Config interface {
	isCloudCredentialInfo_Config()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CloudCredentialInfo_AwsConfig struct {
	AwsConfig *AWSConfig `protobuf:"bytes,100,opt,name=aws_config,json=awsConfig,proto3,oneof" json:"aws_config,omitempty"`
}
type CloudCredentialInfo_AzureConfig struct {
	AzureConfig *AzureConfig `protobuf:"bytes,101,opt,name=azure_config,json=azureConfig,proto3,oneof" json:"azure_config,omitempty"`
}
type CloudCredentialInfo_GoogleConfig struct {
	GoogleConfig *GoogleConfig `protobuf:"bytes,102,opt,name=google_config,json=googleConfig,proto3,oneof" json:"google_config,omitempty"`
}

func (*CloudCredentialInfo_AwsConfig) isCloudCredentialInfo_Config()    {}
func (*CloudCredentialInfo_AzureConfig) isCloudCredentialInfo_Config()  {}
func (*CloudCredentialInfo_GoogleConfig) isCloudCredentialInfo_Config() {}

func (m *CloudCredentialInfo) GetConfig() isCloudCredentialInfo_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CloudCredentialInfo) GetType() CloudCredentialInfo_Type {
	if m != nil {
		return m.Type
	}
	return CloudCredentialInfo_Invalid
}

func (m *CloudCredentialInfo) GetAwsConfig() *AWSConfig {
	if x, ok := m.GetConfig().(*CloudCredentialInfo_AwsConfig); ok {
		return x.AwsConfig
	}
	return nil
}

func (m *CloudCredentialInfo) GetAzureConfig() *AzureConfig {
	if x, ok := m.GetConfig().(*CloudCredentialInfo_AzureConfig); ok {
		return x.AzureConfig
	}
	return nil
}

func (m *CloudCredentialInfo) GetGoogleConfig() *GoogleConfig {
	if x, ok := m.GetConfig().(*CloudCredentialInfo_GoogleConfig); ok {
		return x.GoogleConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CloudCredentialInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CloudCredentialInfo_AwsConfig)(nil),
		(*CloudCredentialInfo_AzureConfig)(nil),
		(*CloudCredentialInfo_GoogleConfig)(nil),
	}
}

type CloudCredentialObject struct {
	*Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	CloudCredentialInfo *CloudCredentialInfo `protobuf:"bytes,2,opt,name=cloud_credential_info,json=cloudCredentialInfo,proto3" json:"cloud_credential_info,omitempty"`
}

func (m *CloudCredentialObject) Reset()         { *m = CloudCredentialObject{} }
func (m *CloudCredentialObject) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialObject) ProtoMessage()    {}
func (*CloudCredentialObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{9}
}
func (m *CloudCredentialObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialObject.Merge(m, src)
}
func (m *CloudCredentialObject) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialObject) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialObject.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialObject proto.InternalMessageInfo

func (m *CloudCredentialObject) GetCloudCredentialInfo() *CloudCredentialInfo {
	if m != nil {
		return m.CloudCredentialInfo
	}
	return nil
}

type SchedulePolicyInfo struct {
	Interval *SchedulePolicyInfo_IntervalPolicy `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Daily    *SchedulePolicyInfo_DailyPolicy    `protobuf:"bytes,2,opt,name=daily,proto3" json:"daily,omitempty"`
	Weekly   *SchedulePolicyInfo_WeeklyPolicy   `protobuf:"bytes,3,opt,name=weekly,proto3" json:"weekly,omitempty"`
	Monthly  *SchedulePolicyInfo_MonthlyPolicy  `protobuf:"bytes,4,opt,name=monthly,proto3" json:"monthly,omitempty"`
	// list of backup schedule object that uses this schedule policy.
	BackupSchedule []string `protobuf:"bytes,5,rep,name=backup_schedule,json=backupSchedule,proto3" json:"backup_schedule,omitempty"`
}

func (m *SchedulePolicyInfo) Reset()         { *m = SchedulePolicyInfo{} }
func (m *SchedulePolicyInfo) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo) ProtoMessage()    {}
func (*SchedulePolicyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10}
}
func (m *SchedulePolicyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo.Merge(m, src)
}
func (m *SchedulePolicyInfo) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo proto.InternalMessageInfo

func (m *SchedulePolicyInfo) GetInterval() *SchedulePolicyInfo_IntervalPolicy {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *SchedulePolicyInfo) GetDaily() *SchedulePolicyInfo_DailyPolicy {
	if m != nil {
		return m.Daily
	}
	return nil
}

func (m *SchedulePolicyInfo) GetWeekly() *SchedulePolicyInfo_WeeklyPolicy {
	if m != nil {
		return m.Weekly
	}
	return nil
}

func (m *SchedulePolicyInfo) GetMonthly() *SchedulePolicyInfo_MonthlyPolicy {
	if m != nil {
		return m.Monthly
	}
	return nil
}

func (m *SchedulePolicyInfo) GetBackupSchedule() []string {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

type SchedulePolicyInfo_IncrementalCount struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
}

func (m *SchedulePolicyInfo_IncrementalCount) Reset()         { *m = SchedulePolicyInfo_IncrementalCount{} }
func (m *SchedulePolicyInfo_IncrementalCount) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo_IncrementalCount) ProtoMessage()    {}
func (*SchedulePolicyInfo_IncrementalCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10, 0}
}
func (m *SchedulePolicyInfo_IncrementalCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo_IncrementalCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo_IncrementalCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo_IncrementalCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo_IncrementalCount.Merge(m, src)
}
func (m *SchedulePolicyInfo_IncrementalCount) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo_IncrementalCount) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo_IncrementalCount.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo_IncrementalCount proto.InternalMessageInfo

func (m *SchedulePolicyInfo_IncrementalCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SchedulePolicyInfo_IntervalPolicy struct {
	// Interval in minutes at which an action should be triggered.
	Minutes int64 `protobuf:"varint,1,opt,name=minutes,proto3" json:"minutes,omitempty"`
	// Number of objects to retain for interval policy, default value is 10.
	Retain int64 `protobuf:"varint,2,opt,name=retain,proto3" json:"retain,omitempty"`
	// Number of incremental snapshots to take before taking a full
	// snapshot.
	IncrementalCount *SchedulePolicyInfo_IncrementalCount `protobuf:"bytes,3,opt,name=incremental_count,json=incrementalCount,proto3" json:"incremental_count,omitempty"`
}

func (m *SchedulePolicyInfo_IntervalPolicy) Reset()         { *m = SchedulePolicyInfo_IntervalPolicy{} }
func (m *SchedulePolicyInfo_IntervalPolicy) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo_IntervalPolicy) ProtoMessage()    {}
func (*SchedulePolicyInfo_IntervalPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10, 1}
}
func (m *SchedulePolicyInfo_IntervalPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo_IntervalPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo_IntervalPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo_IntervalPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo_IntervalPolicy.Merge(m, src)
}
func (m *SchedulePolicyInfo_IntervalPolicy) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo_IntervalPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo_IntervalPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo_IntervalPolicy proto.InternalMessageInfo

func (m *SchedulePolicyInfo_IntervalPolicy) GetMinutes() int64 {
	if m != nil {
		return m.Minutes
	}
	return 0
}

func (m *SchedulePolicyInfo_IntervalPolicy) GetRetain() int64 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *SchedulePolicyInfo_IntervalPolicy) GetIncrementalCount() *SchedulePolicyInfo_IncrementalCount {
	if m != nil {
		return m.IncrementalCount
	}
	return nil
}

type SchedulePolicyInfo_DailyPolicy struct {
	// Time, when the policy should be triggered. Expected format is
	// time.Kitchen eg 12:04PM or 12:04pm.
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Number of objects to retain for daily policy, default value is 10.
	Retain int64 `protobuf:"varint,2,opt,name=retain,proto3" json:"retain,omitempty"`
	// Number of incremental snapshots to take before taking a full
	// snapshot.
	IncrementalCount *SchedulePolicyInfo_IncrementalCount `protobuf:"bytes,3,opt,name=incremental_count,json=incrementalCount,proto3" json:"incremental_count,omitempty"`
}

func (m *SchedulePolicyInfo_DailyPolicy) Reset()         { *m = SchedulePolicyInfo_DailyPolicy{} }
func (m *SchedulePolicyInfo_DailyPolicy) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo_DailyPolicy) ProtoMessage()    {}
func (*SchedulePolicyInfo_DailyPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10, 2}
}
func (m *SchedulePolicyInfo_DailyPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo_DailyPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo_DailyPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo_DailyPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo_DailyPolicy.Merge(m, src)
}
func (m *SchedulePolicyInfo_DailyPolicy) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo_DailyPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo_DailyPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo_DailyPolicy proto.InternalMessageInfo

func (m *SchedulePolicyInfo_DailyPolicy) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *SchedulePolicyInfo_DailyPolicy) GetRetain() int64 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *SchedulePolicyInfo_DailyPolicy) GetIncrementalCount() *SchedulePolicyInfo_IncrementalCount {
	if m != nil {
		return m.IncrementalCount
	}
	return nil
}

type SchedulePolicyInfo_WeeklyPolicy struct {
	// Day of the week when the policy should be triggered.
	// For example, sunday or sun
	Day string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	// Time, when the policy should be triggered. Expected format is
	// time.Kitchen eg 12:04PM or 12:04pm.
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Number of objects to retain for weekly policy, default value is 10.
	Retain int64 `protobuf:"varint,3,opt,name=retain,proto3" json:"retain,omitempty"`
	// Number of incremental snapshots to take before taking a full
	// snapshot.
	IncrementalCount *SchedulePolicyInfo_IncrementalCount `protobuf:"bytes,4,opt,name=incremental_count,json=incrementalCount,proto3" json:"incremental_count,omitempty"`
}

func (m *SchedulePolicyInfo_WeeklyPolicy) Reset()         { *m = SchedulePolicyInfo_WeeklyPolicy{} }
func (m *SchedulePolicyInfo_WeeklyPolicy) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo_WeeklyPolicy) ProtoMessage()    {}
func (*SchedulePolicyInfo_WeeklyPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10, 3}
}
func (m *SchedulePolicyInfo_WeeklyPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo_WeeklyPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo_WeeklyPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo_WeeklyPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo_WeeklyPolicy.Merge(m, src)
}
func (m *SchedulePolicyInfo_WeeklyPolicy) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo_WeeklyPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo_WeeklyPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo_WeeklyPolicy proto.InternalMessageInfo

func (m *SchedulePolicyInfo_WeeklyPolicy) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *SchedulePolicyInfo_WeeklyPolicy) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *SchedulePolicyInfo_WeeklyPolicy) GetRetain() int64 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *SchedulePolicyInfo_WeeklyPolicy) GetIncrementalCount() *SchedulePolicyInfo_IncrementalCount {
	if m != nil {
		return m.IncrementalCount
	}
	return nil
}

type SchedulePolicyInfo_MonthlyPolicy struct {
	// Date of the month when the policy should be triggered. If a given
	// date
	// doesn't exist in a month it'll rollover to the next date of the
	// month.
	// For example if 31 is specified, it'll trigger on either 1st or 2nd
	// March
	// depending on if it is a leap year.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// Time, when the policy should be triggered. Expected format is
	// time.Kitchen eg 12:04PM or 12:04pm.
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Number of objects to retain for monthly policy, default value is 10.
	Retain int64 `protobuf:"varint,3,opt,name=retain,proto3" json:"retain,omitempty"`
	// Number of incremental snapshots to take before taking a full
	// snapshot.
	IncrementalCount *SchedulePolicyInfo_IncrementalCount `protobuf:"bytes,4,opt,name=incremental_count,json=incrementalCount,proto3" json:"incremental_count,omitempty"`
}

func (m *SchedulePolicyInfo_MonthlyPolicy) Reset()         { *m = SchedulePolicyInfo_MonthlyPolicy{} }
func (m *SchedulePolicyInfo_MonthlyPolicy) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInfo_MonthlyPolicy) ProtoMessage()    {}
func (*SchedulePolicyInfo_MonthlyPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{10, 4}
}
func (m *SchedulePolicyInfo_MonthlyPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInfo_MonthlyPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInfo_MonthlyPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInfo_MonthlyPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInfo_MonthlyPolicy.Merge(m, src)
}
func (m *SchedulePolicyInfo_MonthlyPolicy) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInfo_MonthlyPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInfo_MonthlyPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInfo_MonthlyPolicy proto.InternalMessageInfo

func (m *SchedulePolicyInfo_MonthlyPolicy) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *SchedulePolicyInfo_MonthlyPolicy) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *SchedulePolicyInfo_MonthlyPolicy) GetRetain() int64 {
	if m != nil {
		return m.Retain
	}
	return 0
}

func (m *SchedulePolicyInfo_MonthlyPolicy) GetIncrementalCount() *SchedulePolicyInfo_IncrementalCount {
	if m != nil {
		return m.IncrementalCount
	}
	return nil
}

type SchedulePolicyObject struct {
	*Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	*SchedulePolicyInfo `protobuf:"bytes,2,opt,name=schedule_policy_info,json=schedulePolicyInfo,proto3,embedded=schedule_policy_info" json:"schedule_policy_info,omitempty"`
}

func (m *SchedulePolicyObject) Reset()         { *m = SchedulePolicyObject{} }
func (m *SchedulePolicyObject) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyObject) ProtoMessage()    {}
func (*SchedulePolicyObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{11}
}
func (m *SchedulePolicyObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyObject.Merge(m, src)
}
func (m *SchedulePolicyObject) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyObject) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyObject.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyObject proto.InternalMessageInfo

type BackupScheduleInfo struct {
	SchedulePolicy string                                        `protobuf:"bytes,1,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
	Suspend        bool                                          `protobuf:"varint,2,opt,name=suspend,proto3" json:"suspend,omitempty"`
	ReclaimPolicy  BackupScheduleInfo_ReclaimPolicyType          `protobuf:"varint,3,opt,name=reclaim_policy,json=reclaimPolicy,proto3,enum=BackupScheduleInfo_ReclaimPolicyType" json:"reclaim_policy,omitempty"`
	BackupStatus   map[string]*BackupScheduleInfo_StatusInfoList `protobuf:"bytes,4,rep,name=backup_status,json=backupStatus,proto3" json:"backup_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Name of BackupLocation
	BackupLocation string `protobuf:"bytes,5,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Name of Cluster
	Cluster string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespaces to backup. Only an admin can provide multiple namespaces
	Namespaces []string `protobuf:"bytes,7,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Label selectors to choose resources
	LabelSelectors   map[string]string               `protobuf:"bytes,8,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreExecRule      string                          `protobuf:"bytes,9,opt,name=pre_exec_rule,json=preExecRule,proto3" json:"pre_exec_rule,omitempty"`
	PostExecRule     string                          `protobuf:"bytes,10,opt,name=post_exec_rule,json=postExecRule,proto3" json:"post_exec_rule,omitempty"`
	DeleteBackups    bool                            `protobuf:"varint,11,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
	Status           *BackupScheduleInfo_StatusInfo  `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	SuspendedBy      *BackupScheduleInfo_SuspendedBy `protobuf:"bytes,13,opt,name=suspended_by,json=suspendedBy,proto3" json:"suspended_by,omitempty"`
	IncludeResources []*ResourceInfo                 `protobuf:"bytes,14,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *BackupScheduleInfo) Reset()         { *m = BackupScheduleInfo{} }
func (m *BackupScheduleInfo) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInfo) ProtoMessage()    {}
func (*BackupScheduleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12}
}
func (m *BackupScheduleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInfo.Merge(m, src)
}
func (m *BackupScheduleInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInfo proto.InternalMessageInfo

func (m *BackupScheduleInfo) GetSchedulePolicy() string {
	if m != nil {
		return m.SchedulePolicy
	}
	return ""
}

func (m *BackupScheduleInfo) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *BackupScheduleInfo) GetReclaimPolicy() BackupScheduleInfo_ReclaimPolicyType {
	if m != nil {
		return m.ReclaimPolicy
	}
	return BackupScheduleInfo_Invalid
}

func (m *BackupScheduleInfo) GetBackupStatus() map[string]*BackupScheduleInfo_StatusInfoList {
	if m != nil {
		return m.BackupStatus
	}
	return nil
}

func (m *BackupScheduleInfo) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *BackupScheduleInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BackupScheduleInfo) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *BackupScheduleInfo) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *BackupScheduleInfo) GetPreExecRule() string {
	if m != nil {
		return m.PreExecRule
	}
	return ""
}

func (m *BackupScheduleInfo) GetPostExecRule() string {
	if m != nil {
		return m.PostExecRule
	}
	return ""
}

func (m *BackupScheduleInfo) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

func (m *BackupScheduleInfo) GetStatus() *BackupScheduleInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BackupScheduleInfo) GetSuspendedBy() *BackupScheduleInfo_SuspendedBy {
	if m != nil {
		return m.SuspendedBy
	}
	return nil
}

func (m *BackupScheduleInfo) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

type BackupScheduleInfo_SuspendedBy struct {
	Source BackupScheduleInfo_SuspendedBy_Source `protobuf:"varint,1,opt,name=source,proto3,enum=BackupScheduleInfo_SuspendedBy_Source" json:"source,omitempty"`
}

func (m *BackupScheduleInfo_SuspendedBy) Reset()         { *m = BackupScheduleInfo_SuspendedBy{} }
func (m *BackupScheduleInfo_SuspendedBy) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInfo_SuspendedBy) ProtoMessage()    {}
func (*BackupScheduleInfo_SuspendedBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 2}
}
func (m *BackupScheduleInfo_SuspendedBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInfo_SuspendedBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInfo_SuspendedBy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInfo_SuspendedBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInfo_SuspendedBy.Merge(m, src)
}
func (m *BackupScheduleInfo_SuspendedBy) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInfo_SuspendedBy) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInfo_SuspendedBy.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInfo_SuspendedBy proto.InternalMessageInfo

func (m *BackupScheduleInfo_SuspendedBy) GetSource() BackupScheduleInfo_SuspendedBy_Source {
	if m != nil {
		return m.Source
	}
	return BackupScheduleInfo_SuspendedBy_Invalid
}

type BackupScheduleInfo_StatusInfoList struct {
	Status []*BackupScheduleInfo_StatusInfo `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (m *BackupScheduleInfo_StatusInfoList) Reset()         { *m = BackupScheduleInfo_StatusInfoList{} }
func (m *BackupScheduleInfo_StatusInfoList) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInfo_StatusInfoList) ProtoMessage()    {}
func (*BackupScheduleInfo_StatusInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 3}
}
func (m *BackupScheduleInfo_StatusInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInfo_StatusInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInfo_StatusInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInfo_StatusInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInfo_StatusInfoList.Merge(m, src)
}
func (m *BackupScheduleInfo_StatusInfoList) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInfo_StatusInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInfo_StatusInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInfo_StatusInfoList proto.InternalMessageInfo

func (m *BackupScheduleInfo_StatusInfoList) GetStatus() []*BackupScheduleInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type BackupScheduleInfo_StatusInfo struct {
	// backup name
	BackupName string                               `protobuf:"bytes,1,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
	CreateTime *types.Timestamp                     `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	FinishTime *types.Timestamp                     `protobuf:"bytes,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Status     BackupScheduleInfo_StatusInfo_Status `protobuf:"varint,4,opt,name=status,proto3,enum=BackupScheduleInfo_StatusInfo_Status" json:"status,omitempty"`
	Reason     string                               `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *BackupScheduleInfo_StatusInfo) Reset()         { *m = BackupScheduleInfo_StatusInfo{} }
func (m *BackupScheduleInfo_StatusInfo) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInfo_StatusInfo) ProtoMessage()    {}
func (*BackupScheduleInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{12, 4}
}
func (m *BackupScheduleInfo_StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInfo_StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInfo_StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInfo_StatusInfo.Merge(m, src)
}
func (m *BackupScheduleInfo_StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInfo_StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInfo_StatusInfo proto.InternalMessageInfo

func (m *BackupScheduleInfo_StatusInfo) GetBackupName() string {
	if m != nil {
		return m.BackupName
	}
	return ""
}

func (m *BackupScheduleInfo_StatusInfo) GetCreateTime() *types.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *BackupScheduleInfo_StatusInfo) GetFinishTime() *types.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *BackupScheduleInfo_StatusInfo) GetStatus() BackupScheduleInfo_StatusInfo_Status {
	if m != nil {
		return m.Status
	}
	return BackupScheduleInfo_StatusInfo_Invalid
}

func (m *BackupScheduleInfo_StatusInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type BackupScheduleObject struct {
	*Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	*BackupScheduleInfo `protobuf:"bytes,2,opt,name=backup_schedule_info,json=backupScheduleInfo,proto3,embedded=backup_schedule_info" json:"backup_schedule_info,omitempty"`
}

func (m *BackupScheduleObject) Reset()         { *m = BackupScheduleObject{} }
func (m *BackupScheduleObject) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleObject) ProtoMessage()    {}
func (*BackupScheduleObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{13}
}
func (m *BackupScheduleObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleObject.Merge(m, src)
}
func (m *BackupScheduleObject) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleObject) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleObject.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleObject proto.InternalMessageInfo

type BackupLocationInfo struct {
	Type                    BackupLocationInfo_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=BackupLocationInfo_Type" json:"type,omitempty"`
	Path                    string                         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	EncryptionKey           string                         `protobuf:"bytes,3,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryptionkey" secure:"true"`
	CloudCredential         string                         `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
	Status                  *BackupLocationInfo_StatusInfo `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	DeleteBackups           bool                           `protobuf:"varint,6,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
	ValidateCloudCredential bool                           `protobuf:"varint,7,opt,name=validate_cloud_credential,json=validateCloudCredential,proto3" json:"validate_cloud_credential,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*BackupLocationInfo_S3Config
	Config isBackupLocationInfo_Config `protobuf_oneof:"config"`
}

func (m *BackupLocationInfo) Reset()         { *m = BackupLocationInfo{} }
func (m *BackupLocationInfo) String() string { return proto.CompactTextString(m) }
func (*BackupLocationInfo) ProtoMessage()    {}
func (*BackupLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{14}
}
func (m *BackupLocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationInfo.Merge(m, src)
}
func (m *BackupLocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationInfo proto.InternalMessageInfo

type isBackupLocationInfo_Config interface {
	isBackupLocationInfo_Config()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BackupLocationInfo_S3Config struct {
	S3Config *S3Config `protobuf:"bytes,100,opt,name=s3_config,json=s3Config,proto3,oneof" json:"s3_config,omitempty"`
}

func (*BackupLocationInfo_S3Config) isBackupLocationInfo_Config() {}

func (m *BackupLocationInfo) GetConfig() isBackupLocationInfo_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *BackupLocationInfo) GetType() BackupLocationInfo_Type {
	if m != nil {
		return m.Type
	}
	return BackupLocationInfo_Invalid
}

func (m *BackupLocationInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *BackupLocationInfo) GetEncryptionKey() string {
	if m != nil {
		return m.EncryptionKey
	}
	return ""
}

func (m *BackupLocationInfo) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

func (m *BackupLocationInfo) GetStatus() *BackupLocationInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BackupLocationInfo) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

func (m *BackupLocationInfo) GetValidateCloudCredential() bool {
	if m != nil {
		return m.ValidateCloudCredential
	}
	return false
}

func (m *BackupLocationInfo) GetS3Config() *S3Config {
	if x, ok := m.GetConfig().(*BackupLocationInfo_S3Config); ok {
		return x.S3Config
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BackupLocationInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BackupLocationInfo_S3Config)(nil),
	}
}

// Message for maintaing status of the object.
type BackupLocationInfo_StatusInfo struct {
	Status BackupLocationInfo_StatusInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=BackupLocationInfo_StatusInfo_Status" json:"status,omitempty"`
	Reason string                               `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *BackupLocationInfo_StatusInfo) Reset()         { *m = BackupLocationInfo_StatusInfo{} }
func (m *BackupLocationInfo_StatusInfo) String() string { return proto.CompactTextString(m) }
func (*BackupLocationInfo_StatusInfo) ProtoMessage()    {}
func (*BackupLocationInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{14, 0}
}
func (m *BackupLocationInfo_StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationInfo_StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationInfo_StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationInfo_StatusInfo.Merge(m, src)
}
func (m *BackupLocationInfo_StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationInfo_StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationInfo_StatusInfo proto.InternalMessageInfo

func (m *BackupLocationInfo_StatusInfo) GetStatus() BackupLocationInfo_StatusInfo_Status {
	if m != nil {
		return m.Status
	}
	return BackupLocationInfo_StatusInfo_Invalid
}

func (m *BackupLocationInfo_StatusInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type BackupLocationObject struct {
	*Metadata          `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	BackupLocationInfo *BackupLocationInfo `protobuf:"bytes,2,opt,name=backup_location_info,json=backupLocationInfo,proto3" json:"backup_location_info,omitempty"`
}

func (m *BackupLocationObject) Reset()         { *m = BackupLocationObject{} }
func (m *BackupLocationObject) String() string { return proto.CompactTextString(m) }
func (*BackupLocationObject) ProtoMessage()    {}
func (*BackupLocationObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{15}
}
func (m *BackupLocationObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationObject.Merge(m, src)
}
func (m *BackupLocationObject) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationObject) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationObject.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationObject proto.InternalMessageInfo

func (m *BackupLocationObject) GetBackupLocationInfo() *BackupLocationInfo {
	if m != nil {
		return m.BackupLocationInfo
	}
	return nil
}

type ResourceInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group     string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Kind      string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Version   string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ResourceInfo) Reset()         { *m = ResourceInfo{} }
func (m *ResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ResourceInfo) ProtoMessage()    {}
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{16}
}
func (m *ResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceInfo.Merge(m, src)
}
func (m *ResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceInfo proto.InternalMessageInfo

func (m *ResourceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ResourceInfo) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ResourceInfo) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ResourceInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type BackupInfo struct {
	// Name of BackupLocation
	BackupLocation string `protobuf:"bytes,1,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Name of Cluster
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespaces to backup. Only an admin can provide multiple namespaces
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Label selectors to choose resources
	LabelSelectors map[string]string      `protobuf:"bytes,4,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status         *BackupInfo_StatusInfo `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Resources      []*ResourceInfo        `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty"`
	Volumes        []*BackupInfo_Volume   `protobuf:"bytes,7,rep,name=volumes,proto3" json:"volumes,omitempty"`
	BackupPath     string                 `protobuf:"bytes,8,opt,name=backup_path,json=backupPath,proto3" json:"backup_path,omitempty"`
	Stage          BackupInfo_Stage       `protobuf:"varint,9,opt,name=stage,proto3,enum=BackupInfo_Stage" json:"stage,omitempty"`
	PreExecRule    string                 `protobuf:"bytes,10,opt,name=pre_exec_rule,json=preExecRule,proto3" json:"pre_exec_rule,omitempty"`
	PostExecRule   string                 `protobuf:"bytes,11,opt,name=post_exec_rule,json=postExecRule,proto3" json:"post_exec_rule,omitempty"`
	// Name of the backup schedule, if the backup was taken by schedule through
	// px-backup.
	// Otherwise it will be empty.
	BackupSchedule *BackupInfo_BackupSchedule `protobuf:"bytes,12,opt,name=backup_schedule,json=backupSchedule,proto3" json:"backup_schedule,omitempty"`
	CrName         string                     `protobuf:"bytes,13,opt,name=cr_name,json=crName,proto3" json:"cr_name,omitempty"`
	TotalSize      uint64                     `protobuf:"varint,14,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// Reference to cloud credential object used for backup
	CloudCredential  string          `protobuf:"bytes,15,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
	IncludeResources []*ResourceInfo `protobuf:"bytes,16,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *BackupInfo) Reset()         { *m = BackupInfo{} }
func (m *BackupInfo) String() string { return proto.CompactTextString(m) }
func (*BackupInfo) ProtoMessage()    {}
func (*BackupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17}
}
func (m *BackupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInfo.Merge(m, src)
}
func (m *BackupInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInfo proto.InternalMessageInfo

func (m *BackupInfo) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *BackupInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BackupInfo) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *BackupInfo) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *BackupInfo) GetStatus() *BackupInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BackupInfo) GetResources() []*ResourceInfo {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *BackupInfo) GetVolumes() []*BackupInfo_Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *BackupInfo) GetBackupPath() string {
	if m != nil {
		return m.BackupPath
	}
	return ""
}

func (m *BackupInfo) GetStage() BackupInfo_Stage {
	if m != nil {
		return m.Stage
	}
	return BackupInfo_Invalid
}

func (m *BackupInfo) GetPreExecRule() string {
	if m != nil {
		return m.PreExecRule
	}
	return ""
}

func (m *BackupInfo) GetPostExecRule() string {
	if m != nil {
		return m.PostExecRule
	}
	return ""
}

func (m *BackupInfo) GetBackupSchedule() *BackupInfo_BackupSchedule {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

func (m *BackupInfo) GetCrName() string {
	if m != nil {
		return m.CrName
	}
	return ""
}

func (m *BackupInfo) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *BackupInfo) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

func (m *BackupInfo) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

type BackupInfo_BackupSchedule struct {
	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BackupInfo_BackupSchedule) Reset()         { *m = BackupInfo_BackupSchedule{} }
func (m *BackupInfo_BackupSchedule) String() string { return proto.CompactTextString(m) }
func (*BackupInfo_BackupSchedule) ProtoMessage()    {}
func (*BackupInfo_BackupSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17, 1}
}
func (m *BackupInfo_BackupSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInfo_BackupSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInfo_BackupSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInfo_BackupSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInfo_BackupSchedule.Merge(m, src)
}
func (m *BackupInfo_BackupSchedule) XXX_Size() int {
	return m.Size()
}
func (m *BackupInfo_BackupSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInfo_BackupSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInfo_BackupSchedule proto.InternalMessageInfo

func (m *BackupInfo_BackupSchedule) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BackupInfo_BackupSchedule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BackupInfo_Volume struct {
	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace  string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pvc        string                 `protobuf:"bytes,3,opt,name=pvc,proto3" json:"pvc,omitempty"`
	BackupId   string                 `protobuf:"bytes,4,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	Status     *BackupInfo_StatusInfo `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	DriverName string                 `protobuf:"bytes,6,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	Zones      []string               `protobuf:"bytes,7,rep,name=zones,proto3" json:"zones,omitempty"`
	Options    map[string]string      `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalSize  uint64                 `protobuf:"varint,9,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// actual size of the backup
	// incase of invremental, it's the incremental backup size
	ActualSize uint64 `protobuf:"varint,10,opt,name=actual_size,json=actualSize,proto3" json:"actual_size,omitempty"`
}

func (m *BackupInfo_Volume) Reset()         { *m = BackupInfo_Volume{} }
func (m *BackupInfo_Volume) String() string { return proto.CompactTextString(m) }
func (*BackupInfo_Volume) ProtoMessage()    {}
func (*BackupInfo_Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17, 2}
}
func (m *BackupInfo_Volume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInfo_Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInfo_Volume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInfo_Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInfo_Volume.Merge(m, src)
}
func (m *BackupInfo_Volume) XXX_Size() int {
	return m.Size()
}
func (m *BackupInfo_Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInfo_Volume proto.InternalMessageInfo

func (m *BackupInfo_Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BackupInfo_Volume) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *BackupInfo_Volume) GetPvc() string {
	if m != nil {
		return m.Pvc
	}
	return ""
}

func (m *BackupInfo_Volume) GetBackupId() string {
	if m != nil {
		return m.BackupId
	}
	return ""
}

func (m *BackupInfo_Volume) GetStatus() *BackupInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BackupInfo_Volume) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *BackupInfo_Volume) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *BackupInfo_Volume) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *BackupInfo_Volume) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *BackupInfo_Volume) GetActualSize() uint64 {
	if m != nil {
		return m.ActualSize
	}
	return 0
}

// Message for maintaing status of the object.
type BackupInfo_StatusInfo struct {
	Status BackupInfo_StatusInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=BackupInfo_StatusInfo_Status" json:"status,omitempty"`
	Reason string                       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *BackupInfo_StatusInfo) Reset()         { *m = BackupInfo_StatusInfo{} }
func (m *BackupInfo_StatusInfo) String() string { return proto.CompactTextString(m) }
func (*BackupInfo_StatusInfo) ProtoMessage()    {}
func (*BackupInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{17, 3}
}
func (m *BackupInfo_StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInfo_StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInfo_StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInfo_StatusInfo.Merge(m, src)
}
func (m *BackupInfo_StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *BackupInfo_StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInfo_StatusInfo proto.InternalMessageInfo

func (m *BackupInfo_StatusInfo) GetStatus() BackupInfo_StatusInfo_Status {
	if m != nil {
		return m.Status
	}
	return BackupInfo_StatusInfo_Invalid
}

func (m *BackupInfo_StatusInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Message for Backup object which will be stored in Datastore.
type BackupObject struct {
	*Metadata   `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	*BackupInfo `protobuf:"bytes,2,opt,name=backup_info,json=backupInfo,proto3,embedded=backup_info" json:"backup_info,omitempty"`
}

func (m *BackupObject) Reset()         { *m = BackupObject{} }
func (m *BackupObject) String() string { return proto.CompactTextString(m) }
func (*BackupObject) ProtoMessage()    {}
func (*BackupObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{18}
}
func (m *BackupObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupObject.Merge(m, src)
}
func (m *BackupObject) XXX_Size() int {
	return m.Size()
}
func (m *BackupObject) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupObject.DiscardUnknown(m)
}

var xxx_messageInfo_BackupObject proto.InternalMessageInfo

// Message for passing pre and post exec rules for backup
type RulesInfo struct {
	Rules []*RulesInfo_RuleItem `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" yaml:"rules"`
}

func (m *RulesInfo) Reset()         { *m = RulesInfo{} }
func (m *RulesInfo) String() string { return proto.CompactTextString(m) }
func (*RulesInfo) ProtoMessage()    {}
func (*RulesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{19}
}
func (m *RulesInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RulesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RulesInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RulesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulesInfo.Merge(m, src)
}
func (m *RulesInfo) XXX_Size() int {
	return m.Size()
}
func (m *RulesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RulesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RulesInfo proto.InternalMessageInfo

func (m *RulesInfo) GetRules() []*RulesInfo_RuleItem {
	if m != nil {
		return m.Rules
	}
	return nil
}

type RulesInfo_RuleItem struct {
	PodSelector map[string]string   `protobuf:"bytes,1,rep,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty" yaml:"podSelector" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Actions     []*RulesInfo_Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" yaml:"actions"`
	Container   string              `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
}

func (m *RulesInfo_RuleItem) Reset()         { *m = RulesInfo_RuleItem{} }
func (m *RulesInfo_RuleItem) String() string { return proto.CompactTextString(m) }
func (*RulesInfo_RuleItem) ProtoMessage()    {}
func (*RulesInfo_RuleItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{19, 0}
}
func (m *RulesInfo_RuleItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RulesInfo_RuleItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RulesInfo_RuleItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RulesInfo_RuleItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulesInfo_RuleItem.Merge(m, src)
}
func (m *RulesInfo_RuleItem) XXX_Size() int {
	return m.Size()
}
func (m *RulesInfo_RuleItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RulesInfo_RuleItem.DiscardUnknown(m)
}

var xxx_messageInfo_RulesInfo_RuleItem proto.InternalMessageInfo

func (m *RulesInfo_RuleItem) GetPodSelector() map[string]string {
	if m != nil {
		return m.PodSelector
	}
	return nil
}

func (m *RulesInfo_RuleItem) GetActions() []*RulesInfo_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *RulesInfo_RuleItem) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type RulesInfo_Action struct {
	Background     bool   `protobuf:"varint,1,opt,name=background,proto3" json:"background,omitempty" yaml:"background"`
	RunInSinglePod bool   `protobuf:"varint,2,opt,name=run_in_single_pod,json=runInSinglePod,proto3" json:"run_in_single_pod,omitempty" yaml:"runInSinglePod"`
	Value          string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RulesInfo_Action) Reset()         { *m = RulesInfo_Action{} }
func (m *RulesInfo_Action) String() string { return proto.CompactTextString(m) }
func (*RulesInfo_Action) ProtoMessage()    {}
func (*RulesInfo_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{19, 1}
}
func (m *RulesInfo_Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RulesInfo_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RulesInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RulesInfo_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulesInfo_Action.Merge(m, src)
}
func (m *RulesInfo_Action) XXX_Size() int {
	return m.Size()
}
func (m *RulesInfo_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_RulesInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_RulesInfo_Action proto.InternalMessageInfo

func (m *RulesInfo_Action) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *RulesInfo_Action) GetRunInSinglePod() bool {
	if m != nil {
		return m.RunInSinglePod
	}
	return false
}

func (m *RulesInfo_Action) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RuleObject struct {
	*Metadata  `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	*RulesInfo `protobuf:"bytes,2,opt,name=rules_info,json=rulesInfo,proto3,embedded=rules_info" json:"rules_info,omitempty"`
}

func (m *RuleObject) Reset()         { *m = RuleObject{} }
func (m *RuleObject) String() string { return proto.CompactTextString(m) }
func (*RuleObject) ProtoMessage()    {}
func (*RuleObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{20}
}
func (m *RuleObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleObject.Merge(m, src)
}
func (m *RuleObject) XXX_Size() int {
	return m.Size()
}
func (m *RuleObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleObject.DiscardUnknown(m)
}

var xxx_messageInfo_RuleObject proto.InternalMessageInfo

type ReplacePolicy struct {
}

func (m *ReplacePolicy) Reset()         { *m = ReplacePolicy{} }
func (m *ReplacePolicy) String() string { return proto.CompactTextString(m) }
func (*ReplacePolicy) ProtoMessage()    {}
func (*ReplacePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{21}
}
func (m *ReplacePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplacePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplacePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplacePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplacePolicy.Merge(m, src)
}
func (m *ReplacePolicy) XXX_Size() int {
	return m.Size()
}
func (m *ReplacePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplacePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ReplacePolicy proto.InternalMessageInfo

// Message for restore info
type RestoreInfo struct {
	// Name of backup to restore from
	Backup string `protobuf:"bytes,1,opt,name=backup,proto3" json:"backup,omitempty"`
	// Name of backup location to restore from
	BackupLocation string `protobuf:"bytes,2,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Label selectors to choose resources
	LabelSelectors map[string]string `protobuf:"bytes,3,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Namespace Mapping
	NamespaceMapping map[string]string `protobuf:"bytes,4,rep,name=namespace_mapping,json=namespaceMapping,proto3" json:"namespace_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Restore replace policy type ("delete"/"retain")
	ReplacePolicy ReplacePolicy_Type              `protobuf:"varint,5,opt,name=replace_policy,json=replacePolicy,proto3,enum=ReplacePolicy_Type" json:"replace_policy,omitempty"`
	Status        *RestoreInfo_StatusInfo         `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Resources     []*RestoreInfo_RestoredResource `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty"`
	Volumes       []*RestoreInfo_Volume           `protobuf:"bytes,8,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// Name of the cluster
	Cluster                      string          `protobuf:"bytes,9,opt,name=cluster,proto3" json:"cluster,omitempty"`
	IncludeOptionalResourceTypes []string        `protobuf:"bytes,10,rep,name=include_optional_resource_types,json=includeOptionalResourceTypes,proto3" json:"include_optional_resource_types,omitempty"`
	TotalSize                    uint64          `protobuf:"varint,11,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	IncludeResources             []*ResourceInfo `protobuf:"bytes,12,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *RestoreInfo) Reset()         { *m = RestoreInfo{} }
func (m *RestoreInfo) String() string { return proto.CompactTextString(m) }
func (*RestoreInfo) ProtoMessage()    {}
func (*RestoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{22}
}
func (m *RestoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInfo.Merge(m, src)
}
func (m *RestoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInfo proto.InternalMessageInfo

func (m *RestoreInfo) GetBackup() string {
	if m != nil {
		return m.Backup
	}
	return ""
}

func (m *RestoreInfo) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *RestoreInfo) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *RestoreInfo) GetNamespaceMapping() map[string]string {
	if m != nil {
		return m.NamespaceMapping
	}
	return nil
}

func (m *RestoreInfo) GetReplacePolicy() ReplacePolicy_Type {
	if m != nil {
		return m.ReplacePolicy
	}
	return ReplacePolicy_Invalid
}

func (m *RestoreInfo) GetStatus() *RestoreInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RestoreInfo) GetResources() []*RestoreInfo_RestoredResource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *RestoreInfo) GetVolumes() []*RestoreInfo_Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *RestoreInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RestoreInfo) GetIncludeOptionalResourceTypes() []string {
	if m != nil {
		return m.IncludeOptionalResourceTypes
	}
	return nil
}

func (m *RestoreInfo) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *RestoreInfo) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

type RestoreInfo_RestoredResource struct {
	Name      string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string                  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group     string                  `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Kind      string                  `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Version   string                  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Status    *RestoreInfo_StatusInfo `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RestoreInfo_RestoredResource) Reset()         { *m = RestoreInfo_RestoredResource{} }
func (m *RestoreInfo_RestoredResource) String() string { return proto.CompactTextString(m) }
func (*RestoreInfo_RestoredResource) ProtoMessage()    {}
func (*RestoreInfo_RestoredResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{22, 2}
}
func (m *RestoreInfo_RestoredResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInfo_RestoredResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInfo_RestoredResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInfo_RestoredResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInfo_RestoredResource.Merge(m, src)
}
func (m *RestoreInfo_RestoredResource) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInfo_RestoredResource) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInfo_RestoredResource.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInfo_RestoredResource proto.InternalMessageInfo

func (m *RestoreInfo_RestoredResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RestoreInfo_RestoredResource) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RestoreInfo_RestoredResource) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *RestoreInfo_RestoredResource) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RestoreInfo_RestoredResource) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RestoreInfo_RestoredResource) GetStatus() *RestoreInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type RestoreInfo_Volume struct {
	Pvc             string                  `protobuf:"bytes,1,opt,name=pvc,proto3" json:"pvc,omitempty"`
	SourceNamespace string                  `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	SourceVolume    string                  `protobuf:"bytes,3,opt,name=source_volume,json=sourceVolume,proto3" json:"source_volume,omitempty"`
	RestoreVolume   string                  `protobuf:"bytes,4,opt,name=restore_volume,json=restoreVolume,proto3" json:"restore_volume,omitempty"`
	Status          *RestoreInfo_StatusInfo `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	DriverName      string                  `protobuf:"bytes,6,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	Zones           []string                `protobuf:"bytes,7,rep,name=zones,proto3" json:"zones,omitempty"`
	Options         map[string]string       `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalSize       uint64                  `protobuf:"varint,9,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (m *RestoreInfo_Volume) Reset()         { *m = RestoreInfo_Volume{} }
func (m *RestoreInfo_Volume) String() string { return proto.CompactTextString(m) }
func (*RestoreInfo_Volume) ProtoMessage()    {}
func (*RestoreInfo_Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{22, 3}
}
func (m *RestoreInfo_Volume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInfo_Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInfo_Volume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInfo_Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInfo_Volume.Merge(m, src)
}
func (m *RestoreInfo_Volume) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInfo_Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInfo_Volume proto.InternalMessageInfo

func (m *RestoreInfo_Volume) GetPvc() string {
	if m != nil {
		return m.Pvc
	}
	return ""
}

func (m *RestoreInfo_Volume) GetSourceNamespace() string {
	if m != nil {
		return m.SourceNamespace
	}
	return ""
}

func (m *RestoreInfo_Volume) GetSourceVolume() string {
	if m != nil {
		return m.SourceVolume
	}
	return ""
}

func (m *RestoreInfo_Volume) GetRestoreVolume() string {
	if m != nil {
		return m.RestoreVolume
	}
	return ""
}

func (m *RestoreInfo_Volume) GetStatus() *RestoreInfo_StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RestoreInfo_Volume) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *RestoreInfo_Volume) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *RestoreInfo_Volume) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RestoreInfo_Volume) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

// Message for maintaing status of the object.
type RestoreInfo_StatusInfo struct {
	Status RestoreInfo_StatusInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=RestoreInfo_StatusInfo_Status" json:"status,omitempty"`
	Reason string                        `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *RestoreInfo_StatusInfo) Reset()         { *m = RestoreInfo_StatusInfo{} }
func (m *RestoreInfo_StatusInfo) String() string { return proto.CompactTextString(m) }
func (*RestoreInfo_StatusInfo) ProtoMessage()    {}
func (*RestoreInfo_StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{22, 4}
}
func (m *RestoreInfo_StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInfo_StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInfo_StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInfo_StatusInfo.Merge(m, src)
}
func (m *RestoreInfo_StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInfo_StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInfo_StatusInfo proto.InternalMessageInfo

func (m *RestoreInfo_StatusInfo) GetStatus() RestoreInfo_StatusInfo_Status {
	if m != nil {
		return m.Status
	}
	return RestoreInfo_StatusInfo_Invalid
}

func (m *RestoreInfo_StatusInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Message for Restore object which will be stored in Datastore.
type RestoreObject struct {
	*Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	*RestoreInfo `protobuf:"bytes,2,opt,name=restore_info,json=restoreInfo,proto3,embedded=restore_info" json:"restore_info,omitempty"`
}

func (m *RestoreObject) Reset()         { *m = RestoreObject{} }
func (m *RestoreObject) String() string { return proto.CompactTextString(m) }
func (*RestoreObject) ProtoMessage()    {}
func (*RestoreObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{23}
}
func (m *RestoreObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreObject.Merge(m, src)
}
func (m *RestoreObject) XXX_Size() int {
	return m.Size()
}
func (m *RestoreObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreObject.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreObject proto.InternalMessageInfo

type HealthStatusRequest struct {
}

func (m *HealthStatusRequest) Reset()         { *m = HealthStatusRequest{} }
func (m *HealthStatusRequest) String() string { return proto.CompactTextString(m) }
func (*HealthStatusRequest) ProtoMessage()    {}
func (*HealthStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{24}
}
func (m *HealthStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatusRequest.Merge(m, src)
}
func (m *HealthStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatusRequest proto.InternalMessageInfo

type HealthStatusResponse struct {
}

func (m *HealthStatusResponse) Reset()         { *m = HealthStatusResponse{} }
func (m *HealthStatusResponse) String() string { return proto.CompactTextString(m) }
func (*HealthStatusResponse) ProtoMessage()    {}
func (*HealthStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{25}
}
func (m *HealthStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatusResponse.Merge(m, src)
}
func (m *HealthStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatusResponse proto.InternalMessageInfo

type TimeRange struct {
	StartTime *types.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *types.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{26}
}
func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(m, src)
}
func (m *TimeRange) XXX_Size() int {
	return m.Size()
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeRange) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type EnumerateOptions struct {
	// label selectors for the object for filtering
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// max objects to fetch
	MaxObjects uint64 `protobuf:"varint,2,opt,name=max_objects,json=maxObjects,proto3" json:"max_objects,omitempty"`
	// Time range for which to return objects
	TimeRange *TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Filter to use for name of objects. Any object that contains the filter
	// will be returned
	NameFilter string `protobuf:"bytes,4,opt,name=name_filter,json=nameFilter,proto3" json:"name_filter,omitempty"`
	// Filter to use for cluster name of objects. Any object that contains the
	// filter will be returned
	ClusterNameFilter string `protobuf:"bytes,5,opt,name=cluster_name_filter,json=clusterNameFilter,proto3" json:"cluster_name_filter,omitempty"`
	ObjectIndex       uint64 `protobuf:"varint,6,opt,name=object_index,json=objectIndex,proto3" json:"object_index,omitempty"`
}

func (m *EnumerateOptions) Reset()         { *m = EnumerateOptions{} }
func (m *EnumerateOptions) String() string { return proto.CompactTextString(m) }
func (*EnumerateOptions) ProtoMessage()    {}
func (*EnumerateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{27}
}
func (m *EnumerateOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnumerateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnumerateOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnumerateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumerateOptions.Merge(m, src)
}
func (m *EnumerateOptions) XXX_Size() int {
	return m.Size()
}
func (m *EnumerateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumerateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_EnumerateOptions proto.InternalMessageInfo

func (m *EnumerateOptions) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *EnumerateOptions) GetMaxObjects() uint64 {
	if m != nil {
		return m.MaxObjects
	}
	return 0
}

func (m *EnumerateOptions) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EnumerateOptions) GetNameFilter() string {
	if m != nil {
		return m.NameFilter
	}
	return ""
}

func (m *EnumerateOptions) GetClusterNameFilter() string {
	if m != nil {
		return m.ClusterNameFilter
	}
	return ""
}

func (m *EnumerateOptions) GetObjectIndex() uint64 {
	if m != nil {
		return m.ObjectIndex
	}
	return 0
}

// Define SchedulePolicyCreateRequest struct
type SchedulePolicyCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	SchedulePolicy  *SchedulePolicyInfo `protobuf:"bytes,2,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
}

func (m *SchedulePolicyCreateRequest) Reset()         { *m = SchedulePolicyCreateRequest{} }
func (m *SchedulePolicyCreateRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyCreateRequest) ProtoMessage()    {}
func (*SchedulePolicyCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{28}
}
func (m *SchedulePolicyCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyCreateRequest.Merge(m, src)
}
func (m *SchedulePolicyCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyCreateRequest proto.InternalMessageInfo

func (m *SchedulePolicyCreateRequest) GetSchedulePolicy() *SchedulePolicyInfo {
	if m != nil {
		return m.SchedulePolicy
	}
	return nil
}

// Define SchedulePolicyCreateResponse struct
type SchedulePolicyCreateResponse struct {
}

func (m *SchedulePolicyCreateResponse) Reset()         { *m = SchedulePolicyCreateResponse{} }
func (m *SchedulePolicyCreateResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyCreateResponse) ProtoMessage()    {}
func (*SchedulePolicyCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{29}
}
func (m *SchedulePolicyCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyCreateResponse.Merge(m, src)
}
func (m *SchedulePolicyCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyCreateResponse proto.InternalMessageInfo

// Define SchedulePolicyUpdateRequest struct
type SchedulePolicyUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	SchedulePolicy  *SchedulePolicyInfo `protobuf:"bytes,2,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
}

func (m *SchedulePolicyUpdateRequest) Reset()         { *m = SchedulePolicyUpdateRequest{} }
func (m *SchedulePolicyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyUpdateRequest) ProtoMessage()    {}
func (*SchedulePolicyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{30}
}
func (m *SchedulePolicyUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyUpdateRequest.Merge(m, src)
}
func (m *SchedulePolicyUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyUpdateRequest proto.InternalMessageInfo

func (m *SchedulePolicyUpdateRequest) GetSchedulePolicy() *SchedulePolicyInfo {
	if m != nil {
		return m.SchedulePolicy
	}
	return nil
}

// Define SchedulePolicyUpdateResponse struct
type SchedulePolicyUpdateResponse struct {
}

func (m *SchedulePolicyUpdateResponse) Reset()         { *m = SchedulePolicyUpdateResponse{} }
func (m *SchedulePolicyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyUpdateResponse) ProtoMessage()    {}
func (*SchedulePolicyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{31}
}
func (m *SchedulePolicyUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyUpdateResponse.Merge(m, src)
}
func (m *SchedulePolicyUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyUpdateResponse proto.InternalMessageInfo

// Define SchedulePolicyEnumerateRequest struct
type SchedulePolicyEnumerateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// label selectors for the object for filtering
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SchedulePolicyEnumerateRequest) Reset()         { *m = SchedulePolicyEnumerateRequest{} }
func (m *SchedulePolicyEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyEnumerateRequest) ProtoMessage()    {}
func (*SchedulePolicyEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{32}
}
func (m *SchedulePolicyEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyEnumerateRequest.Merge(m, src)
}
func (m *SchedulePolicyEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyEnumerateRequest proto.InternalMessageInfo

func (m *SchedulePolicyEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SchedulePolicyEnumerateRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Define SchedulePolicyEnumerateResponse struct
type SchedulePolicyEnumerateResponse struct {
	SchedulePolicies []*SchedulePolicyObject `protobuf:"bytes,1,rep,name=schedule_policies,json=schedulePolicies,proto3" json:"schedule_policies,omitempty"`
}

func (m *SchedulePolicyEnumerateResponse) Reset()         { *m = SchedulePolicyEnumerateResponse{} }
func (m *SchedulePolicyEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyEnumerateResponse) ProtoMessage()    {}
func (*SchedulePolicyEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{33}
}
func (m *SchedulePolicyEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyEnumerateResponse.Merge(m, src)
}
func (m *SchedulePolicyEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyEnumerateResponse proto.InternalMessageInfo

func (m *SchedulePolicyEnumerateResponse) GetSchedulePolicies() []*SchedulePolicyObject {
	if m != nil {
		return m.SchedulePolicies
	}
	return nil
}

// Define SchedulePolicyInspectRequest struct
type SchedulePolicyInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SchedulePolicyInspectRequest) Reset()         { *m = SchedulePolicyInspectRequest{} }
func (m *SchedulePolicyInspectRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInspectRequest) ProtoMessage()    {}
func (*SchedulePolicyInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{34}
}
func (m *SchedulePolicyInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInspectRequest.Merge(m, src)
}
func (m *SchedulePolicyInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInspectRequest proto.InternalMessageInfo

func (m *SchedulePolicyInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SchedulePolicyInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define SchedulePolicyInspectResponse struct
type SchedulePolicyInspectResponse struct {
	SchedulePolicy *SchedulePolicyObject `protobuf:"bytes,1,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
}

func (m *SchedulePolicyInspectResponse) Reset()         { *m = SchedulePolicyInspectResponse{} }
func (m *SchedulePolicyInspectResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyInspectResponse) ProtoMessage()    {}
func (*SchedulePolicyInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{35}
}
func (m *SchedulePolicyInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyInspectResponse.Merge(m, src)
}
func (m *SchedulePolicyInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyInspectResponse proto.InternalMessageInfo

func (m *SchedulePolicyInspectResponse) GetSchedulePolicy() *SchedulePolicyObject {
	if m != nil {
		return m.SchedulePolicy
	}
	return nil
}

// Define SchedulePolicyDeleteRequest struct
type SchedulePolicyDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SchedulePolicyDeleteRequest) Reset()         { *m = SchedulePolicyDeleteRequest{} }
func (m *SchedulePolicyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyDeleteRequest) ProtoMessage()    {}
func (*SchedulePolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{36}
}
func (m *SchedulePolicyDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyDeleteRequest.Merge(m, src)
}
func (m *SchedulePolicyDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyDeleteRequest proto.InternalMessageInfo

func (m *SchedulePolicyDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SchedulePolicyDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define SchedulePolicyDeleteResponse struct
type SchedulePolicyDeleteResponse struct {
}

func (m *SchedulePolicyDeleteResponse) Reset()         { *m = SchedulePolicyDeleteResponse{} }
func (m *SchedulePolicyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*SchedulePolicyDeleteResponse) ProtoMessage()    {}
func (*SchedulePolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{37}
}
func (m *SchedulePolicyDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulePolicyDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchedulePolicyDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchedulePolicyDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulePolicyDeleteResponse.Merge(m, src)
}
func (m *SchedulePolicyDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchedulePolicyDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulePolicyDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulePolicyDeleteResponse proto.InternalMessageInfo

// Define BackupScheduleCreateRequest struct
type BackupScheduleCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	SchedulePolicy  string                               `protobuf:"bytes,2,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
	ReclaimPolicy   BackupScheduleInfo_ReclaimPolicyType `protobuf:"varint,3,opt,name=reclaim_policy,json=reclaimPolicy,proto3,enum=BackupScheduleInfo_ReclaimPolicyType" json:"reclaim_policy,omitempty"`
	// Name of BackupLocation
	BackupLocation string `protobuf:"bytes,4,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Name of Cluster
	Cluster string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespaces to backup. Only an admin can provide multiple namespaces
	Namespaces []string `protobuf:"bytes,6,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Label selectors to choose resources
	LabelSelectors map[string]string `protobuf:"bytes,7,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreExecRule    string            `protobuf:"bytes,8,opt,name=pre_exec_rule,json=preExecRule,proto3" json:"pre_exec_rule,omitempty"`
	PostExecRule   string            `protobuf:"bytes,9,opt,name=post_exec_rule,json=postExecRule,proto3" json:"post_exec_rule,omitempty"`
	// List of resources to backup (optional)
	IncludeResources []*ResourceInfo `protobuf:"bytes,10,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *BackupScheduleCreateRequest) Reset()         { *m = BackupScheduleCreateRequest{} }
func (m *BackupScheduleCreateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleCreateRequest) ProtoMessage()    {}
func (*BackupScheduleCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{38}
}
func (m *BackupScheduleCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleCreateRequest.Merge(m, src)
}
func (m *BackupScheduleCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleCreateRequest proto.InternalMessageInfo

func (m *BackupScheduleCreateRequest) GetSchedulePolicy() string {
	if m != nil {
		return m.SchedulePolicy
	}
	return ""
}

func (m *BackupScheduleCreateRequest) GetReclaimPolicy() BackupScheduleInfo_ReclaimPolicyType {
	if m != nil {
		return m.ReclaimPolicy
	}
	return BackupScheduleInfo_Invalid
}

func (m *BackupScheduleCreateRequest) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *BackupScheduleCreateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BackupScheduleCreateRequest) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *BackupScheduleCreateRequest) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *BackupScheduleCreateRequest) GetPreExecRule() string {
	if m != nil {
		return m.PreExecRule
	}
	return ""
}

func (m *BackupScheduleCreateRequest) GetPostExecRule() string {
	if m != nil {
		return m.PostExecRule
	}
	return ""
}

func (m *BackupScheduleCreateRequest) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

// Define BackupScheduleCreateResponse struct
type BackupScheduleCreateResponse struct {
}

func (m *BackupScheduleCreateResponse) Reset()         { *m = BackupScheduleCreateResponse{} }
func (m *BackupScheduleCreateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleCreateResponse) ProtoMessage()    {}
func (*BackupScheduleCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{39}
}
func (m *BackupScheduleCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleCreateResponse.Merge(m, src)
}
func (m *BackupScheduleCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleCreateResponse proto.InternalMessageInfo

// Define BackupScheduleUpdateRequest struct
type BackupScheduleUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	SchedulePolicy  string                               `protobuf:"bytes,2,opt,name=schedule_policy,json=schedulePolicy,proto3" json:"schedule_policy,omitempty"`
	ReclaimPolicy   BackupScheduleInfo_ReclaimPolicyType `protobuf:"varint,3,opt,name=reclaim_policy,json=reclaimPolicy,proto3,enum=BackupScheduleInfo_ReclaimPolicyType" json:"reclaim_policy,omitempty"`
	// Name of BackupLocation
	BackupLocation string `protobuf:"bytes,4,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Name of Cluster
	Cluster string `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespaces to backup. Only an admin can provide multiple namespaces
	Namespaces []string `protobuf:"bytes,6,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Label selectors to choose resources
	LabelSelectors map[string]string `protobuf:"bytes,7,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreExecRule    string            `protobuf:"bytes,8,opt,name=pre_exec_rule,json=preExecRule,proto3" json:"pre_exec_rule,omitempty"`
	PostExecRule   string            `protobuf:"bytes,9,opt,name=post_exec_rule,json=postExecRule,proto3" json:"post_exec_rule,omitempty"`
	Suspend        bool              `protobuf:"varint,10,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// List of resources to backup (optional)
	IncludeResources []*ResourceInfo `protobuf:"bytes,11,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *BackupScheduleUpdateRequest) Reset()         { *m = BackupScheduleUpdateRequest{} }
func (m *BackupScheduleUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleUpdateRequest) ProtoMessage()    {}
func (*BackupScheduleUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{40}
}
func (m *BackupScheduleUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleUpdateRequest.Merge(m, src)
}
func (m *BackupScheduleUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleUpdateRequest proto.InternalMessageInfo

func (m *BackupScheduleUpdateRequest) GetSchedulePolicy() string {
	if m != nil {
		return m.SchedulePolicy
	}
	return ""
}

func (m *BackupScheduleUpdateRequest) GetReclaimPolicy() BackupScheduleInfo_ReclaimPolicyType {
	if m != nil {
		return m.ReclaimPolicy
	}
	return BackupScheduleInfo_Invalid
}

func (m *BackupScheduleUpdateRequest) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *BackupScheduleUpdateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BackupScheduleUpdateRequest) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *BackupScheduleUpdateRequest) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *BackupScheduleUpdateRequest) GetPreExecRule() string {
	if m != nil {
		return m.PreExecRule
	}
	return ""
}

func (m *BackupScheduleUpdateRequest) GetPostExecRule() string {
	if m != nil {
		return m.PostExecRule
	}
	return ""
}

func (m *BackupScheduleUpdateRequest) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *BackupScheduleUpdateRequest) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

// Define BackupScheduleUpdateResponse struct
type BackupScheduleUpdateResponse struct {
}

func (m *BackupScheduleUpdateResponse) Reset()         { *m = BackupScheduleUpdateResponse{} }
func (m *BackupScheduleUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleUpdateResponse) ProtoMessage()    {}
func (*BackupScheduleUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{41}
}
func (m *BackupScheduleUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleUpdateResponse.Merge(m, src)
}
func (m *BackupScheduleUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleUpdateResponse proto.InternalMessageInfo

// Define BackupScheduleEnumerateRequest struct
type BackupScheduleEnumerateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// label selectors for the object for filtering
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BackupScheduleEnumerateRequest) Reset()         { *m = BackupScheduleEnumerateRequest{} }
func (m *BackupScheduleEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleEnumerateRequest) ProtoMessage()    {}
func (*BackupScheduleEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{42}
}
func (m *BackupScheduleEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleEnumerateRequest.Merge(m, src)
}
func (m *BackupScheduleEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleEnumerateRequest proto.InternalMessageInfo

func (m *BackupScheduleEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupScheduleEnumerateRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Define BackupScheduleEnumerateResponse struct
type BackupScheduleEnumerateResponse struct {
	BackupSchedules []*BackupScheduleObject `protobuf:"bytes,1,rep,name=backup_schedules,json=backupSchedules,proto3" json:"backup_schedules,omitempty"`
}

func (m *BackupScheduleEnumerateResponse) Reset()         { *m = BackupScheduleEnumerateResponse{} }
func (m *BackupScheduleEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleEnumerateResponse) ProtoMessage()    {}
func (*BackupScheduleEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{43}
}
func (m *BackupScheduleEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleEnumerateResponse.Merge(m, src)
}
func (m *BackupScheduleEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleEnumerateResponse proto.InternalMessageInfo

func (m *BackupScheduleEnumerateResponse) GetBackupSchedules() []*BackupScheduleObject {
	if m != nil {
		return m.BackupSchedules
	}
	return nil
}

// Define BackupScheduleInspectRequest struct
type BackupScheduleInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BackupScheduleInspectRequest) Reset()         { *m = BackupScheduleInspectRequest{} }
func (m *BackupScheduleInspectRequest) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInspectRequest) ProtoMessage()    {}
func (*BackupScheduleInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{44}
}
func (m *BackupScheduleInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInspectRequest.Merge(m, src)
}
func (m *BackupScheduleInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInspectRequest proto.InternalMessageInfo

func (m *BackupScheduleInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupScheduleInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define BackupScheduleInspectResponse struct
type BackupScheduleInspectResponse struct {
	BackupSchedule *BackupScheduleObject `protobuf:"bytes,1,opt,name=backup_schedule,json=backupSchedule,proto3" json:"backup_schedule,omitempty"`
}

func (m *BackupScheduleInspectResponse) Reset()         { *m = BackupScheduleInspectResponse{} }
func (m *BackupScheduleInspectResponse) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleInspectResponse) ProtoMessage()    {}
func (*BackupScheduleInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{45}
}
func (m *BackupScheduleInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleInspectResponse.Merge(m, src)
}
func (m *BackupScheduleInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleInspectResponse proto.InternalMessageInfo

func (m *BackupScheduleInspectResponse) GetBackupSchedule() *BackupScheduleObject {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

// Define BackupScheduleDeleteRequest struct
type BackupScheduleDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// delete_backups indicates whether the cloud backup files need to
	// be deleted or retained.
	DeleteBackups bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
}

func (m *BackupScheduleDeleteRequest) Reset()         { *m = BackupScheduleDeleteRequest{} }
func (m *BackupScheduleDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleDeleteRequest) ProtoMessage()    {}
func (*BackupScheduleDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{46}
}
func (m *BackupScheduleDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleDeleteRequest.Merge(m, src)
}
func (m *BackupScheduleDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleDeleteRequest proto.InternalMessageInfo

func (m *BackupScheduleDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupScheduleDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BackupScheduleDeleteRequest) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

// Define BackupScheduleDeleteResponse struct
type BackupScheduleDeleteResponse struct {
}

func (m *BackupScheduleDeleteResponse) Reset()         { *m = BackupScheduleDeleteResponse{} }
func (m *BackupScheduleDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*BackupScheduleDeleteResponse) ProtoMessage()    {}
func (*BackupScheduleDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{47}
}
func (m *BackupScheduleDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupScheduleDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupScheduleDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupScheduleDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupScheduleDeleteResponse.Merge(m, src)
}
func (m *BackupScheduleDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupScheduleDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupScheduleDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupScheduleDeleteResponse proto.InternalMessageInfo

// Define ClusterCreateRequest struct
type ClusterCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	PxConfig        *PXConfig `protobuf:"bytes,2,opt,name=px_config,json=pxConfig,proto3" json:"pxconfig"`
	Kubeconfig      string    `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig" secure:"true"`
	CloudCredential string    `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *ClusterCreateRequest) Reset()         { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()    {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{48}
}
func (m *ClusterCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCreateRequest.Merge(m, src)
}
func (m *ClusterCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCreateRequest proto.InternalMessageInfo

func (m *ClusterCreateRequest) GetPxConfig() *PXConfig {
	if m != nil {
		return m.PxConfig
	}
	return nil
}

func (m *ClusterCreateRequest) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ClusterCreateRequest) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

// Define ClusterCreateResponse struct
type ClusterCreateResponse struct {
}

func (m *ClusterCreateResponse) Reset()         { *m = ClusterCreateResponse{} }
func (m *ClusterCreateResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterCreateResponse) ProtoMessage()    {}
func (*ClusterCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{49}
}
func (m *ClusterCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCreateResponse.Merge(m, src)
}
func (m *ClusterCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCreateResponse proto.InternalMessageInfo

// Define ClusterUpdateRequest struct
type ClusterUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	PxConfig        *PXConfig `protobuf:"bytes,2,opt,name=px_config,json=pxConfig,proto3" json:"pxconfig"`
	Kubeconfig      string    `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig" secure:"true"`
	CloudCredential string    `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *ClusterUpdateRequest) Reset()         { *m = ClusterUpdateRequest{} }
func (m *ClusterUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterUpdateRequest) ProtoMessage()    {}
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{50}
}
func (m *ClusterUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterUpdateRequest.Merge(m, src)
}
func (m *ClusterUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterUpdateRequest proto.InternalMessageInfo

func (m *ClusterUpdateRequest) GetPxConfig() *PXConfig {
	if m != nil {
		return m.PxConfig
	}
	return nil
}

func (m *ClusterUpdateRequest) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ClusterUpdateRequest) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

// Define ClusterUpdateResponse struct
type ClusterUpdateResponse struct {
}

func (m *ClusterUpdateResponse) Reset()         { *m = ClusterUpdateResponse{} }
func (m *ClusterUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterUpdateResponse) ProtoMessage()    {}
func (*ClusterUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{51}
}
func (m *ClusterUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterUpdateResponse.Merge(m, src)
}
func (m *ClusterUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterUpdateResponse proto.InternalMessageInfo

// Define ClusterEnumerateRequest struct
type ClusterEnumerateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// label selectors for the object for filtering
	Labels         map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncludeSecrets bool              `protobuf:"varint,3,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
}

func (m *ClusterEnumerateRequest) Reset()         { *m = ClusterEnumerateRequest{} }
func (m *ClusterEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterEnumerateRequest) ProtoMessage()    {}
func (*ClusterEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{52}
}
func (m *ClusterEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterEnumerateRequest.Merge(m, src)
}
func (m *ClusterEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterEnumerateRequest proto.InternalMessageInfo

func (m *ClusterEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ClusterEnumerateRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ClusterEnumerateRequest) GetIncludeSecrets() bool {
	if m != nil {
		return m.IncludeSecrets
	}
	return false
}

// Define ClusterEnumerateResponse struct
type ClusterEnumerateResponse struct {
	Clusters []*ClusterObject `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (m *ClusterEnumerateResponse) Reset()         { *m = ClusterEnumerateResponse{} }
func (m *ClusterEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterEnumerateResponse) ProtoMessage()    {}
func (*ClusterEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{53}
}
func (m *ClusterEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterEnumerateResponse.Merge(m, src)
}
func (m *ClusterEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterEnumerateResponse proto.InternalMessageInfo

func (m *ClusterEnumerateResponse) GetClusters() []*ClusterObject {
	if m != nil {
		return m.Clusters
	}
	return nil
}

// Define ClusterInspectRequest struct
type ClusterInspectRequest struct {
	OrgId          string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IncludeSecrets bool   `protobuf:"varint,3,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
}

func (m *ClusterInspectRequest) Reset()         { *m = ClusterInspectRequest{} }
func (m *ClusterInspectRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterInspectRequest) ProtoMessage()    {}
func (*ClusterInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{54}
}
func (m *ClusterInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInspectRequest.Merge(m, src)
}
func (m *ClusterInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInspectRequest proto.InternalMessageInfo

func (m *ClusterInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ClusterInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterInspectRequest) GetIncludeSecrets() bool {
	if m != nil {
		return m.IncludeSecrets
	}
	return false
}

// Define ClusterInspectResponse struct
type ClusterInspectResponse struct {
	Cluster *ClusterObject `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (m *ClusterInspectResponse) Reset()         { *m = ClusterInspectResponse{} }
func (m *ClusterInspectResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterInspectResponse) ProtoMessage()    {}
func (*ClusterInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{55}
}
func (m *ClusterInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInspectResponse.Merge(m, src)
}
func (m *ClusterInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInspectResponse proto.InternalMessageInfo

func (m *ClusterInspectResponse) GetCluster() *ClusterObject {
	if m != nil {
		return m.Cluster
	}
	return nil
}

// Define ClusterDeleteRequest struct
type ClusterDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// delete_backups indicates whether the backup related to cluster need to
	// be deleted or retained.
	DeleteBackups bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
	// delete_restores indicates whether the restore related to cluster  need to
	// be deleted or retained.
	DeleteRestores bool `protobuf:"varint,4,opt,name=delete_restores,json=deleteRestores,proto3" json:"delete_restores,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()         { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()    {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{56}
}
func (m *ClusterDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDeleteRequest.Merge(m, src)
}
func (m *ClusterDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDeleteRequest proto.InternalMessageInfo

func (m *ClusterDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ClusterDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDeleteRequest) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

func (m *ClusterDeleteRequest) GetDeleteRestores() bool {
	if m != nil {
		return m.DeleteRestores
	}
	return false
}

// Define ClusterInspectResponse struct
type ClusterDeleteResponse struct {
}

func (m *ClusterDeleteResponse) Reset()         { *m = ClusterDeleteResponse{} }
func (m *ClusterDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterDeleteResponse) ProtoMessage()    {}
func (*ClusterDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{57}
}
func (m *ClusterDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDeleteResponse.Merge(m, src)
}
func (m *ClusterDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDeleteResponse proto.InternalMessageInfo

// Define CloudCredentialCreateRequest struct
type CloudCredentialCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	CloudCredential *CloudCredentialInfo `protobuf:"bytes,2,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *CloudCredentialCreateRequest) Reset()         { *m = CloudCredentialCreateRequest{} }
func (m *CloudCredentialCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialCreateRequest) ProtoMessage()    {}
func (*CloudCredentialCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{58}
}
func (m *CloudCredentialCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialCreateRequest.Merge(m, src)
}
func (m *CloudCredentialCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialCreateRequest proto.InternalMessageInfo

func (m *CloudCredentialCreateRequest) GetCloudCredential() *CloudCredentialInfo {
	if m != nil {
		return m.CloudCredential
	}
	return nil
}

// Define CloudCredentialCreateResponse struct
type CloudCredentialCreateResponse struct {
}

func (m *CloudCredentialCreateResponse) Reset()         { *m = CloudCredentialCreateResponse{} }
func (m *CloudCredentialCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialCreateResponse) ProtoMessage()    {}
func (*CloudCredentialCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{59}
}
func (m *CloudCredentialCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialCreateResponse.Merge(m, src)
}
func (m *CloudCredentialCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialCreateResponse proto.InternalMessageInfo

// Define CloudCredentialUpdateRequest struct
type CloudCredentialUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	CloudCredential *CloudCredentialInfo `protobuf:"bytes,2,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *CloudCredentialUpdateRequest) Reset()         { *m = CloudCredentialUpdateRequest{} }
func (m *CloudCredentialUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialUpdateRequest) ProtoMessage()    {}
func (*CloudCredentialUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{60}
}
func (m *CloudCredentialUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialUpdateRequest.Merge(m, src)
}
func (m *CloudCredentialUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialUpdateRequest proto.InternalMessageInfo

func (m *CloudCredentialUpdateRequest) GetCloudCredential() *CloudCredentialInfo {
	if m != nil {
		return m.CloudCredential
	}
	return nil
}

// Define CloudCredentialUpdateResponse struct
type CloudCredentialUpdateResponse struct {
}

func (m *CloudCredentialUpdateResponse) Reset()         { *m = CloudCredentialUpdateResponse{} }
func (m *CloudCredentialUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialUpdateResponse) ProtoMessage()    {}
func (*CloudCredentialUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{61}
}
func (m *CloudCredentialUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialUpdateResponse.Merge(m, src)
}
func (m *CloudCredentialUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialUpdateResponse proto.InternalMessageInfo

// Define CloudCredentialEnumerateRequest struct
type CloudCredentialEnumerateRequest struct {
	OrgId          string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	IncludeSecrets bool   `protobuf:"varint,2,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
}

func (m *CloudCredentialEnumerateRequest) Reset()         { *m = CloudCredentialEnumerateRequest{} }
func (m *CloudCredentialEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialEnumerateRequest) ProtoMessage()    {}
func (*CloudCredentialEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{62}
}
func (m *CloudCredentialEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialEnumerateRequest.Merge(m, src)
}
func (m *CloudCredentialEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialEnumerateRequest proto.InternalMessageInfo

func (m *CloudCredentialEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CloudCredentialEnumerateRequest) GetIncludeSecrets() bool {
	if m != nil {
		return m.IncludeSecrets
	}
	return false
}

// Define CloudCredentialEnumerateResponse struct
type CloudCredentialEnumerateResponse struct {
	CloudCredentials []*CloudCredentialObject `protobuf:"bytes,1,rep,name=cloud_credentials,json=cloudCredentials,proto3" json:"cloud_credentials,omitempty"`
}

func (m *CloudCredentialEnumerateResponse) Reset()         { *m = CloudCredentialEnumerateResponse{} }
func (m *CloudCredentialEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialEnumerateResponse) ProtoMessage()    {}
func (*CloudCredentialEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{63}
}
func (m *CloudCredentialEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialEnumerateResponse.Merge(m, src)
}
func (m *CloudCredentialEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialEnumerateResponse proto.InternalMessageInfo

func (m *CloudCredentialEnumerateResponse) GetCloudCredentials() []*CloudCredentialObject {
	if m != nil {
		return m.CloudCredentials
	}
	return nil
}

// Define CloudCredentialInspectRequest struct
type CloudCredentialInspectRequest struct {
	OrgId          string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IncludeSecrets bool   `protobuf:"varint,3,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
}

func (m *CloudCredentialInspectRequest) Reset()         { *m = CloudCredentialInspectRequest{} }
func (m *CloudCredentialInspectRequest) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialInspectRequest) ProtoMessage()    {}
func (*CloudCredentialInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{64}
}
func (m *CloudCredentialInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialInspectRequest.Merge(m, src)
}
func (m *CloudCredentialInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialInspectRequest proto.InternalMessageInfo

func (m *CloudCredentialInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CloudCredentialInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloudCredentialInspectRequest) GetIncludeSecrets() bool {
	if m != nil {
		return m.IncludeSecrets
	}
	return false
}

// Define CloudCredentialInspectResponse struct
type CloudCredentialInspectResponse struct {
	CloudCredential *CloudCredentialObject `protobuf:"bytes,1,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *CloudCredentialInspectResponse) Reset()         { *m = CloudCredentialInspectResponse{} }
func (m *CloudCredentialInspectResponse) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialInspectResponse) ProtoMessage()    {}
func (*CloudCredentialInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{65}
}
func (m *CloudCredentialInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialInspectResponse.Merge(m, src)
}
func (m *CloudCredentialInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialInspectResponse proto.InternalMessageInfo

func (m *CloudCredentialInspectResponse) GetCloudCredential() *CloudCredentialObject {
	if m != nil {
		return m.CloudCredential
	}
	return nil
}

// Define CloudCredentialDeleteRequest struct
type CloudCredentialDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudCredentialDeleteRequest) Reset()         { *m = CloudCredentialDeleteRequest{} }
func (m *CloudCredentialDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialDeleteRequest) ProtoMessage()    {}
func (*CloudCredentialDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{66}
}
func (m *CloudCredentialDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialDeleteRequest.Merge(m, src)
}
func (m *CloudCredentialDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialDeleteRequest proto.InternalMessageInfo

func (m *CloudCredentialDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CloudCredentialDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define CloudCredentialInspectResponse struct
type CloudCredentialDeleteResponse struct {
}

func (m *CloudCredentialDeleteResponse) Reset()         { *m = CloudCredentialDeleteResponse{} }
func (m *CloudCredentialDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CloudCredentialDeleteResponse) ProtoMessage()    {}
func (*CloudCredentialDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{67}
}
func (m *CloudCredentialDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudCredentialDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudCredentialDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudCredentialDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudCredentialDeleteResponse.Merge(m, src)
}
func (m *CloudCredentialDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudCredentialDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudCredentialDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudCredentialDeleteResponse proto.InternalMessageInfo

// Define BackupLocationCreateRequest struct
type BackupLocationCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	BackupLocation  *BackupLocationInfo `protobuf:"bytes,2,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
}

func (m *BackupLocationCreateRequest) Reset()         { *m = BackupLocationCreateRequest{} }
func (m *BackupLocationCreateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationCreateRequest) ProtoMessage()    {}
func (*BackupLocationCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{68}
}
func (m *BackupLocationCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationCreateRequest.Merge(m, src)
}
func (m *BackupLocationCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationCreateRequest proto.InternalMessageInfo

func (m *BackupLocationCreateRequest) GetBackupLocation() *BackupLocationInfo {
	if m != nil {
		return m.BackupLocation
	}
	return nil
}

// Define BackupLocationCreateResponse struct
type BackupLocationCreateResponse struct {
}

func (m *BackupLocationCreateResponse) Reset()         { *m = BackupLocationCreateResponse{} }
func (m *BackupLocationCreateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationCreateResponse) ProtoMessage()    {}
func (*BackupLocationCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{69}
}
func (m *BackupLocationCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationCreateResponse.Merge(m, src)
}
func (m *BackupLocationCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationCreateResponse proto.InternalMessageInfo

// Define BackupLocationUpdateRequest struct
type BackupLocationUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	BackupLocation  *BackupLocationInfo `protobuf:"bytes,2,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
}

func (m *BackupLocationUpdateRequest) Reset()         { *m = BackupLocationUpdateRequest{} }
func (m *BackupLocationUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationUpdateRequest) ProtoMessage()    {}
func (*BackupLocationUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{70}
}
func (m *BackupLocationUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationUpdateRequest.Merge(m, src)
}
func (m *BackupLocationUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationUpdateRequest proto.InternalMessageInfo

func (m *BackupLocationUpdateRequest) GetBackupLocation() *BackupLocationInfo {
	if m != nil {
		return m.BackupLocation
	}
	return nil
}

// Define BackupLocationUpdateResponse struct
type BackupLocationUpdateResponse struct {
}

func (m *BackupLocationUpdateResponse) Reset()         { *m = BackupLocationUpdateResponse{} }
func (m *BackupLocationUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationUpdateResponse) ProtoMessage()    {}
func (*BackupLocationUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{71}
}
func (m *BackupLocationUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationUpdateResponse.Merge(m, src)
}
func (m *BackupLocationUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationUpdateResponse proto.InternalMessageInfo

// Define BackupLocationEnumerateRequest struct
type BackupLocationEnumerateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// label selectors for the object for filtering
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BackupLocationEnumerateRequest) Reset()         { *m = BackupLocationEnumerateRequest{} }
func (m *BackupLocationEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationEnumerateRequest) ProtoMessage()    {}
func (*BackupLocationEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{72}
}
func (m *BackupLocationEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationEnumerateRequest.Merge(m, src)
}
func (m *BackupLocationEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationEnumerateRequest proto.InternalMessageInfo

func (m *BackupLocationEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupLocationEnumerateRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Define BackupLocationEnumerateResponse struct
type BackupLocationEnumerateResponse struct {
	BackupLocations []*BackupLocationObject `protobuf:"bytes,1,rep,name=backup_locations,json=backupLocations,proto3" json:"backup_locations,omitempty"`
}

func (m *BackupLocationEnumerateResponse) Reset()         { *m = BackupLocationEnumerateResponse{} }
func (m *BackupLocationEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationEnumerateResponse) ProtoMessage()    {}
func (*BackupLocationEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{73}
}
func (m *BackupLocationEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationEnumerateResponse.Merge(m, src)
}
func (m *BackupLocationEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationEnumerateResponse proto.InternalMessageInfo

func (m *BackupLocationEnumerateResponse) GetBackupLocations() []*BackupLocationObject {
	if m != nil {
		return m.BackupLocations
	}
	return nil
}

// Define BackupLocationInspectRequest struct
type BackupLocationInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BackupLocationInspectRequest) Reset()         { *m = BackupLocationInspectRequest{} }
func (m *BackupLocationInspectRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationInspectRequest) ProtoMessage()    {}
func (*BackupLocationInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{74}
}
func (m *BackupLocationInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationInspectRequest.Merge(m, src)
}
func (m *BackupLocationInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationInspectRequest proto.InternalMessageInfo

func (m *BackupLocationInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupLocationInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define BackupLocationInspectResponse struct
type BackupLocationInspectResponse struct {
	BackupLocation *BackupLocationObject `protobuf:"bytes,1,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
}

func (m *BackupLocationInspectResponse) Reset()         { *m = BackupLocationInspectResponse{} }
func (m *BackupLocationInspectResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationInspectResponse) ProtoMessage()    {}
func (*BackupLocationInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{75}
}
func (m *BackupLocationInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationInspectResponse.Merge(m, src)
}
func (m *BackupLocationInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationInspectResponse proto.InternalMessageInfo

func (m *BackupLocationInspectResponse) GetBackupLocation() *BackupLocationObject {
	if m != nil {
		return m.BackupLocation
	}
	return nil
}

// Define BackupLocationDeleteRequest struct
type BackupLocationDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// delete_backups indicates whether the cloud backup files need to
	// be deleted or retained.
	DeleteBackups bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups,proto3" json:"delete_backups,omitempty"`
}

func (m *BackupLocationDeleteRequest) Reset()         { *m = BackupLocationDeleteRequest{} }
func (m *BackupLocationDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationDeleteRequest) ProtoMessage()    {}
func (*BackupLocationDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{76}
}
func (m *BackupLocationDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationDeleteRequest.Merge(m, src)
}
func (m *BackupLocationDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationDeleteRequest proto.InternalMessageInfo

func (m *BackupLocationDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupLocationDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BackupLocationDeleteRequest) GetDeleteBackups() bool {
	if m != nil {
		return m.DeleteBackups
	}
	return false
}

// Define BackupLocationDeleteResponse struct
type BackupLocationDeleteResponse struct {
}

func (m *BackupLocationDeleteResponse) Reset()         { *m = BackupLocationDeleteResponse{} }
func (m *BackupLocationDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationDeleteResponse) ProtoMessage()    {}
func (*BackupLocationDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{77}
}
func (m *BackupLocationDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationDeleteResponse.Merge(m, src)
}
func (m *BackupLocationDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationDeleteResponse proto.InternalMessageInfo

// Define BackupLocationValidateRequest struct
type BackupLocationValidateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BackupLocationValidateRequest) Reset()         { *m = BackupLocationValidateRequest{} }
func (m *BackupLocationValidateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupLocationValidateRequest) ProtoMessage()    {}
func (*BackupLocationValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{78}
}
func (m *BackupLocationValidateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationValidateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationValidateRequest.Merge(m, src)
}
func (m *BackupLocationValidateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationValidateRequest proto.InternalMessageInfo

func (m *BackupLocationValidateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *BackupLocationValidateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define BackupLocationValidateResponse struct
type BackupLocationValidateResponse struct {
}

func (m *BackupLocationValidateResponse) Reset()         { *m = BackupLocationValidateResponse{} }
func (m *BackupLocationValidateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupLocationValidateResponse) ProtoMessage()    {}
func (*BackupLocationValidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{79}
}
func (m *BackupLocationValidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupLocationValidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupLocationValidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupLocationValidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupLocationValidateResponse.Merge(m, src)
}
func (m *BackupLocationValidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupLocationValidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupLocationValidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupLocationValidateResponse proto.InternalMessageInfo

type MetricsInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *MetricsInspectRequest) Reset()         { *m = MetricsInspectRequest{} }
func (m *MetricsInspectRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsInspectRequest) ProtoMessage()    {}
func (*MetricsInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{80}
}
func (m *MetricsInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsInspectRequest.Merge(m, src)
}
func (m *MetricsInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetricsInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsInspectRequest proto.InternalMessageInfo

func (m *MetricsInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type MetricsInspectResponse struct {
	Stats []*MetricsInspectResponse_Stats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *MetricsInspectResponse) Reset()         { *m = MetricsInspectResponse{} }
func (m *MetricsInspectResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsInspectResponse) ProtoMessage()    {}
func (*MetricsInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{81}
}
func (m *MetricsInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsInspectResponse.Merge(m, src)
}
func (m *MetricsInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetricsInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsInspectResponse proto.InternalMessageInfo

func (m *MetricsInspectResponse) GetStats() []*MetricsInspectResponse_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type MetricsInspectResponse_Stats struct {
	Cluster         string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	NumNamespaces   uint64 `protobuf:"varint,2,opt,name=num_namespaces,json=numNamespaces,proto3" json:"num_namespaces,omitempty"`
	TotalBackupSize uint64 `protobuf:"varint,3,opt,name=total_backup_size,json=totalBackupSize,proto3" json:"total_backup_size,omitempty"`
	NumSchedules    uint64 `protobuf:"varint,4,opt,name=num_schedules,json=numSchedules,proto3" json:"num_schedules,omitempty"`
}

func (m *MetricsInspectResponse_Stats) Reset()         { *m = MetricsInspectResponse_Stats{} }
func (m *MetricsInspectResponse_Stats) String() string { return proto.CompactTextString(m) }
func (*MetricsInspectResponse_Stats) ProtoMessage()    {}
func (*MetricsInspectResponse_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{81, 0}
}
func (m *MetricsInspectResponse_Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsInspectResponse_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsInspectResponse_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsInspectResponse_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsInspectResponse_Stats.Merge(m, src)
}
func (m *MetricsInspectResponse_Stats) XXX_Size() int {
	return m.Size()
}
func (m *MetricsInspectResponse_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsInspectResponse_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsInspectResponse_Stats proto.InternalMessageInfo

func (m *MetricsInspectResponse_Stats) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *MetricsInspectResponse_Stats) GetNumNamespaces() uint64 {
	if m != nil {
		return m.NumNamespaces
	}
	return 0
}

func (m *MetricsInspectResponse_Stats) GetTotalBackupSize() uint64 {
	if m != nil {
		return m.TotalBackupSize
	}
	return 0
}

func (m *MetricsInspectResponse_Stats) GetNumSchedules() uint64 {
	if m != nil {
		return m.NumSchedules
	}
	return 0
}

// Request message structure for backup create
type BackupCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	// Name or UID + orgid of BackupLocation
	BackupLocation string `protobuf:"bytes,2,opt,name=backup_location,json=backupLocation,proto3" json:"backup_location,omitempty"`
	// Name or UID of Cluster
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespaces to backup. Only an admin can provide multiple namespaces
	Namespaces []string `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Label selectors to choose resources
	LabelSelectors map[string]string `protobuf:"bytes,5,rep,name=label_selectors,json=labelSelectors,proto3" json:"label_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pre check rule to run before backup is started
	PreExecRule string `protobuf:"bytes,6,opt,name=pre_exec_rule,json=preExecRule,proto3" json:"pre_exec_rule,omitempty"`
	// Post check rule to run after backup is completed
	PostExecRule string `protobuf:"bytes,7,opt,name=post_exec_rule,json=postExecRule,proto3" json:"post_exec_rule,omitempty"`
	// List of resources to backup (optional)
	IncludeResources []*ResourceInfo `protobuf:"bytes,8,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *BackupCreateRequest) Reset()         { *m = BackupCreateRequest{} }
func (m *BackupCreateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupCreateRequest) ProtoMessage()    {}
func (*BackupCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{82}
}
func (m *BackupCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupCreateRequest.Merge(m, src)
}
func (m *BackupCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupCreateRequest proto.InternalMessageInfo

func (m *BackupCreateRequest) GetBackupLocation() string {
	if m != nil {
		return m.BackupLocation
	}
	return ""
}

func (m *BackupCreateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BackupCreateRequest) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *BackupCreateRequest) GetLabelSelectors() map[string]string {
	if m != nil {
		return m.LabelSelectors
	}
	return nil
}

func (m *BackupCreateRequest) GetPreExecRule() string {
	if m != nil {
		return m.PreExecRule
	}
	return ""
}

func (m *BackupCreateRequest) GetPostExecRule() string {
	if m != nil {
		return m.PostExecRule
	}
	return ""
}

func (m *BackupCreateRequest) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

// Response message structure for backup create
type BackupCreateResponse struct {
}

func (m *BackupCreateResponse) Reset()         { *m = BackupCreateResponse{} }
func (m *BackupCreateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupCreateResponse) ProtoMessage()    {}
func (*BackupCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{83}
}
func (m *BackupCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupCreateResponse.Merge(m, src)
}
func (m *BackupCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupCreateResponse proto.InternalMessageInfo

// Define BackupUpdateRequest struct
type BackupUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	// Reference to cloud credential object used for backup
	CloudCredential string `protobuf:"bytes,2,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (m *BackupUpdateRequest) Reset()         { *m = BackupUpdateRequest{} }
func (m *BackupUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupUpdateRequest) ProtoMessage()    {}
func (*BackupUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{84}
}
func (m *BackupUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupUpdateRequest.Merge(m, src)
}
func (m *BackupUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupUpdateRequest proto.InternalMessageInfo

func (m *BackupUpdateRequest) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

// Define BackupUpdateResponse struct
type BackupUpdateResponse struct {
}

func (m *BackupUpdateResponse) Reset()         { *m = BackupUpdateResponse{} }
func (m *BackupUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupUpdateResponse) ProtoMessage()    {}
func (*BackupUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{85}
}
func (m *BackupUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupUpdateResponse.Merge(m, src)
}
func (m *BackupUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupUpdateResponse proto.InternalMessageInfo

//  Request message strcuture for enumerate object
type BackupEnumerateRequest struct {
	// Organization id
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Optional arguments for enumeration
	*EnumerateOptions `protobuf:"bytes,2,opt,name=enumerate_options,json=enumerateOptions,proto3,embedded=enumerate_options" json:"enumerate_options,omitempty"`
}

func (m *BackupEnumerateRequest) Reset()         { *m = BackupEnumerateRequest{} }
func (m *BackupEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*BackupEnumerateRequest) ProtoMessage()    {}
func (*BackupEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{86}
}
func (m *BackupEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupEnumerateRequest.Merge(m, src)
}
func (m *BackupEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupEnumerateRequest proto.InternalMessageInfo

func (m *BackupEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

//  Response message structure for enumerate create
type BackupEnumerateResponse struct {
	Backups    []*BackupObject `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	TotalCount uint64          `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Complete   bool            `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (m *BackupEnumerateResponse) Reset()         { *m = BackupEnumerateResponse{} }
func (m *BackupEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*BackupEnumerateResponse) ProtoMessage()    {}
func (*BackupEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{87}
}
func (m *BackupEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupEnumerateResponse.Merge(m, src)
}
func (m *BackupEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupEnumerateResponse proto.InternalMessageInfo

func (m *BackupEnumerateResponse) GetBackups() []*BackupObject {
	if m != nil {
		return m.Backups
	}
	return nil
}

func (m *BackupEnumerateResponse) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *BackupEnumerateResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

// Request message strcuture for object inspect
type BackupInspectRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *BackupInspectRequest) Reset()         { *m = BackupInspectRequest{} }
func (m *BackupInspectRequest) String() string { return proto.CompactTextString(m) }
func (*BackupInspectRequest) ProtoMessage()    {}
func (*BackupInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{88}
}
func (m *BackupInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInspectRequest.Merge(m, src)
}
func (m *BackupInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInspectRequest proto.InternalMessageInfo

func (m *BackupInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BackupInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

// Response message strcuture for object inspect
type BackupInspectResponse struct {
	Backup *BackupObject `protobuf:"bytes,1,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (m *BackupInspectResponse) Reset()         { *m = BackupInspectResponse{} }
func (m *BackupInspectResponse) String() string { return proto.CompactTextString(m) }
func (*BackupInspectResponse) ProtoMessage()    {}
func (*BackupInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{89}
}
func (m *BackupInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupInspectResponse.Merge(m, src)
}
func (m *BackupInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupInspectResponse proto.InternalMessageInfo

func (m *BackupInspectResponse) GetBackup() *BackupObject {
	if m != nil {
		return m.Backup
	}
	return nil
}

// Request message strcuture for object delete
type BackupDeleteRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *BackupDeleteRequest) Reset()         { *m = BackupDeleteRequest{} }
func (m *BackupDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*BackupDeleteRequest) ProtoMessage()    {}
func (*BackupDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{90}
}
func (m *BackupDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupDeleteRequest.Merge(m, src)
}
func (m *BackupDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *BackupDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupDeleteRequest proto.InternalMessageInfo

func (m *BackupDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BackupDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

// Response message strcuture for object delete
type BackupDeleteResponse struct {
}

func (m *BackupDeleteResponse) Reset()         { *m = BackupDeleteResponse{} }
func (m *BackupDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*BackupDeleteResponse) ProtoMessage()    {}
func (*BackupDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{91}
}
func (m *BackupDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupDeleteResponse.Merge(m, src)
}
func (m *BackupDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *BackupDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupDeleteResponse proto.InternalMessageInfo

// Define RestoreCreateRequest struct
type RestoreCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	// uid or name of backup
	Backup string `protobuf:"bytes,2,opt,name=backup,proto3" json:"backup,omitempty"`
	// uid or name of cluster
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// mapping of the namespaces from the backup to which restore should be done
	NamespaceMapping map[string]string `protobuf:"bytes,4,rep,name=namespace_mapping,json=namespaceMapping,proto3" json:"namespace_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// replace policy to use if the resource already exists
	ReplacePolicy ReplacePolicy_Type `protobuf:"varint,5,opt,name=replace_policy,json=replacePolicy,proto3,enum=ReplacePolicy_Type" json:"replace_policy,omitempty"`
	// optional resource types to be restored (eg Jobs)
	IncludeOptionalResourceTypes []string `protobuf:"bytes,6,rep,name=include_optional_resource_types,json=includeOptionalResourceTypes,proto3" json:"include_optional_resource_types,omitempty"`
	// List of resources to restore (optional)
	IncludeResources []*ResourceInfo `protobuf:"bytes,7,rep,name=include_resources,json=includeResources,proto3" json:"include_resources,omitempty"`
}

func (m *RestoreCreateRequest) Reset()         { *m = RestoreCreateRequest{} }
func (m *RestoreCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreCreateRequest) ProtoMessage()    {}
func (*RestoreCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{92}
}
func (m *RestoreCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreCreateRequest.Merge(m, src)
}
func (m *RestoreCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreCreateRequest proto.InternalMessageInfo

func (m *RestoreCreateRequest) GetBackup() string {
	if m != nil {
		return m.Backup
	}
	return ""
}

func (m *RestoreCreateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RestoreCreateRequest) GetNamespaceMapping() map[string]string {
	if m != nil {
		return m.NamespaceMapping
	}
	return nil
}

func (m *RestoreCreateRequest) GetReplacePolicy() ReplacePolicy_Type {
	if m != nil {
		return m.ReplacePolicy
	}
	return ReplacePolicy_Invalid
}

func (m *RestoreCreateRequest) GetIncludeOptionalResourceTypes() []string {
	if m != nil {
		return m.IncludeOptionalResourceTypes
	}
	return nil
}

func (m *RestoreCreateRequest) GetIncludeResources() []*ResourceInfo {
	if m != nil {
		return m.IncludeResources
	}
	return nil
}

// Define RestoreCreateResponse struct
type RestoreCreateResponse struct {
}

func (m *RestoreCreateResponse) Reset()         { *m = RestoreCreateResponse{} }
func (m *RestoreCreateResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreCreateResponse) ProtoMessage()    {}
func (*RestoreCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{93}
}
func (m *RestoreCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreCreateResponse.Merge(m, src)
}
func (m *RestoreCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreCreateResponse proto.InternalMessageInfo

// Define RestoreUpdateRequest struct
type RestoreUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
}

func (m *RestoreUpdateRequest) Reset()         { *m = RestoreUpdateRequest{} }
func (m *RestoreUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreUpdateRequest) ProtoMessage()    {}
func (*RestoreUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{94}
}
func (m *RestoreUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreUpdateRequest.Merge(m, src)
}
func (m *RestoreUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreUpdateRequest proto.InternalMessageInfo

// Define RestoreUpdateResponse struct
type RestoreUpdateResponse struct {
}

func (m *RestoreUpdateResponse) Reset()         { *m = RestoreUpdateResponse{} }
func (m *RestoreUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreUpdateResponse) ProtoMessage()    {}
func (*RestoreUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{95}
}
func (m *RestoreUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreUpdateResponse.Merge(m, src)
}
func (m *RestoreUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreUpdateResponse proto.InternalMessageInfo

// Define RestoreEnumerateRequest struct
type RestoreEnumerateRequest struct {
	// Organization id
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Optional arguments for enumeration
	*EnumerateOptions `protobuf:"bytes,2,opt,name=enumerate_options,json=enumerateOptions,proto3,embedded=enumerate_options" json:"enumerate_options,omitempty"`
}

func (m *RestoreEnumerateRequest) Reset()         { *m = RestoreEnumerateRequest{} }
func (m *RestoreEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreEnumerateRequest) ProtoMessage()    {}
func (*RestoreEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{96}
}
func (m *RestoreEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreEnumerateRequest.Merge(m, src)
}
func (m *RestoreEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreEnumerateRequest proto.InternalMessageInfo

func (m *RestoreEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

// Define RestoreEnumerateResponse struct
type RestoreEnumerateResponse struct {
	Restores   []*RestoreObject `protobuf:"bytes,1,rep,name=restores,proto3" json:"restores,omitempty"`
	TotalCount uint64           `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Complete   bool             `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (m *RestoreEnumerateResponse) Reset()         { *m = RestoreEnumerateResponse{} }
func (m *RestoreEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreEnumerateResponse) ProtoMessage()    {}
func (*RestoreEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{97}
}
func (m *RestoreEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreEnumerateResponse.Merge(m, src)
}
func (m *RestoreEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreEnumerateResponse proto.InternalMessageInfo

func (m *RestoreEnumerateResponse) GetRestores() []*RestoreObject {
	if m != nil {
		return m.Restores
	}
	return nil
}

func (m *RestoreEnumerateResponse) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *RestoreEnumerateResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

// Define RestoreInspectRequest struct
type RestoreInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RestoreInspectRequest) Reset()         { *m = RestoreInspectRequest{} }
func (m *RestoreInspectRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreInspectRequest) ProtoMessage()    {}
func (*RestoreInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{98}
}
func (m *RestoreInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInspectRequest.Merge(m, src)
}
func (m *RestoreInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInspectRequest proto.InternalMessageInfo

func (m *RestoreInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *RestoreInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define RestoreInspectResponse struct
type RestoreInspectResponse struct {
	Restore *RestoreObject `protobuf:"bytes,1,opt,name=restore,proto3" json:"restore,omitempty"`
}

func (m *RestoreInspectResponse) Reset()         { *m = RestoreInspectResponse{} }
func (m *RestoreInspectResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreInspectResponse) ProtoMessage()    {}
func (*RestoreInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{99}
}
func (m *RestoreInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreInspectResponse.Merge(m, src)
}
func (m *RestoreInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreInspectResponse proto.InternalMessageInfo

func (m *RestoreInspectResponse) GetRestore() *RestoreObject {
	if m != nil {
		return m.Restore
	}
	return nil
}

// Define RestoreDeleteRequest struct
type RestoreDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RestoreDeleteRequest) Reset()         { *m = RestoreDeleteRequest{} }
func (m *RestoreDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreDeleteRequest) ProtoMessage()    {}
func (*RestoreDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{100}
}
func (m *RestoreDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreDeleteRequest.Merge(m, src)
}
func (m *RestoreDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *RestoreDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreDeleteRequest proto.InternalMessageInfo

func (m *RestoreDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *RestoreDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define RestoreDeleteResponse struct
type RestoreDeleteResponse struct {
}

func (m *RestoreDeleteResponse) Reset()         { *m = RestoreDeleteResponse{} }
func (m *RestoreDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RestoreDeleteResponse) ProtoMessage()    {}
func (*RestoreDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{101}
}
func (m *RestoreDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreDeleteResponse.Merge(m, src)
}
func (m *RestoreDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *RestoreDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreDeleteResponse proto.InternalMessageInfo

// Define OrganizationCreateRequest struct
type OrganizationCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
}

func (m *OrganizationCreateRequest) Reset()         { *m = OrganizationCreateRequest{} }
func (m *OrganizationCreateRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationCreateRequest) ProtoMessage()    {}
func (*OrganizationCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{102}
}
func (m *OrganizationCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationCreateRequest.Merge(m, src)
}
func (m *OrganizationCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationCreateRequest proto.InternalMessageInfo

// Define OrganizationCreateResponse struct
type OrganizationCreateResponse struct {
}

func (m *OrganizationCreateResponse) Reset()         { *m = OrganizationCreateResponse{} }
func (m *OrganizationCreateResponse) String() string { return proto.CompactTextString(m) }
func (*OrganizationCreateResponse) ProtoMessage()    {}
func (*OrganizationCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{103}
}
func (m *OrganizationCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationCreateResponse.Merge(m, src)
}
func (m *OrganizationCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationCreateResponse proto.InternalMessageInfo

// Define OrganizationEnumerateRequest struct
type OrganizationEnumerateRequest struct {
}

func (m *OrganizationEnumerateRequest) Reset()         { *m = OrganizationEnumerateRequest{} }
func (m *OrganizationEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationEnumerateRequest) ProtoMessage()    {}
func (*OrganizationEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{104}
}
func (m *OrganizationEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationEnumerateRequest.Merge(m, src)
}
func (m *OrganizationEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationEnumerateRequest proto.InternalMessageInfo

// Define OrganizationEnumerateResponse struct
type OrganizationEnumerateResponse struct {
	Organizations []*OrganizationObject `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (m *OrganizationEnumerateResponse) Reset()         { *m = OrganizationEnumerateResponse{} }
func (m *OrganizationEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*OrganizationEnumerateResponse) ProtoMessage()    {}
func (*OrganizationEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{105}
}
func (m *OrganizationEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationEnumerateResponse.Merge(m, src)
}
func (m *OrganizationEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationEnumerateResponse proto.InternalMessageInfo

func (m *OrganizationEnumerateResponse) GetOrganizations() []*OrganizationObject {
	if m != nil {
		return m.Organizations
	}
	return nil
}

// Define OrganizationInspectRequest struct
type OrganizationInspectRequest struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *OrganizationInspectRequest) Reset()         { *m = OrganizationInspectRequest{} }
func (m *OrganizationInspectRequest) String() string { return proto.CompactTextString(m) }
func (*OrganizationInspectRequest) ProtoMessage()    {}
func (*OrganizationInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{106}
}
func (m *OrganizationInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationInspectRequest.Merge(m, src)
}
func (m *OrganizationInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationInspectRequest proto.InternalMessageInfo

func (m *OrganizationInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define OrganizationInspectResponse struct
type OrganizationInspectResponse struct {
	Organization *OrganizationObject `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *OrganizationInspectResponse) Reset()         { *m = OrganizationInspectResponse{} }
func (m *OrganizationInspectResponse) String() string { return proto.CompactTextString(m) }
func (*OrganizationInspectResponse) ProtoMessage()    {}
func (*OrganizationInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{107}
}
func (m *OrganizationInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationInspectResponse.Merge(m, src)
}
func (m *OrganizationInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationInspectResponse proto.InternalMessageInfo

func (m *OrganizationInspectResponse) GetOrganization() *OrganizationObject {
	if m != nil {
		return m.Organization
	}
	return nil
}

// Request message for creating rules
type RuleCreateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	RulesInfo       *RulesInfo `protobuf:"bytes,2,opt,name=rules_info,json=rulesInfo,proto3" json:"rules_info,omitempty"`
}

func (m *RuleCreateRequest) Reset()         { *m = RuleCreateRequest{} }
func (m *RuleCreateRequest) String() string { return proto.CompactTextString(m) }
func (*RuleCreateRequest) ProtoMessage()    {}
func (*RuleCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{108}
}
func (m *RuleCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleCreateRequest.Merge(m, src)
}
func (m *RuleCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleCreateRequest proto.InternalMessageInfo

func (m *RuleCreateRequest) GetRulesInfo() *RulesInfo {
	if m != nil {
		return m.RulesInfo
	}
	return nil
}

type RuleCreateResponse struct {
}

func (m *RuleCreateResponse) Reset()         { *m = RuleCreateResponse{} }
func (m *RuleCreateResponse) String() string { return proto.CompactTextString(m) }
func (*RuleCreateResponse) ProtoMessage()    {}
func (*RuleCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{109}
}
func (m *RuleCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleCreateResponse.Merge(m, src)
}
func (m *RuleCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleCreateResponse proto.InternalMessageInfo

type RuleUpdateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	RulesInfo       *RulesInfo `protobuf:"bytes,2,opt,name=rules_info,json=rulesInfo,proto3" json:"rules_info,omitempty"`
}

func (m *RuleUpdateRequest) Reset()         { *m = RuleUpdateRequest{} }
func (m *RuleUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RuleUpdateRequest) ProtoMessage()    {}
func (*RuleUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{110}
}
func (m *RuleUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleUpdateRequest.Merge(m, src)
}
func (m *RuleUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleUpdateRequest proto.InternalMessageInfo

func (m *RuleUpdateRequest) GetRulesInfo() *RulesInfo {
	if m != nil {
		return m.RulesInfo
	}
	return nil
}

// Define RuleUpdateResponse struct
type RuleUpdateResponse struct {
}

func (m *RuleUpdateResponse) Reset()         { *m = RuleUpdateResponse{} }
func (m *RuleUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RuleUpdateResponse) ProtoMessage()    {}
func (*RuleUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{111}
}
func (m *RuleUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleUpdateResponse.Merge(m, src)
}
func (m *RuleUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleUpdateResponse proto.InternalMessageInfo

// Define RuleEnumerateRequest struct
type RuleEnumerateRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *RuleEnumerateRequest) Reset()         { *m = RuleEnumerateRequest{} }
func (m *RuleEnumerateRequest) String() string { return proto.CompactTextString(m) }
func (*RuleEnumerateRequest) ProtoMessage()    {}
func (*RuleEnumerateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{112}
}
func (m *RuleEnumerateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleEnumerateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleEnumerateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleEnumerateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleEnumerateRequest.Merge(m, src)
}
func (m *RuleEnumerateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleEnumerateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleEnumerateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleEnumerateRequest proto.InternalMessageInfo

func (m *RuleEnumerateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

// Define RuleEnumerateResponse struct
type RuleEnumerateResponse struct {
	Rules []*RuleObject `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *RuleEnumerateResponse) Reset()         { *m = RuleEnumerateResponse{} }
func (m *RuleEnumerateResponse) String() string { return proto.CompactTextString(m) }
func (*RuleEnumerateResponse) ProtoMessage()    {}
func (*RuleEnumerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{113}
}
func (m *RuleEnumerateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleEnumerateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleEnumerateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleEnumerateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleEnumerateResponse.Merge(m, src)
}
func (m *RuleEnumerateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleEnumerateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleEnumerateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleEnumerateResponse proto.InternalMessageInfo

func (m *RuleEnumerateResponse) GetRules() []*RuleObject {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Define RuleInspectRequest struct
type RuleInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RuleInspectRequest) Reset()         { *m = RuleInspectRequest{} }
func (m *RuleInspectRequest) String() string { return proto.CompactTextString(m) }
func (*RuleInspectRequest) ProtoMessage()    {}
func (*RuleInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{114}
}
func (m *RuleInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleInspectRequest.Merge(m, src)
}
func (m *RuleInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleInspectRequest proto.InternalMessageInfo

func (m *RuleInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *RuleInspectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define RuleInspectResponse struct
type RuleInspectResponse struct {
	Rule *RuleObject `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (m *RuleInspectResponse) Reset()         { *m = RuleInspectResponse{} }
func (m *RuleInspectResponse) String() string { return proto.CompactTextString(m) }
func (*RuleInspectResponse) ProtoMessage()    {}
func (*RuleInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{115}
}
func (m *RuleInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleInspectResponse.Merge(m, src)
}
func (m *RuleInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleInspectResponse proto.InternalMessageInfo

func (m *RuleInspectResponse) GetRule() *RuleObject {
	if m != nil {
		return m.Rule
	}
	return nil
}

// Define RuleDeleteRequest struct
type RuleDeleteRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RuleDeleteRequest) Reset()         { *m = RuleDeleteRequest{} }
func (m *RuleDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RuleDeleteRequest) ProtoMessage()    {}
func (*RuleDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{116}
}
func (m *RuleDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleDeleteRequest.Merge(m, src)
}
func (m *RuleDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *RuleDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleDeleteRequest proto.InternalMessageInfo

func (m *RuleDeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *RuleDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Define RuleDeleteResponse struct
type RuleDeleteResponse struct {
}

func (m *RuleDeleteResponse) Reset()         { *m = RuleDeleteResponse{} }
func (m *RuleDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RuleDeleteResponse) ProtoMessage()    {}
func (*RuleDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{117}
}
func (m *RuleDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleDeleteResponse.Merge(m, src)
}
func (m *RuleDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *RuleDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleDeleteResponse proto.InternalMessageInfo

type VersionInfo struct {
	Major     string `protobuf:"bytes,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor     string `protobuf:"bytes,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch     string `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	GitCommit string `protobuf:"bytes,4,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	BuildDate string `protobuf:"bytes,5,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
}

func (m *VersionInfo) Reset()         { *m = VersionInfo{} }
func (m *VersionInfo) String() string { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()    {}
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{118}
}
func (m *VersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfo.Merge(m, src)
}
func (m *VersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfo proto.InternalMessageInfo

func (m *VersionInfo) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *VersionInfo) GetMinor() string {
	if m != nil {
		return m.Minor
	}
	return ""
}

func (m *VersionInfo) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

func (m *VersionInfo) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionInfo) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

type VersionGetRequest struct {
}

func (m *VersionGetRequest) Reset()         { *m = VersionGetRequest{} }
func (m *VersionGetRequest) String() string { return proto.CompactTextString(m) }
func (*VersionGetRequest) ProtoMessage()    {}
func (*VersionGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{119}
}
func (m *VersionGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionGetRequest.Merge(m, src)
}
func (m *VersionGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *VersionGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionGetRequest proto.InternalMessageInfo

type VersionGetResponse struct {
	// version information of the server
	Version *VersionInfo `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionGetResponse) Reset()         { *m = VersionGetResponse{} }
func (m *VersionGetResponse) String() string { return proto.CompactTextString(m) }
func (*VersionGetResponse) ProtoMessage()    {}
func (*VersionGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{120}
}
func (m *VersionGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionGetResponse.Merge(m, src)
}
func (m *VersionGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *VersionGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionGetResponse proto.InternalMessageInfo

func (m *VersionGetResponse) GetVersion() *VersionInfo {
	if m != nil {
		return m.Version
	}
	return nil
}

type LicenseActivateRequest struct {
	*CreateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata,omitempty"`
	ActivationId    string `protobuf:"bytes,2,opt,name=activation_id,json=activationId,proto3" json:"activation_id,omitempty"`
	LicenseData     []byte `protobuf:"bytes,3,opt,name=license_data,json=licenseData,proto3" json:"license_data,omitempty"`
}

func (m *LicenseActivateRequest) Reset()         { *m = LicenseActivateRequest{} }
func (m *LicenseActivateRequest) String() string { return proto.CompactTextString(m) }
func (*LicenseActivateRequest) ProtoMessage()    {}
func (*LicenseActivateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{121}
}
func (m *LicenseActivateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseActivateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseActivateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseActivateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseActivateRequest.Merge(m, src)
}
func (m *LicenseActivateRequest) XXX_Size() int {
	return m.Size()
}
func (m *LicenseActivateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseActivateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseActivateRequest proto.InternalMessageInfo

func (m *LicenseActivateRequest) GetActivationId() string {
	if m != nil {
		return m.ActivationId
	}
	return ""
}

func (m *LicenseActivateRequest) GetLicenseData() []byte {
	if m != nil {
		return m.LicenseData
	}
	return nil
}

type LicenseActivateResponse struct {
}

func (m *LicenseActivateResponse) Reset()         { *m = LicenseActivateResponse{} }
func (m *LicenseActivateResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseActivateResponse) ProtoMessage()    {}
func (*LicenseActivateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{122}
}
func (m *LicenseActivateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseActivateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseActivateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseActivateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseActivateResponse.Merge(m, src)
}
func (m *LicenseActivateResponse) XXX_Size() int {
	return m.Size()
}
func (m *LicenseActivateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseActivateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseActivateResponse proto.InternalMessageInfo

type LicenseInspectRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *LicenseInspectRequest) Reset()         { *m = LicenseInspectRequest{} }
func (m *LicenseInspectRequest) String() string { return proto.CompactTextString(m) }
func (*LicenseInspectRequest) ProtoMessage()    {}
func (*LicenseInspectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{123}
}
func (m *LicenseInspectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseInspectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseInspectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseInspectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseInspectRequest.Merge(m, src)
}
func (m *LicenseInspectRequest) XXX_Size() int {
	return m.Size()
}
func (m *LicenseInspectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseInspectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseInspectRequest proto.InternalMessageInfo

func (m *LicenseInspectRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type LicenseInspectResponse struct {
	LicenseRespInfo *LicenseResponseInfo `protobuf:"bytes,1,opt,name=license_resp_info,json=licenseRespInfo,proto3" json:"license_resp_info,omitempty"`
}

func (m *LicenseInspectResponse) Reset()         { *m = LicenseInspectResponse{} }
func (m *LicenseInspectResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseInspectResponse) ProtoMessage()    {}
func (*LicenseInspectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{124}
}
func (m *LicenseInspectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseInspectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseInspectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseInspectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseInspectResponse.Merge(m, src)
}
func (m *LicenseInspectResponse) XXX_Size() int {
	return m.Size()
}
func (m *LicenseInspectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseInspectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseInspectResponse proto.InternalMessageInfo

func (m *LicenseInspectResponse) GetLicenseRespInfo() *LicenseResponseInfo {
	if m != nil {
		return m.LicenseRespInfo
	}
	return nil
}

type LicenseResponseInfo struct {
	FeatureInfo []*LicenseResponseInfo_FeatureInfo `protobuf:"bytes,1,rep,name=feature_info,json=featureInfo,proto3" json:"feature_info,omitempty"`
}

func (m *LicenseResponseInfo) Reset()         { *m = LicenseResponseInfo{} }
func (m *LicenseResponseInfo) String() string { return proto.CompactTextString(m) }
func (*LicenseResponseInfo) ProtoMessage()    {}
func (*LicenseResponseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{125}
}
func (m *LicenseResponseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseResponseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseResponseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseResponseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponseInfo.Merge(m, src)
}
func (m *LicenseResponseInfo) XXX_Size() int {
	return m.Size()
}
func (m *LicenseResponseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponseInfo proto.InternalMessageInfo

func (m *LicenseResponseInfo) GetFeatureInfo() []*LicenseResponseInfo_FeatureInfo {
	if m != nil {
		return m.FeatureInfo
	}
	return nil
}

type LicenseResponseInfo_FeatureInfo struct {
	// Feature name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Consumed count
	Consumed int64 `protobuf:"varint,2,opt,name=consumed,proto3" json:"consumed,omitempty"`
	// License entitlement info
	EntitlementInfo []*LicenseResponseInfo_EntitlementInfo `protobuf:"bytes,3,rep,name=entitlement_info,json=entitlementInfo,proto3" json:"entitlement_info,omitempty"`
}

func (m *LicenseResponseInfo_FeatureInfo) Reset()         { *m = LicenseResponseInfo_FeatureInfo{} }
func (m *LicenseResponseInfo_FeatureInfo) String() string { return proto.CompactTextString(m) }
func (*LicenseResponseInfo_FeatureInfo) ProtoMessage()    {}
func (*LicenseResponseInfo_FeatureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{125, 0}
}
func (m *LicenseResponseInfo_FeatureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseResponseInfo_FeatureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseResponseInfo_FeatureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseResponseInfo_FeatureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponseInfo_FeatureInfo.Merge(m, src)
}
func (m *LicenseResponseInfo_FeatureInfo) XXX_Size() int {
	return m.Size()
}
func (m *LicenseResponseInfo_FeatureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponseInfo_FeatureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponseInfo_FeatureInfo proto.InternalMessageInfo

func (m *LicenseResponseInfo_FeatureInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LicenseResponseInfo_FeatureInfo) GetConsumed() int64 {
	if m != nil {
		return m.Consumed
	}
	return 0
}

func (m *LicenseResponseInfo_FeatureInfo) GetEntitlementInfo() []*LicenseResponseInfo_EntitlementInfo {
	if m != nil {
		return m.EntitlementInfo
	}
	return nil
}

type LicenseResponseInfo_EntitlementInfo struct {
	// License count
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Expiry time of license
	Expires *types.Timestamp `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	// Start time of license
	Starts *types.Timestamp `protobuf:"bytes,4,opt,name=starts,proto3" json:"starts,omitempty"`
}

func (m *LicenseResponseInfo_EntitlementInfo) Reset()         { *m = LicenseResponseInfo_EntitlementInfo{} }
func (m *LicenseResponseInfo_EntitlementInfo) String() string { return proto.CompactTextString(m) }
func (*LicenseResponseInfo_EntitlementInfo) ProtoMessage()    {}
func (*LicenseResponseInfo_EntitlementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9943feda3d652502, []int{125, 1}
}
func (m *LicenseResponseInfo_EntitlementInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseResponseInfo_EntitlementInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseResponseInfo_EntitlementInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseResponseInfo_EntitlementInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponseInfo_EntitlementInfo.Merge(m, src)
}
func (m *LicenseResponseInfo_EntitlementInfo) XXX_Size() int {
	return m.Size()
}
func (m *LicenseResponseInfo_EntitlementInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponseInfo_EntitlementInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponseInfo_EntitlementInfo proto.InternalMessageInfo

func (m *LicenseResponseInfo_EntitlementInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LicenseResponseInfo_EntitlementInfo) GetExpires() *types.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *LicenseResponseInfo_EntitlementInfo) GetStarts() *types.Timestamp {
	if m != nil {
		return m.Starts
	}
	return nil
}

func init() {
	proto.RegisterEnum("ClusterInfo_StatusInfo_Status", ClusterInfo_StatusInfo_Status_name, ClusterInfo_StatusInfo_Status_value)
	proto.RegisterEnum("CloudCredentialInfo_Type", CloudCredentialInfo_Type_name, CloudCredentialInfo_Type_value)
	proto.RegisterEnum("BackupScheduleInfo_ReclaimPolicyType", BackupScheduleInfo_ReclaimPolicyType_name, BackupScheduleInfo_ReclaimPolicyType_value)
	proto.RegisterEnum("BackupScheduleInfo_SuspendedBy_Source", BackupScheduleInfo_SuspendedBy_Source_name, BackupScheduleInfo_SuspendedBy_Source_value)
	proto.RegisterEnum("BackupScheduleInfo_StatusInfo_Status", BackupScheduleInfo_StatusInfo_Status_name, BackupScheduleInfo_StatusInfo_Status_value)
	proto.RegisterEnum("BackupLocationInfo_Type", BackupLocationInfo_Type_name, BackupLocationInfo_Type_value)
	proto.RegisterEnum("BackupLocationInfo_StatusInfo_Status", BackupLocationInfo_StatusInfo_Status_name, BackupLocationInfo_StatusInfo_Status_value)
	proto.RegisterEnum("BackupInfo_Stage", BackupInfo_Stage_name, BackupInfo_Stage_value)
	proto.RegisterEnum("BackupInfo_StatusInfo_Status", BackupInfo_StatusInfo_Status_name, BackupInfo_StatusInfo_Status_value)
	proto.RegisterEnum("ReplacePolicy_Type", ReplacePolicy_Type_name, ReplacePolicy_Type_value)
	proto.RegisterEnum("RestoreInfo_StatusInfo_Status", RestoreInfo_StatusInfo_Status_name, RestoreInfo_StatusInfo_Status_value)
	proto.RegisterType((*OrganizationObject)(nil), "OrganizationObject")
	proto.RegisterType((*ClusterInfo)(nil), "ClusterInfo")
	proto.RegisterType((*ClusterInfo_StatusInfo)(nil), "ClusterInfo.StatusInfo")
	proto.RegisterType((*ClusterObject)(nil), "ClusterObject")
	proto.RegisterType((*PXConfig)(nil), "PXConfig")
	proto.RegisterType((*AWSConfig)(nil), "AWSConfig")
	proto.RegisterType((*S3Config)(nil), "S3Config")
	proto.RegisterType((*AzureConfig)(nil), "AzureConfig")
	proto.RegisterType((*GoogleConfig)(nil), "GoogleConfig")
	proto.RegisterType((*CloudCredentialInfo)(nil), "CloudCredentialInfo")
	proto.RegisterType((*CloudCredentialObject)(nil), "CloudCredentialObject")
	proto.RegisterType((*SchedulePolicyInfo)(nil), "SchedulePolicyInfo")
	proto.RegisterType((*SchedulePolicyInfo_IncrementalCount)(nil), "SchedulePolicyInfo.IncrementalCount")
	proto.RegisterType((*SchedulePolicyInfo_IntervalPolicy)(nil), "SchedulePolicyInfo.IntervalPolicy")
	proto.RegisterType((*SchedulePolicyInfo_DailyPolicy)(nil), "SchedulePolicyInfo.DailyPolicy")
	proto.RegisterType((*SchedulePolicyInfo_WeeklyPolicy)(nil), "SchedulePolicyInfo.WeeklyPolicy")
	proto.RegisterType((*SchedulePolicyInfo_MonthlyPolicy)(nil), "SchedulePolicyInfo.MonthlyPolicy")
	proto.RegisterType((*SchedulePolicyObject)(nil), "SchedulePolicyObject")
	proto.RegisterType((*BackupScheduleInfo)(nil), "BackupScheduleInfo")
	proto.RegisterMapType((map[string]*BackupScheduleInfo_StatusInfoList)(nil), "BackupScheduleInfo.BackupStatusEntry")
	proto.RegisterMapType((map[string]string)(nil), "BackupScheduleInfo.LabelSelectorsEntry")
	proto.RegisterType((*BackupScheduleInfo_SuspendedBy)(nil), "BackupScheduleInfo.SuspendedBy")
	proto.RegisterType((*BackupScheduleInfo_StatusInfoList)(nil), "BackupScheduleInfo.StatusInfoList")
	proto.RegisterType((*BackupScheduleInfo_StatusInfo)(nil), "BackupScheduleInfo.StatusInfo")
	proto.RegisterType((*BackupScheduleObject)(nil), "BackupScheduleObject")
	proto.RegisterType((*BackupLocationInfo)(nil), "BackupLocationInfo")
	proto.RegisterType((*BackupLocationInfo_StatusInfo)(nil), "BackupLocationInfo.StatusInfo")
	proto.RegisterType((*BackupLocationObject)(nil), "BackupLocationObject")
	proto.RegisterType((*ResourceInfo)(nil), "ResourceInfo")
	proto.RegisterType((*BackupInfo)(nil), "BackupInfo")
	proto.RegisterMapType((map[string]string)(nil), "BackupInfo.LabelSelectorsEntry")
	proto.RegisterType((*BackupInfo_BackupSchedule)(nil), "BackupInfo.BackupSchedule")
	proto.RegisterType((*BackupInfo_Volume)(nil), "BackupInfo.Volume")
	proto.RegisterMapType((map[string]string)(nil), "BackupInfo.Volume.OptionsEntry")
	proto.RegisterType((*BackupInfo_StatusInfo)(nil), "BackupInfo.StatusInfo")
	proto.RegisterType((*BackupObject)(nil), "BackupObject")
	proto.RegisterType((*RulesInfo)(nil), "RulesInfo")
	proto.RegisterType((*RulesInfo_RuleItem)(nil), "RulesInfo.RuleItem")
	proto.RegisterMapType((map[string]string)(nil), "RulesInfo.RuleItem.PodSelectorEntry")
	proto.RegisterType((*RulesInfo_Action)(nil), "RulesInfo.Action")
	proto.RegisterType((*RuleObject)(nil), "RuleObject")
	proto.RegisterType((*ReplacePolicy)(nil), "ReplacePolicy")
	proto.RegisterType((*RestoreInfo)(nil), "RestoreInfo")
	proto.RegisterMapType((map[string]string)(nil), "RestoreInfo.LabelSelectorsEntry")
	proto.RegisterMapType((map[string]string)(nil), "RestoreInfo.NamespaceMappingEntry")
	proto.RegisterType((*RestoreInfo_RestoredResource)(nil), "RestoreInfo.RestoredResource")
	proto.RegisterType((*RestoreInfo_Volume)(nil), "RestoreInfo.Volume")
	proto.RegisterMapType((map[string]string)(nil), "RestoreInfo.Volume.OptionsEntry")
	proto.RegisterType((*RestoreInfo_StatusInfo)(nil), "RestoreInfo.StatusInfo")
	proto.RegisterType((*RestoreObject)(nil), "RestoreObject")
	proto.RegisterType((*HealthStatusRequest)(nil), "HealthStatusRequest")
	proto.RegisterType((*HealthStatusResponse)(nil), "HealthStatusResponse")
	proto.RegisterType((*TimeRange)(nil), "TimeRange")
	proto.RegisterType((*EnumerateOptions)(nil), "EnumerateOptions")
	proto.RegisterMapType((map[string]string)(nil), "EnumerateOptions.LabelsEntry")
	proto.RegisterType((*SchedulePolicyCreateRequest)(nil), "SchedulePolicyCreateRequest")
	proto.RegisterType((*SchedulePolicyCreateResponse)(nil), "SchedulePolicyCreateResponse")
	proto.RegisterType((*SchedulePolicyUpdateRequest)(nil), "SchedulePolicyUpdateRequest")
	proto.RegisterType((*SchedulePolicyUpdateResponse)(nil), "SchedulePolicyUpdateResponse")
	proto.RegisterType((*SchedulePolicyEnumerateRequest)(nil), "SchedulePolicyEnumerateRequest")
	proto.RegisterMapType((map[string]string)(nil), "SchedulePolicyEnumerateRequest.LabelsEntry")
	proto.RegisterType((*SchedulePolicyEnumerateResponse)(nil), "SchedulePolicyEnumerateResponse")
	proto.RegisterType((*SchedulePolicyInspectRequest)(nil), "SchedulePolicyInspectRequest")
	proto.RegisterType((*SchedulePolicyInspectResponse)(nil), "SchedulePolicyInspectResponse")
	proto.RegisterType((*SchedulePolicyDeleteRequest)(nil), "SchedulePolicyDeleteRequest")
	proto.RegisterType((*SchedulePolicyDeleteResponse)(nil), "SchedulePolicyDeleteResponse")
	proto.RegisterType((*BackupScheduleCreateRequest)(nil), "BackupScheduleCreateRequest")
	proto.RegisterMapType((map[string]string)(nil), "BackupScheduleCreateRequest.LabelSelectorsEntry")
	proto.RegisterType((*BackupScheduleCreateResponse)(nil), "BackupScheduleCreateResponse")
	proto.RegisterType((*BackupScheduleUpdateRequest)(nil), "BackupScheduleUpdateRequest")
	proto.RegisterMapType((map[string]string)(nil), "BackupScheduleUpdateRequest.LabelSelectorsEntry")
	proto.RegisterType((*BackupScheduleUpdateResponse)(nil), "BackupScheduleUpdateResponse")
	proto.RegisterType((*BackupScheduleEnumerateRequest)(nil), "BackupScheduleEnumerateRequest")
	proto.RegisterMapType((map[string]string)(nil), "BackupScheduleEnumerateRequest.LabelsEntry")
	proto.RegisterType((*BackupScheduleEnumerateResponse)(nil), "BackupScheduleEnumerateResponse")
	proto.RegisterType((*BackupScheduleInspectRequest)(nil), "BackupScheduleInspectRequest")
	proto.RegisterType((*BackupScheduleInspectResponse)(nil), "BackupScheduleInspectResponse")
	proto.RegisterType((*BackupScheduleDeleteRequest)(nil), "BackupScheduleDeleteRequest")
	proto.RegisterType((*BackupScheduleDeleteResponse)(nil), "BackupScheduleDeleteResponse")
	proto.RegisterType((*ClusterCreateRequest)(nil), "ClusterCreateRequest")
	proto.RegisterType((*ClusterCreateResponse)(nil), "ClusterCreateResponse")
	proto.RegisterType((*ClusterUpdateRequest)(nil), "ClusterUpdateRequest")
	proto.RegisterType((*ClusterUpdateResponse)(nil), "ClusterUpdateResponse")
	proto.RegisterType((*ClusterEnumerateRequest)(nil), "ClusterEnumerateRequest")
	proto.RegisterMapType((map[string]string)(nil), "ClusterEnumerateRequest.LabelsEntry")
	proto.RegisterType((*ClusterEnumerateResponse)(nil), "ClusterEnumerateResponse")
	proto.RegisterType((*ClusterInspectRequest)(nil), "ClusterInspectRequest")
	proto.RegisterType((*ClusterInspectResponse)(nil), "ClusterInspectResponse")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "ClusterDeleteRequest")
	proto.RegisterType((*ClusterDeleteResponse)(nil), "ClusterDeleteResponse")
	proto.RegisterType((*CloudCredentialCreateRequest)(nil), "CloudCredentialCreateRequest")
	proto.RegisterType((*CloudCredentialCreateResponse)(nil), "CloudCredentialCreateResponse")
	proto.RegisterType((*CloudCredentialUpdateRequest)(nil), "CloudCredentialUpdateRequest")
	proto.RegisterType((*CloudCredentialUpdateResponse)(nil), "CloudCredentialUpdateResponse")
	proto.RegisterType((*CloudCredentialEnumerateRequest)(nil), "CloudCredentialEnumerateRequest")
	proto.RegisterType((*CloudCredentialEnumerateResponse)(nil), "CloudCredentialEnumerateResponse")
	proto.RegisterType((*CloudCredentialInspectRequest)(nil), "CloudCredentialInspectRequest")
	proto.RegisterType((*CloudCredentialInspectResponse)(nil), "CloudCredentialInspectResponse")
	proto.RegisterType((*CloudCredentialDeleteRequest)(nil), "CloudCredentialDeleteRequest")
	proto.RegisterType((*CloudCredentialDeleteResponse)(nil), "CloudCredentialDeleteResponse")
	proto.RegisterType((*BackupLocationCreateRequest)(nil), "BackupLocationCreateRequest")
	proto.RegisterType((*BackupLocationCreateResponse)(nil), "BackupLocationCreateResponse")
	proto.RegisterType((*BackupLocationUpdateRequest)(nil), "BackupLocationUpdateRequest")
	proto.RegisterType((*BackupLocationUpdateResponse)(nil), "BackupLocationUpdateResponse")
	proto.RegisterType((*BackupLocationEnumerateRequest)(nil), "BackupLocationEnumerateRequest")
	proto.RegisterMapType((map[string]string)(nil), "BackupLocationEnumerateRequest.LabelsEntry")
	proto.RegisterType((*BackupLocationEnumerateResponse)(nil), "BackupLocationEnumerateResponse")
	proto.RegisterType((*BackupLocationInspectRequest)(nil), "BackupLocationInspectRequest")
	proto.RegisterType((*BackupLocationInspectResponse)(nil), "BackupLocationInspectResponse")
	proto.RegisterType((*BackupLocationDeleteRequest)(nil), "BackupLocationDeleteRequest")
	proto.RegisterType((*BackupLocationDeleteResponse)(nil), "BackupLocationDeleteResponse")
	proto.RegisterType((*BackupLocationValidateRequest)(nil), "BackupLocationValidateRequest")
	proto.RegisterType((*BackupLocationValidateResponse)(nil), "BackupLocationValidateResponse")
	proto.RegisterType((*MetricsInspectRequest)(nil), "MetricsInspectRequest")
	proto.RegisterType((*MetricsInspectResponse)(nil), "MetricsInspectResponse")
	proto.RegisterType((*MetricsInspectResponse_Stats)(nil), "MetricsInspectResponse.Stats")
	proto.RegisterType((*BackupCreateRequest)(nil), "BackupCreateRequest")
	proto.RegisterMapType((map[string]string)(nil), "BackupCreateRequest.LabelSelectorsEntry")
	proto.RegisterType((*BackupCreateResponse)(nil), "BackupCreateResponse")
	proto.RegisterType((*BackupUpdateRequest)(nil), "BackupUpdateRequest")
	proto.RegisterType((*BackupUpdateResponse)(nil), "BackupUpdateResponse")
	proto.RegisterType((*BackupEnumerateRequest)(nil), "BackupEnumerateRequest")
	proto.RegisterType((*BackupEnumerateResponse)(nil), "BackupEnumerateResponse")
	proto.RegisterType((*BackupInspectRequest)(nil), "BackupInspectRequest")
	proto.RegisterType((*BackupInspectResponse)(nil), "BackupInspectResponse")
	proto.RegisterType((*BackupDeleteRequest)(nil), "BackupDeleteRequest")
	proto.RegisterType((*BackupDeleteResponse)(nil), "BackupDeleteResponse")
	proto.RegisterType((*RestoreCreateRequest)(nil), "RestoreCreateRequest")
	proto.RegisterMapType((map[string]string)(nil), "RestoreCreateRequest.NamespaceMappingEntry")
	proto.RegisterType((*RestoreCreateResponse)(nil), "RestoreCreateResponse")
	proto.RegisterType((*RestoreUpdateRequest)(nil), "RestoreUpdateRequest")
	proto.RegisterType((*RestoreUpdateResponse)(nil), "RestoreUpdateResponse")
	proto.RegisterType((*RestoreEnumerateRequest)(nil), "RestoreEnumerateRequest")
	proto.RegisterType((*RestoreEnumerateResponse)(nil), "RestoreEnumerateResponse")
	proto.RegisterType((*RestoreInspectRequest)(nil), "RestoreInspectRequest")
	proto.RegisterType((*RestoreInspectResponse)(nil), "RestoreInspectResponse")
	proto.RegisterType((*RestoreDeleteRequest)(nil), "RestoreDeleteRequest")
	proto.RegisterType((*RestoreDeleteResponse)(nil), "RestoreDeleteResponse")
	proto.RegisterType((*OrganizationCreateRequest)(nil), "OrganizationCreateRequest")
	proto.RegisterType((*OrganizationCreateResponse)(nil), "OrganizationCreateResponse")
	proto.RegisterType((*OrganizationEnumerateRequest)(nil), "OrganizationEnumerateRequest")
	proto.RegisterType((*OrganizationEnumerateResponse)(nil), "OrganizationEnumerateResponse")
	proto.RegisterType((*OrganizationInspectRequest)(nil), "OrganizationInspectRequest")
	proto.RegisterType((*OrganizationInspectResponse)(nil), "OrganizationInspectResponse")
	proto.RegisterType((*RuleCreateRequest)(nil), "RuleCreateRequest")
	proto.RegisterType((*RuleCreateResponse)(nil), "RuleCreateResponse")
	proto.RegisterType((*RuleUpdateRequest)(nil), "RuleUpdateRequest")
	proto.RegisterType((*RuleUpdateResponse)(nil), "RuleUpdateResponse")
	proto.RegisterType((*RuleEnumerateRequest)(nil), "RuleEnumerateRequest")
	proto.RegisterType((*RuleEnumerateResponse)(nil), "RuleEnumerateResponse")
	proto.RegisterType((*RuleInspectRequest)(nil), "RuleInspectRequest")
	proto.RegisterType((*RuleInspectResponse)(nil), "RuleInspectResponse")
	proto.RegisterType((*RuleDeleteRequest)(nil), "RuleDeleteRequest")
	proto.RegisterType((*RuleDeleteResponse)(nil), "RuleDeleteResponse")
	proto.RegisterType((*VersionInfo)(nil), "VersionInfo")
	proto.RegisterType((*VersionGetRequest)(nil), "VersionGetRequest")
	proto.RegisterType((*VersionGetResponse)(nil), "VersionGetResponse")
	proto.RegisterType((*LicenseActivateRequest)(nil), "LicenseActivateRequest")
	proto.RegisterType((*LicenseActivateResponse)(nil), "LicenseActivateResponse")
	proto.RegisterType((*LicenseInspectRequest)(nil), "LicenseInspectRequest")
	proto.RegisterType((*LicenseInspectResponse)(nil), "LicenseInspectResponse")
	proto.RegisterType((*LicenseResponseInfo)(nil), "LicenseResponseInfo")
	proto.RegisterType((*LicenseResponseInfo_FeatureInfo)(nil), "LicenseResponseInfo.FeatureInfo")
	proto.RegisterType((*LicenseResponseInfo_EntitlementInfo)(nil), "LicenseResponseInfo.EntitlementInfo")
}

func init() { proto.RegisterFile("pkg/apis/v1/api.proto", fileDescriptor_9943feda3d652502) }

var fileDescriptor_9943feda3d652502 = []byte{
	// 6061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x4d, 0x6c, 0x1c, 0xd9,
	0x71, 0xb0, 0x7a, 0x66, 0x38, 0x3f, 0x35, 0xc3, 0xe1, 0xf0, 0xf1, 0x57, 0x2d, 0x72, 0x86, 0xea,
	0x5d, 0x59, 0x5a, 0x69, 0xb7, 0xe9, 0xa5, 0xbc, 0xf6, 0x2e, 0x77, 0xad, 0x5d, 0x92, 0x5a, 0x59,
	0xb4, 0xb5, 0x12, 0xdd, 0xdc, 0x95, 0x7f, 0x3e, 0xc3, 0x83, 0xe6, 0xcc, 0xd3, 0xa8, 0x57, 0x33,
	0xdd, 0xe3, 0xee, 0x1e, 0xae, 0x28, 0xc3, 0xf8, 0x9c, 0x1f, 0x20, 0x41, 0x90, 0x18, 0x76, 0x8c,
	0x04, 0x71, 0xec, 0xc0, 0x40, 0x4e, 0xb9, 0x05, 0x48, 0x0e, 0x49, 0x9c, 0x4b, 0x0e, 0x09, 0x12,
	0xf8, 0x60, 0x18, 0xce, 0x25, 0xb9, 0x10, 0xc9, 0x3a, 0x40, 0x12, 0xe5, 0xa6, 0x5c, 0x72, 0x4b,
	0xf0, 0xfe, 0xfa, 0xf7, 0xcd, 0x70, 0x44, 0xd2, 0xb2, 0x03, 0xe4, 0xc4, 0xe9, 0x7a, 0xf5, 0xaa,
	0xaa, 0xeb, 0xd5, 0xab, 0xaa, 0x57, 0xf5, 0x9a, 0x30, 0xd7, 0x7f, 0xd0, 0x59, 0x35, 0xfb, 0x96,
	0xb7, 0xba, 0xff, 0x32, 0xf9, 0xab, 0xf7, 0x5d, 0xc7, 0x77, 0xd4, 0xa5, 0x8e, 0xe3, 0x74, 0xba,
	0x98, 0x40, 0x56, 0x4d, 0xdb, 0x76, 0x7c, 0xd3, 0xb7, 0x1c, 0xdb, 0xe3, 0xa3, 0x0d, 0x3e, 0x4a,
	0x9f, 0xf6, 0x06, 0xf7, 0x56, 0x7d, 0xab, 0x87, 0x3d, 0xdf, 0xec, 0xf5, 0x39, 0xc2, 0x4b, 0x1d,
	0xcb, 0xbf, 0x3f, 0xd8, 0xd3, 0x5b, 0x4e, 0x6f, 0xb5, 0xe3, 0x74, 0x9c, 0x10, 0x93, 0x3c, 0xd1,
	0x07, 0xfa, 0x8b, 0xa3, 0x2f, 0x46, 0x85, 0x68, 0x39, 0xbd, 0x9e, 0x63, 0xb3, 0x11, 0x6d, 0x03,
	0xd0, 0x1d, 0xb7, 0x63, 0xda, 0xd6, 0x23, 0x2a, 0xc0, 0x9d, 0xbd, 0xf7, 0x71, 0xcb, 0x47, 0x57,
	0xa0, 0xd8, 0xc3, 0xbe, 0xd9, 0x36, 0x7d, 0x73, 0x51, 0x59, 0x51, 0x2e, 0x95, 0xd7, 0x4a, 0xfa,
	0x3b, 0x1c, 0xb0, 0x99, 0xfb, 0xf1, 0x61, 0x43, 0x31, 0x02, 0x04, 0xed, 0x27, 0x59, 0x28, 0x6f,
	0x75, 0x07, 0x9e, 0x8f, 0xdd, 0x6d, 0xfb, 0x9e, 0x83, 0x3e, 0x06, 0xa5, 0xfe, 0xc3, 0x66, 0xcb,
	0xb1, 0xef, 0x59, 0x9d, 0x60, 0xf6, 0xce, 0xe7, 0xb7, 0x28, 0x60, 0xb3, 0xf2, 0xf8, 0xb0, 0x51,
	0xec, 0x3f, 0x64, 0xc3, 0x46, 0xb1, 0xff, 0x90, 0xc1, 0xd1, 0x9b, 0x00, 0x0f, 0x06, 0x7b, 0x98,
	0x4f, 0xcb, 0xac, 0x28, 0x97, 0x4a, 0x9b, 0x8d, 0xc7, 0x87, 0x8d, 0x08, 0xf4, 0xc9, 0x61, 0x63,
	0xd2, 0xc3, 0xad, 0x81, 0x8b, 0xd7, 0x35, 0xdf, 0x1d, 0x60, 0xcd, 0x88, 0x0c, 0xa2, 0x17, 0xa0,
	0xd6, 0xea, 0x3a, 0x83, 0x76, 0xb3, 0xe5, 0xe2, 0x36, 0xb6, 0x7d, 0xcb, 0xec, 0x2e, 0x66, 0x09,
	0x19, 0x63, 0x8a, 0xc2, 0xb7, 0x02, 0x30, 0x5a, 0x85, 0xbc, 0xe7, 0x9b, 0xfe, 0xc0, 0x5b, 0xcc,
	0x51, 0xf1, 0x16, 0xf4, 0x88, 0xfc, 0xfa, 0x2e, 0x1d, 0x22, 0x3f, 0x0d, 0x8e, 0x86, 0x2e, 0x40,
	0xb5, 0x8d, 0xbb, 0xd8, 0xc7, 0xcd, 0x3d, 0xb3, 0xf5, 0x60, 0xd0, 0xf7, 0x16, 0x27, 0x56, 0x94,
	0x4b, 0x45, 0x63, 0x92, 0x41, 0x37, 0x19, 0x10, 0x5d, 0x84, 0x29, 0x8e, 0xe6, 0x62, 0xcf, 0x77,
	0x5c, 0xec, 0x2d, 0xe6, 0x29, 0x1e, 0x9f, 0x6d, 0x70, 0xa8, 0xfa, 0x7d, 0x05, 0x20, 0x64, 0x83,
	0x3e, 0x1e, 0xc8, 0x43, 0xd4, 0x55, 0x5d, 0xab, 0x0f, 0x91, 0x87, 0xff, 0x0c, 0xc4, 0x9a, 0x87,
	0xbc, 0x8b, 0x4d, 0xcf, 0xb1, 0x99, 0xbe, 0x0c, 0xfe, 0xa4, 0x6d, 0x40, 0x9e, 0x61, 0xa2, 0x32,
	0x14, 0xb6, 0xed, 0x7d, 0xb3, 0x6b, 0xb5, 0x6b, 0x67, 0x10, 0x40, 0xfe, 0x8e, 0xdd, 0xb5, 0x6c,
	0x5c, 0x53, 0xc8, 0xc0, 0x9d, 0x7b, 0xf7, 0xe8, 0x43, 0x06, 0x4d, 0xc3, 0xe4, 0x75, 0x2a, 0xe0,
	0x0e, 0xb6, 0xdb, 0x96, 0xdd, 0xa9, 0x65, 0xb5, 0x5f, 0x52, 0x60, 0x92, 0x0b, 0x71, 0x0c, 0x9b,
	0x40, 0x5b, 0x50, 0x6e, 0x85, 0xaf, 0x40, 0xc5, 0x2b, 0xaf, 0x55, 0xa2, 0xaf, 0xb5, 0x39, 0x43,
	0xa6, 0x3c, 0x3e, 0x6c, 0x08, 0x44, 0x8b, 0x28, 0x3c, 0x3a, 0x4b, 0xbb, 0x06, 0x45, 0x61, 0x36,
	0x68, 0x0d, 0x2a, 0x66, 0xab, 0x85, 0x3d, 0xaf, 0xe9, 0x3b, 0x0f, 0xb0, 0x4d, 0x25, 0x28, 0x6d,
	0x4e, 0x91, 0xf9, 0x0c, 0x4e, 0xc1, 0x06, 0x7f, 0x78, 0x97, 0x3c, 0x68, 0x0f, 0xa1, 0xb4, 0xf1,
	0xb9, 0x5d, 0x4e, 0xe0, 0x45, 0x00, 0x4e, 0xe0, 0x01, 0x3e, 0xe0, 0xd3, 0x27, 0x1f, 0x1f, 0x36,
	0x4a, 0x0c, 0xfa, 0x00, 0x1f, 0x18, 0xfc, 0xe7, 0x67, 0xf0, 0x01, 0xfa, 0x24, 0x80, 0x87, 0x5b,
	0x2e, 0xf6, 0x29, 0x36, 0xb3, 0xc6, 0x3a, 0xc1, 0x66, 0xd0, 0x07, 0xf8, 0x20, 0x6d, 0x8c, 0x7c,
	0xec, 0x33, 0xf8, 0x40, 0xfb, 0x13, 0x05, 0x8a, 0xbb, 0x57, 0x39, 0x67, 0x15, 0x8a, 0xd8, 0x6e,
	0xf7, 0x1d, 0xcb, 0xf6, 0x19, 0x5f, 0x23, 0x78, 0x66, 0x2b, 0xd8, 0xb1, 0xa2, 0x2b, 0x48, 0x9e,
	0x50, 0x03, 0xca, 0x6d, 0xcb, 0x33, 0xf7, 0xba, 0xb8, 0xe9, 0x79, 0xcc, 0x8e, 0x8b, 0x06, 0x70,
	0xd0, 0xae, 0xd7, 0x45, 0x2f, 0x02, 0x12, 0x08, 0x7d, 0xd3, 0xbf, 0xdf, 0xf4, 0xfc, 0x83, 0x2e,
	0xa6, 0xe6, 0x5c, 0x34, 0x6a, 0x7c, 0x64, 0xc7, 0xf4, 0xef, 0xef, 0x12, 0x38, 0x7a, 0x0e, 0x26,
	0x89, 0xe5, 0x99, 0x1d, 0xdc, 0x6c, 0x75, 0x4d, 0x8f, 0x99, 0x6f, 0xc9, 0xa8, 0x70, 0xe0, 0x16,
	0x81, 0x69, 0x5f, 0xcf, 0x42, 0x79, 0xe3, 0xd1, 0xc0, 0xc5, 0x5c, 0xee, 0xf3, 0x54, 0xe5, 0xce,
	0xc0, 0xf6, 0x9b, 0xb6, 0xd9, 0xc3, 0x5c, 0xf6, 0x32, 0x87, 0xdd, 0x36, 0x7b, 0x18, 0xbd, 0x05,
	0xe2, 0x31, 0xa2, 0x27, 0xba, 0x6b, 0x39, 0x58, 0xaa, 0x28, 0x31, 0x48, 0x14, 0x7d, 0x03, 0x26,
	0x5b, 0x5d, 0x0b, 0xdb, 0x7e, 0x93, 0x69, 0x8f, 0x6d, 0xd9, 0xcd, 0xf3, 0x8f, 0x0f, 0x1b, 0x15,
	0x36, 0xc0, 0xe0, 0x69, 0x2a, 0x7c, 0x78, 0x97, 0x0e, 0xa3, 0x75, 0x28, 0x71, 0x3a, 0x56, 0x9b,
	0xaa, 0xa1, 0xb4, 0xb9, 0x4c, 0x3c, 0x0d, 0x03, 0x5a, 0xed, 0xf4, 0x7c, 0x3e, 0xb4, 0xdd, 0x26,
	0x73, 0x7d, 0x6c, 0x9b, 0x6c, 0xee, 0x44, 0x38, 0x97, 0x01, 0xa5, 0x73, 0xd9, 0xd0, 0x76, 0x1b,
	0xdd, 0x82, 0x29, 0x6f, 0xb0, 0xe7, 0xb5, 0x5c, 0xab, 0x4f, 0xfc, 0x27, 0xa1, 0x90, 0xa7, 0x14,
	0x9e, 0x7b, 0x7c, 0xd8, 0xa8, 0x46, 0x87, 0x64, 0x74, 0x62, 0x08, 0xdb, 0x6d, 0xed, 0x1e, 0x54,
	0x3e, 0x45, 0x3d, 0x3f, 0x5f, 0x82, 0x65, 0x80, 0xbe, 0xeb, 0x90, 0xed, 0x47, 0x08, 0xb3, 0x05,
	0x28, 0x71, 0xc8, 0x76, 0x1b, 0x7d, 0x02, 0x8a, 0xef, 0x7b, 0x8e, 0x1d, 0xd1, 0xfd, 0xd2, 0xe3,
	0xc3, 0x46, 0x81, 0xc0, 0xa4, 0x8a, 0xa7, 0x23, 0xc4, 0x3e, 0xbf, 0x93, 0x81, 0x99, 0xad, 0xb8,
	0x53, 0xa4, 0x8e, 0xe8, 0x25, 0xc8, 0xf9, 0x07, 0x7d, 0xcc, 0xdd, 0xd0, 0x59, 0x5d, 0x82, 0xa3,
	0xbf, 0x7b, 0xd0, 0xc7, 0x06, 0x45, 0x43, 0x57, 0x00, 0xcc, 0x0f, 0x3c, 0xe1, 0xea, 0xdb, 0x74,
	0x93, 0x83, 0x1e, 0xec, 0xb9, 0x9b, 0x67, 0x8c, 0x92, 0xf9, 0x81, 0xc7, 0xdf, 0xe5, 0x65, 0xa8,
	0x98, 0xc4, 0xba, 0x04, 0x3a, 0xe6, 0x3e, 0x21, 0x62, 0x72, 0x37, 0xcf, 0x18, 0x65, 0x33, 0x62,
	0x81, 0x1f, 0x83, 0x49, 0x16, 0x08, 0xc5, 0x9c, 0x7b, 0x74, 0xce, 0xa4, 0x1e, 0x55, 0xd2, 0xcd,
	0x33, 0x46, 0xa5, 0x13, 0x79, 0xd6, 0xae, 0x42, 0x8e, 0xc8, 0x18, 0xf7, 0x7d, 0x05, 0xc8, 0x6e,
	0x7c, 0x6e, 0xb7, 0xa6, 0xa0, 0x12, 0x4c, 0x50, 0x8e, 0xb5, 0x0c, 0xf1, 0x87, 0x8c, 0x50, 0x2d,
	0xbb, 0x59, 0x84, 0x3c, 0xe3, 0xa1, 0xfd, 0xbe, 0x02, 0x73, 0x89, 0xf7, 0xe6, 0x1e, 0xf0, 0x13,
	0xa3, 0x3c, 0x60, 0x8d, 0xbb, 0xb3, 0x00, 0x25, 0xe2, 0x0d, 0x6f, 0xc2, 0x5c, 0x32, 0x34, 0x35,
	0xad, 0xd0, 0x2f, 0xce, 0xca, 0xf4, 0x6c, 0xcc, 0xb4, 0xd2, 0x40, 0xed, 0x47, 0x05, 0x40, 0xbb,
	0xad, 0xfb, 0xb8, 0x3d, 0xe8, 0xe2, 0x1d, 0xa7, 0x6b, 0xb5, 0x0e, 0xe8, 0xba, 0x5d, 0x83, 0xa2,
	0x65, 0xfb, 0xd8, 0xdd, 0x37, 0xbb, 0x5c, 0x32, 0x4d, 0x4f, 0xa3, 0xe9, 0xdb, 0x1c, 0x87, 0x81,
	0x8c, 0x60, 0x0e, 0x7a, 0x05, 0x26, 0xda, 0xa6, 0xd5, 0x3d, 0xe0, 0x02, 0x35, 0x64, 0x93, 0xaf,
	0x13, 0x04, 0x3e, 0x93, 0x61, 0xa3, 0x57, 0x21, 0xff, 0x01, 0xc6, 0x0f, 0xba, 0x07, 0x74, 0xd7,
	0x96, 0xd7, 0x56, 0x64, 0xf3, 0x3e, 0x47, 0x31, 0xf8, 0x44, 0x8e, 0x8f, 0x5e, 0x87, 0x42, 0xcf,
	0xb1, 0xfd, 0xfb, 0xdd, 0x03, 0x1e, 0x82, 0xcf, 0xcb, 0xa6, 0xbe, 0xc3, 0x50, 0xf8, 0x5c, 0x31,
	0x83, 0x84, 0x59, 0x16, 0x86, 0x9b, 0x1e, 0x9f, 0xb3, 0x38, 0xb1, 0x92, 0xbd, 0x54, 0x32, 0xaa,
	0x0c, 0x2c, 0x28, 0xa9, 0x57, 0xa1, 0xb6, 0x6d, 0xb7, 0x5c, 0xdc, 0xc3, 0xb6, 0x6f, 0x76, 0xb7,
	0x88, 0xcf, 0x41, 0x0d, 0x98, 0xa0, 0xce, 0x87, 0xea, 0x29, 0xb7, 0x59, 0x7a, 0x7c, 0xd8, 0x60,
	0x00, 0x83, 0xfd, 0x51, 0x7f, 0x47, 0x81, 0x6a, 0x5c, 0x51, 0x68, 0x11, 0x0a, 0x3d, 0xcb, 0x1e,
	0xf8, 0x98, 0x05, 0xe8, 0xac, 0x21, 0x1e, 0x99, 0xff, 0xf6, 0x4d, 0x8b, 0xf9, 0xef, 0xac, 0xc1,
	0x9f, 0xd0, 0x67, 0x61, 0xda, 0x0a, 0x39, 0x37, 0x19, 0x47, 0xa6, 0xa4, 0xe7, 0xe5, 0x2b, 0x13,
	0x17, 0xd3, 0xa8, 0x59, 0x09, 0x88, 0xfa, 0x9b, 0x0a, 0x94, 0x23, 0x6b, 0x80, 0x10, 0xe4, 0x48,
	0x56, 0xc8, 0xbd, 0x02, 0xfd, 0xfd, 0x2c, 0xc5, 0xf9, 0xbe, 0x02, 0x95, 0xe8, 0xd2, 0xa2, 0x1a,
	0x64, 0xdb, 0x26, 0x8f, 0xac, 0x06, 0xf9, 0x19, 0x48, 0x98, 0x91, 0x4a, 0x98, 0x3d, 0x5a, 0xc2,
	0xdc, 0x89, 0x24, 0xfc, 0x43, 0x05, 0x26, 0x63, 0x16, 0x44, 0x04, 0x6a, 0x9b, 0x3e, 0xe6, 0x8b,
	0x48, 0x7f, 0xff, 0x9c, 0x85, 0xd4, 0xbe, 0xa7, 0xc0, 0x6c, 0x7c, 0xe6, 0x49, 0x9d, 0xcd, 0x67,
	0x60, 0x56, 0x6c, 0x8b, 0x66, 0x9f, 0x52, 0x8c, 0xfa, 0x9a, 0x19, 0x89, 0x9c, 0x3c, 0x7b, 0x43,
	0x5e, 0x6a, 0x44, 0xfb, 0x83, 0x0a, 0xa0, 0xcd, 0xd8, 0xa6, 0xa2, 0xfe, 0xe6, 0x22, 0x4c, 0x25,
	0x78, 0xf0, 0x75, 0xaf, 0xc6, 0x69, 0x90, 0x9d, 0xe3, 0x0d, 0xbc, 0x3e, 0xb6, 0xdb, 0x94, 0x7f,
	0xd1, 0x10, 0x8f, 0xe8, 0x16, 0x54, 0x5d, 0xdc, 0xea, 0x9a, 0x56, 0x4f, 0x50, 0xc8, 0xd2, 0xa0,
	0x73, 0x41, 0x4f, 0xf3, 0xd3, 0x0d, 0x86, 0xc9, 0x88, 0xd2, 0x00, 0x34, 0xe9, 0x46, 0x41, 0xe8,
	0xd3, 0x30, 0x29, 0x5c, 0x82, 0x48, 0xec, 0xb3, 0x97, 0xca, 0x72, 0x62, 0x1c, 0x44, 0xf1, 0xde,
	0xb6, 0x7d, 0xf7, 0xc0, 0xa8, 0xec, 0x45, 0x40, 0x11, 0xf7, 0xd2, 0x75, 0x5a, 0xf4, 0x54, 0xc4,
	0xd3, 0x25, 0xee, 0x5e, 0x6e, 0x71, 0x28, 0x79, 0x39, 0x9e, 0xae, 0xb2, 0x98, 0x6f, 0x88, 0x47,
	0x54, 0x07, 0x20, 0x29, 0x93, 0xd7, 0x37, 0x5b, 0xd8, 0x5b, 0x2c, 0x50, 0xe7, 0x14, 0x81, 0xa0,
	0x1d, 0x98, 0xea, 0x9a, 0x7b, 0xb8, 0xdb, 0xf4, 0x70, 0x17, 0xb7, 0x7c, 0xc7, 0xf5, 0x16, 0x8b,
	0x54, 0xe0, 0x8b, 0x32, 0x81, 0x6f, 0x11, 0xd4, 0x5d, 0x81, 0xc9, 0x44, 0xae, 0x76, 0x63, 0x40,
	0xa4, 0xc1, 0x64, 0xdf, 0xc5, 0x4d, 0xfc, 0x10, 0xb7, 0x9a, 0x2e, 0xf1, 0x88, 0x25, 0x96, 0xad,
	0xf5, 0x5d, 0xfc, 0xf6, 0x43, 0xdc, 0x32, 0x06, 0x5d, 0x8c, 0x9e, 0x87, 0x6a, 0xdf, 0xf1, 0xfc,
	0x08, 0x12, 0xb0, 0x34, 0x90, 0x40, 0x03, 0xac, 0xf4, 0x59, 0xa7, 0x2c, 0x3b, 0xeb, 0x84, 0x67,
	0x96, 0x0a, 0x35, 0xac, 0xba, 0x4c, 0x72, 0xc9, 0x51, 0x6a, 0x13, 0x2a, 0xdc, 0x04, 0x70, 0xbb,
	0xb9, 0x77, 0xb0, 0x38, 0xc9, 0x23, 0x8e, 0x6c, 0xb6, 0xc0, 0xdb, 0x3c, 0x30, 0xca, 0x5e, 0xf8,
	0x80, 0xd6, 0xe9, 0x3e, 0xec, 0x0e, 0xda, 0xf4, 0xa0, 0xe5, 0x0c, 0x5c, 0xa2, 0xe5, 0x2a, 0x55,
	0xe0, 0xa4, 0x6e, 0x70, 0x08, 0xe5, 0x5a, 0xe3, 0x78, 0x02, 0xe8, 0xa9, 0x2d, 0x98, 0x4e, 0x19,
	0x00, 0xf1, 0x5d, 0xc1, 0xa9, 0xc0, 0x20, 0x3f, 0xd1, 0xab, 0x30, 0xb1, 0x6f, 0x76, 0x07, 0x98,
	0x6f, 0x1b, 0x6d, 0xf4, 0xdb, 0xdd, 0xb2, 0x3c, 0xdf, 0x60, 0x13, 0xd6, 0x33, 0xaf, 0x2a, 0xea,
	0x06, 0xcc, 0x48, 0x16, 0x4d, 0xc2, 0x66, 0x36, 0xca, 0xa6, 0x14, 0x25, 0xf1, 0x75, 0x05, 0xca,
	0x11, 0x05, 0xa0, 0x6b, 0x90, 0x67, 0xaf, 0xc0, 0x93, 0xb3, 0x8f, 0x1c, 0xa1, 0x31, 0x7d, 0x97,
	0x62, 0x1b, 0x7c, 0x96, 0xf6, 0x32, 0xe4, 0x19, 0x24, 0x9e, 0x17, 0x15, 0x21, 0xf7, 0x9e, 0x87,
	0xdd, 0x9a, 0x82, 0x6a, 0x50, 0xb9, 0x65, 0xb5, 0xb0, 0xed, 0xe1, 0xad, 0xfb, 0xb8, 0xf5, 0xa0,
	0x96, 0x51, 0x6f, 0x42, 0x35, 0xfe, 0x8a, 0xb1, 0x83, 0x6a, 0x76, 0xfc, 0x45, 0x57, 0xbf, 0x97,
	0x8d, 0x9d, 0x77, 0x1b, 0x50, 0xe6, 0x3b, 0x2c, 0x72, 0xb0, 0x00, 0x06, 0xa2, 0xe7, 0x8a, 0xd7,
	0xa1, 0xdc, 0x72, 0xb1, 0xe9, 0xe3, 0x66, 0xe0, 0x9b, 0xcb, 0x6b, 0xaa, 0xce, 0xd2, 0x3c, 0x5d,
	0xd4, 0x3a, 0xf4, 0x77, 0x45, 0x55, 0xc4, 0x00, 0x86, 0x4e, 0x00, 0x64, 0xf2, 0x3d, 0xcb, 0xb6,
	0xbc, 0xfb, 0x6c, 0x72, 0xf6, 0xe8, 0xc9, 0x0c, 0x9d, 0x4e, 0xfe, 0x64, 0xac, 0x34, 0x30, 0xc4,
	0x1d, 0x8d, 0x3c, 0x91, 0x1b, 0xec, 0x44, 0xce, 0x5c, 0x06, 0x7f, 0xd2, 0xbe, 0xab, 0xc8, 0x8f,
	0xe4, 0x65, 0x28, 0x88, 0x33, 0xb7, 0x82, 0xaa, 0x00, 0xdb, 0xf6, 0x8e, 0xeb, 0x74, 0x5c, 0xec,
	0x79, 0xb5, 0x0c, 0x19, 0xdc, 0xd8, 0x73, 0x5c, 0x1f, 0xb7, 0x6b, 0x59, 0x92, 0xac, 0xde, 0x30,
	0xad, 0x2e, 0x6e, 0xd7, 0x72, 0xa8, 0x02, 0x45, 0x7a, 0x5e, 0x27, 0xd3, 0x26, 0x08, 0xda, 0xee,
	0x80, 0x9e, 0x5c, 0x6b, 0x79, 0x32, 0xb4, 0x65, 0xf6, 0xfd, 0x81, 0x8b, 0xdb, 0xb5, 0x02, 0x42,
	0x50, 0xdd, 0x31, 0x5d, 0x92, 0x3d, 0x0a, 0x8c, 0x62, 0xfa, 0xb0, 0x5f, 0xd2, 0x5e, 0x85, 0xe9,
	0x94, 0x87, 0x4d, 0x95, 0x0e, 0xd8, 0xa4, 0x9a, 0x42, 0x7e, 0x1b, 0x34, 0x1e, 0xd6, 0x32, 0x34,
	0x7c, 0xc5, 0x15, 0x74, 0x0a, 0xe1, 0x2b, 0x91, 0xdc, 0xc5, 0xc3, 0x57, 0x7a, 0x39, 0x44, 0xf8,
	0xda, 0x4b, 0x8d, 0x68, 0x8f, 0x73, 0x22, 0x7c, 0x09, 0xa7, 0x4d, 0xed, 0xef, 0xc5, 0xd8, 0x31,
	0x67, 0x51, 0x4f, 0xa3, 0x44, 0x4f, 0x39, 0x08, 0x72, 0xe4, 0x88, 0x2d, 0x32, 0x04, 0xf2, 0x1b,
	0x6d, 0x43, 0x15, 0xdb, 0x2d, 0xf7, 0x80, 0x1d, 0xfa, 0xc8, 0xa6, 0x66, 0xe7, 0x56, 0xed, 0xf1,
	0x61, 0x63, 0x32, 0x1c, 0x91, 0x9e, 0xc2, 0x22, 0xe3, 0xe4, 0x04, 0x2c, 0xab, 0x5b, 0xe5, 0xe4,
	0x75, 0xab, 0x70, 0xfb, 0x4d, 0xc4, 0x7c, 0x6e, 0x4c, 0xf2, 0xb1, 0xca, 0x57, 0x79, 0x99, 0x4b,
	0x5f, 0x87, 0xb3, 0x74, 0xbd, 0xc9, 0xbe, 0x4b, 0x89, 0x54, 0xa0, 0x33, 0x16, 0x04, 0x42, 0xe2,
	0xc4, 0x82, 0x2e, 0x41, 0xc9, 0xbb, 0x1a, 0x3f, 0x09, 0x96, 0x74, 0x51, 0x02, 0xb9, 0x79, 0xc6,
	0x28, 0x7a, 0xfc, 0xb7, 0xfa, 0x7b, 0xf1, 0xda, 0xd7, 0x27, 0x13, 0xb5, 0xaf, 0x0b, 0xa3, 0xdf,
	0x69, 0xdc, 0x12, 0xd8, 0x55, 0xf9, 0x7e, 0x2b, 0xc1, 0xc4, 0x5d, 0xfa, 0x53, 0x49, 0xef, 0x83,
	0x8c, 0xb6, 0x26, 0x3b, 0x39, 0xe6, 0x21, 0xb3, 0x7b, 0x75, 0x9c, 0x83, 0xe3, 0xef, 0x06, 0x7b,
	0x41, 0xc8, 0x7e, 0xd2, 0xbd, 0xf0, 0x76, 0xb0, 0x17, 0x44, 0x26, 0x22, 0xdb, 0x0b, 0x51, 0x4d,
	0x89, 0x5d, 0x10, 0x85, 0x69, 0xbf, 0xaa, 0x40, 0x25, 0x1a, 0x15, 0x89, 0x45, 0x47, 0x1c, 0x2f,
	0xfd, 0x8d, 0x96, 0xa0, 0x14, 0x24, 0x28, 0x5c, 0x97, 0x21, 0x80, 0xc4, 0xa9, 0x8e, 0xeb, 0x0c,
	0xfa, 0xbc, 0xa2, 0xca, 0x1e, 0x08, 0x9d, 0x07, 0x96, 0xcd, 0xeb, 0x2d, 0x06, 0xfd, 0x4d, 0x92,
	0xa2, 0x7d, 0xec, 0x7a, 0x61, 0xd6, 0x24, 0x1e, 0xb5, 0xbf, 0xa9, 0x00, 0x30, 0x89, 0x45, 0x0e,
	0x99, 0x4c, 0xb3, 0x94, 0xa3, 0xd2, 0xac, 0xcc, 0xa8, 0x34, 0x2b, 0x9b, 0x4a, 0xb3, 0x6e, 0xa6,
	0xd3, 0x2c, 0x96, 0x17, 0x8a, 0x74, 0x63, 0xec, 0xf4, 0x4a, 0x4f, 0xec, 0xbc, 0xf9, 0x28, 0x01,
	0xc9, 0x8e, 0xbb, 0x02, 0xa5, 0x30, 0x33, 0xc9, 0xcb, 0x32, 0x93, 0x70, 0x1c, 0xbd, 0x08, 0x85,
	0x7d, 0xa7, 0x3b, 0xe8, 0xf1, 0x54, 0xb1, 0xbc, 0x86, 0xa2, 0xd4, 0xef, 0xd2, 0x21, 0x43, 0xa0,
	0x44, 0x82, 0x27, 0xf5, 0x4a, 0xc5, 0x68, 0xf0, 0xdc, 0x21, 0xbe, 0xe9, 0x22, 0x4c, 0x78, 0xbe,
	0xd9, 0x61, 0x29, 0x60, 0x75, 0x6d, 0x3a, 0x21, 0x6a, 0x07, 0x1b, 0x6c, 0x3c, 0x9d, 0x33, 0xc2,
	0x38, 0x39, 0x63, 0x59, 0x92, 0x33, 0x6e, 0xa5, 0x4f, 0xe4, 0x15, 0x1e, 0x76, 0x23, 0xcc, 0xe3,
	0xae, 0x3b, 0x79, 0x5a, 0x47, 0x0b, 0x50, 0x68, 0xb9, 0x2c, 0x23, 0x98, 0x64, 0x7b, 0xb9, 0xe5,
	0xd2, 0x6c, 0x60, 0x19, 0xc0, 0x77, 0xc8, 0x81, 0xcb, 0xb3, 0x1e, 0xe1, 0xc5, 0x2a, 0x39, 0xb7,
	0x1b, 0x25, 0x0a, 0xd9, 0xb5, 0x1e, 0x61, 0xa9, 0x03, 0x9d, 0x92, 0x3b, 0x50, 0x69, 0xe2, 0x58,
	0x1b, 0x2f, 0x71, 0x3c, 0x85, 0x9c, 0xee, 0xe3, 0x50, 0x8d, 0xeb, 0x80, 0xcc, 0x1e, 0x04, 0x95,
	0x3d, 0xf2, 0x33, 0xd8, 0x9b, 0x99, 0x70, 0x6f, 0xaa, 0xbf, 0x96, 0x85, 0x3c, 0x33, 0x83, 0x63,
	0x6c, 0xdd, 0x1a, 0x64, 0xfb, 0xfb, 0x2d, 0xbe, 0x71, 0xc9, 0x4f, 0x74, 0x0e, 0x4a, 0x7c, 0xb5,
	0x44, 0xad, 0xd4, 0x28, 0x32, 0xc0, 0x76, 0xfb, 0xa9, 0x2d, 0xbd, 0x01, 0xe5, 0xb6, 0x6b, 0xed,
	0x63, 0xbe, 0x72, 0xec, 0x20, 0x04, 0x0c, 0x44, 0x57, 0x6f, 0x16, 0x26, 0x1e, 0x39, 0x76, 0x70,
	0x0c, 0x62, 0x0f, 0xe8, 0x35, 0x28, 0x38, 0x34, 0x04, 0x8a, 0x93, 0x4f, 0x23, 0x6d, 0xf3, 0xfa,
	0x1d, 0x86, 0xc1, 0xb6, 0xa4, 0xc0, 0x4f, 0x98, 0x43, 0x29, 0x69, 0x0e, 0x0d, 0x28, 0x9b, 0x2d,
	0x7f, 0x20, 0xc6, 0x81, 0x8e, 0x03, 0x03, 0x11, 0x04, 0x75, 0x1d, 0x2a, 0x51, 0xc2, 0x4f, 0xb5,
	0x82, 0xdf, 0xca, 0xc4, 0x82, 0xd7, 0x2b, 0x89, 0xe0, 0xb5, 0x2c, 0x57, 0xd6, 0xb8, 0x41, 0xeb,
	0x4f, 0x7f, 0x91, 0xb3, 0x44, 0x34, 0x0f, 0x88, 0x46, 0x7d, 0xf6, 0x8a, 0xef, 0x58, 0x9e, 0x47,
	0xe0, 0xa0, 0xd9, 0x30, 0x41, 0xdd, 0x4a, 0x4a, 0xe6, 0x6d, 0xdb, 0x22, 0x44, 0x6b, 0x0a, 0x9a,
	0x82, 0xf2, 0x4e, 0xe8, 0x54, 0x6a, 0x19, 0x72, 0xd8, 0xd8, 0x89, 0x38, 0x90, 0x5a, 0x96, 0xe0,
	0xb3, 0x55, 0xf7, 0x6a, 0x39, 0x32, 0xbc, 0xd1, 0xef, 0x77, 0x2d, 0x16, 0x01, 0xbc, 0xda, 0x04,
	0x89, 0xbe, 0x37, 0x2c, 0xdb, 0xec, 0xd6, 0xf2, 0x9a, 0x03, 0x15, 0x26, 0xc2, 0x71, 0x1a, 0x53,
	0x6b, 0x81, 0xf7, 0x8c, 0x44, 0xd2, 0x72, 0x64, 0xd9, 0xf8, 0x0c, 0xee, 0x50, 0x69, 0xfc, 0xfc,
	0xcf, 0x2c, 0x94, 0x88, 0x94, 0x6c, 0xcd, 0x5f, 0x87, 0x09, 0xe2, 0x07, 0xc5, 0x11, 0x68, 0x46,
	0x0f, 0x86, 0xe8, 0xaf, 0x6d, 0x1f, 0xf7, 0x36, 0x6b, 0x4f, 0x0e, 0x1b, 0x95, 0x03, 0xb3, 0xd7,
	0x5d, 0xd7, 0x28, 0xae, 0x66, 0xb0, 0x39, 0xea, 0x6f, 0x64, 0xa0, 0x28, 0xb0, 0x50, 0x13, 0x2a,
	0x7d, 0xa7, 0x1d, 0x04, 0x27, 0x4e, 0xf0, 0x79, 0x09, 0x41, 0x7d, 0xc7, 0x69, 0x0b, 0xbf, 0x43,
	0x8d, 0x76, 0x73, 0xfe, 0xc9, 0x61, 0x03, 0x31, 0x0e, 0xfd, 0x70, 0x4c, 0x33, 0xca, 0x91, 0x27,
	0xf4, 0x26, 0x14, 0xcc, 0x16, 0xdb, 0x64, 0x19, 0x4a, 0x7b, 0x3a, 0x42, 0x7b, 0x83, 0x8e, 0x6c,
	0xa2, 0x27, 0x87, 0x8d, 0x2a, 0x23, 0xc4, 0x71, 0x35, 0x43, 0xcc, 0x22, 0x9e, 0xa5, 0xe5, 0xd8,
	0x24, 0xd7, 0xc7, 0x2e, 0xf7, 0x20, 0x21, 0x40, 0xbd, 0x06, 0xb5, 0xa4, 0x5c, 0x4f, 0xb5, 0x99,
	0xc8, 0xa1, 0x88, 0x49, 0x81, 0x5e, 0x01, 0xaa, 0x70, 0x92, 0x56, 0xd8, 0xcc, 0x1d, 0x16, 0x37,
	0xe7, 0x9e, 0x1c, 0x36, 0xa6, 0x99, 0x64, 0xe1, 0x98, 0x66, 0x44, 0x10, 0xd1, 0x75, 0x98, 0x76,
	0x07, 0x24, 0x29, 0x6a, 0x12, 0x5b, 0xa4, 0xc5, 0x28, 0x5e, 0x68, 0xda, 0x3c, 0xfb, 0xe4, 0xb0,
	0x31, 0x27, 0x96, 0xc0, 0xde, 0xb6, 0x77, 0x29, 0xc2, 0x8e, 0xd3, 0xd6, 0x8c, 0x6a, 0x1c, 0x10,
	0x4a, 0x98, 0x8d, 0x48, 0xa8, 0xbd, 0x0f, 0x60, 0x84, 0xe7, 0x99, 0xa7, 0x32, 0xb2, 0x55, 0x00,
	0xba, 0xdc, 0x51, 0x1b, 0x83, 0x50, 0xf5, 0x1c, 0xbf, 0xe4, 0x0a, 0x80, 0xf6, 0x06, 0x4c, 0x1a,
	0xb8, 0xdf, 0x35, 0x5b, 0xbc, 0x6e, 0xa6, 0x5d, 0x91, 0x65, 0xa2, 0xe1, 0xc1, 0x4b, 0x89, 0x1c,
	0xc8, 0x32, 0xda, 0x5f, 0x55, 0xa0, 0xcc, 0x5b, 0xcb, 0xd4, 0x42, 0xe7, 0x21, 0xcf, 0xac, 0x97,
	0x2f, 0x03, 0x7f, 0x92, 0x65, 0x5c, 0x19, 0x69, 0xc6, 0xb5, 0x9d, 0xce, 0x9b, 0xb2, 0xd4, 0x7e,
	0x56, 0xf4, 0x08, 0x9f, 0xb1, 0x12, 0xa7, 0x3b, 0x30, 0x1d, 0x84, 0xa2, 0x66, 0xcf, 0xec, 0xf7,
	0x2d, 0xbb, 0xc3, 0x93, 0x30, 0x2d, 0x46, 0xec, 0xb6, 0xc0, 0x7a, 0x87, 0x21, 0x31, 0x72, 0x35,
	0x3b, 0x01, 0x46, 0xeb, 0x50, 0x75, 0x99, 0xaa, 0x44, 0xdd, 0x70, 0x82, 0xba, 0xde, 0x19, 0x3d,
	0xa6, 0x41, 0x5d, 0x54, 0x09, 0x23, 0xb0, 0x48, 0xdf, 0x3f, 0xcf, 0xfb, 0xfe, 0x51, 0x09, 0x24,
	0xc1, 0xed, 0xf5, 0x68, 0x1a, 0xc7, 0x72, 0xb3, 0xe5, 0xd8, 0x1c, 0xfe, 0xbb, 0x2d, 0xd2, 0x84,
	0x68, 0x5a, 0xf7, 0x52, 0x98, 0xd6, 0x15, 0x85, 0xab, 0x88, 0x4c, 0x4d, 0xe6, 0x75, 0x91, 0x34,
	0xb7, 0x14, 0x4f, 0x73, 0xdf, 0x86, 0x86, 0xc8, 0x5a, 0x58, 0x0c, 0x34, 0xbb, 0x41, 0xfa, 0xd2,
	0x24, 0x47, 0x54, 0x6f, 0x11, 0x68, 0x6c, 0x5d, 0xe2, 0x68, 0x77, 0x38, 0x96, 0x90, 0x8a, 0xe8,
	0x22, 0x19, 0x37, 0xcb, 0xc9, 0xb8, 0x29, 0xcd, 0x8d, 0x2a, 0xcf, 0x2c, 0x37, 0xda, 0x82, 0x39,
	0xa9, 0x09, 0x3c, 0x15, 0x91, 0xbf, 0x50, 0xa0, 0x96, 0x5c, 0x92, 0x9f, 0xcf, 0x69, 0xe7, 0xa9,
	0x6d, 0x4d, 0xfd, 0x66, 0x98, 0xe4, 0xf1, 0x94, 0x4d, 0x09, 0x53, 0xb6, 0x17, 0xa0, 0xc6, 0xd7,
	0x3b, 0x29, 0xf6, 0x14, 0x83, 0x07, 0xba, 0xa3, 0xbd, 0x7e, 0x86, 0xca, 0x2c, 0x8b, 0xbf, 0x44,
	0x85, 0x01, 0x39, 0x87, 0x0b, 0x64, 0x17, 0x51, 0x71, 0x04, 0x16, 0x7b, 0xab, 0x49, 0x0e, 0xe5,
	0x68, 0xab, 0x89, 0x64, 0xf0, 0xc8, 0x0d, 0x73, 0xcc, 0x6c, 0x70, 0x3d, 0x99, 0x0d, 0xae, 0x48,
	0xb6, 0xca, 0xb1, 0xd2, 0xc1, 0x13, 0x65, 0x7b, 0xff, 0x7a, 0xd4, 0x35, 0x1d, 0xb9, 0x36, 0xc6,
	0x4d, 0xf7, 0x7e, 0xfd, 0x19, 0xa6, 0x7b, 0x2c, 0x70, 0x0c, 0x4b, 0xf7, 0x34, 0x8f, 0x04, 0x20,
	0xfa, 0x2e, 0xc7, 0x89, 0x77, 0xaf, 0x40, 0x45, 0x58, 0x93, 0x15, 0xbd, 0xee, 0x13, 0x51, 0x0f,
	0x9f, 0x53, 0x76, 0x43, 0x90, 0x36, 0x07, 0x33, 0x37, 0xb1, 0xd9, 0xf5, 0xef, 0x73, 0x7d, 0xe1,
	0xaf, 0x0c, 0xb0, 0xe7, 0x6b, 0xf3, 0x30, 0x1b, 0x07, 0x7b, 0x7d, 0xc7, 0xf6, 0xb0, 0xf6, 0x35,
	0x28, 0xbd, 0x6b, 0xf5, 0xb0, 0x61, 0xda, 0x1d, 0x8c, 0x5e, 0x03, 0xf0, 0x7c, 0xd3, 0xf5, 0x9b,
	0x41, 0x0f, 0x74, 0x74, 0x8d, 0xb7, 0x44, 0xb1, 0x69, 0x89, 0xf7, 0x15, 0x7a, 0x1f, 0x67, 0xdc,
	0xca, 0x72, 0x01, 0xdb, 0x6d, 0xf2, 0xa4, 0xfd, 0x75, 0x06, 0x6a, 0x6f, 0xdb, 0x83, 0x1e, 0x76,
	0x4d, 0x9f, 0x7b, 0x58, 0x8f, 0x1c, 0x00, 0x68, 0xc0, 0x13, 0xd9, 0xe0, 0xb2, 0x9e, 0x44, 0x61,
	0x51, 0x92, 0x1b, 0x2d, 0x47, 0x26, 0xdb, 0xa4, 0x67, 0x3e, 0x6c, 0x3a, 0x54, 0xd7, 0x1e, 0x95,
	0x22, 0x67, 0x40, 0xcf, 0x7c, 0xc8, 0xb4, 0xef, 0xa1, 0x17, 0x00, 0x88, 0x7c, 0x4d, 0x97, 0xbc,
	0x2c, 0x2f, 0x61, 0x83, 0x1e, 0xbc, 0xbe, 0x51, 0xf2, 0x03, 0x4d, 0x34, 0xa0, 0x4c, 0xf6, 0x5a,
	0xf3, 0x9e, 0xd5, 0x25, 0xb1, 0x83, 0xed, 0x63, 0x5a, 0x05, 0xb9, 0x41, 0x21, 0x48, 0x87, 0x19,
	0x1e, 0x49, 0x9a, 0x51, 0x44, 0xe6, 0xaf, 0xa6, 0xf9, 0xd0, 0xed, 0x10, 0xff, 0x3c, 0x54, 0x98,
	0x60, 0x4d, 0xcb, 0x6e, 0xe3, 0x87, 0x74, 0x13, 0xe7, 0x8c, 0x32, 0x83, 0x6d, 0x13, 0x90, 0xfa,
	0x1a, 0x94, 0x23, 0xaf, 0xf5, 0x34, 0x7b, 0x4a, 0xfb, 0x86, 0x02, 0xe7, 0xe2, 0x2d, 0xc8, 0x2d,
	0x5a, 0xba, 0xe7, 0xab, 0x8f, 0x5e, 0x4e, 0x19, 0xde, 0x94, 0xce, 0x30, 0x86, 0x9a, 0xdf, 0x1b,
	0xe9, 0x6e, 0xe4, 0xf0, 0x66, 0x67, 0xb2, 0x45, 0xa9, 0xd5, 0x61, 0x49, 0x2e, 0x0f, 0x37, 0xbb,
	0xb4, 0xc0, 0xef, 0xf5, 0xdb, 0xbf, 0x50, 0x02, 0x0b, 0x79, 0xb8, 0xc0, 0x7f, 0xa6, 0x40, 0x3d,
	0x8e, 0x10, 0xd8, 0xa4, 0x90, 0x79, 0x0e, 0xf2, 0x8e, 0xdb, 0x09, 0xef, 0x14, 0x4d, 0x38, 0x6e,
	0x67, 0xbb, 0x8d, 0xb6, 0x02, 0x6b, 0x66, 0xc7, 0x85, 0x2b, 0xfa, 0x68, 0x3a, 0x32, 0xdb, 0x3e,
	0x89, 0x6d, 0x60, 0x68, 0x0c, 0x65, 0xc8, 0x5e, 0x0e, 0x6d, 0xc2, 0x74, 0x5c, 0x75, 0x56, 0x70,
	0x12, 0x9b, 0xd3, 0x65, 0x8d, 0x74, 0xa3, 0x16, 0x53, 0x9f, 0x85, 0x3d, 0x6d, 0x3b, 0xa9, 0xc0,
	0x6d, 0xdb, 0xeb, 0x13, 0xd4, 0xd1, 0xda, 0x91, 0x54, 0x66, 0xb4, 0x26, 0x2c, 0x0f, 0x21, 0xc5,
	0xe5, 0xbd, 0x26, 0xef, 0x94, 0x0f, 0x95, 0x36, 0xb9, 0xd8, 0x37, 0x93, 0xc6, 0x77, 0x9d, 0xdf,
	0x24, 0x7d, 0x6a, 0x51, 0x53, 0x66, 0x23, 0x28, 0x71, 0xb3, 0xf9, 0x51, 0x0e, 0xce, 0xc5, 0xab,
	0x53, 0x27, 0xde, 0x98, 0x17, 0xe5, 0x76, 0x9e, 0xbe, 0x26, 0x70, 0xba, 0x97, 0x01, 0x24, 0xe7,
	0x9c, 0xdc, 0x51, 0x95, 0xe5, 0x89, 0x51, 0x95, 0xe5, 0x7c, 0xaa, 0xb2, 0xfc, 0x85, 0xf4, 0x09,
	0x89, 0x1d, 0x0f, 0x3e, 0xaa, 0x8f, 0xd0, 0xe1, 0xf1, 0x3a, 0xf9, 0xc5, 0x71, 0xaa, 0xb2, 0x25,
	0x49, 0x55, 0x56, 0x9a, 0xd1, 0xc3, 0xb3, 0xca, 0xe8, 0x89, 0xc1, 0xc9, 0x75, 0xc1, 0x0d, 0xee,
	0xdf, 0x52, 0x06, 0x77, 0x62, 0xc7, 0xfa, 0x7f, 0x06, 0x17, 0xd7, 0xe1, 0x33, 0x36, 0xb8, 0xc8,
	0x6d, 0x1f, 0x88, 0xdf, 0xf6, 0x91, 0x9a, 0x62, 0xf9, 0xe7, 0x67, 0x8a, 0x92, 0x90, 0x19, 0x47,
	0x38, 0x7e, 0xc8, 0x1c, 0x4d, 0xe7, 0xb4, 0x43, 0x66, 0x0b, 0x1a, 0x43, 0x19, 0xf2, 0x10, 0xf4,
	0x16, 0xd4, 0x12, 0xcd, 0x99, 0x30, 0x62, 0xca, 0x7a, 0xf7, 0xc6, 0x54, 0xbc, 0x31, 0x43, 0x03,
	0x66, 0x72, 0x5b, 0x9c, 0x20, 0x60, 0x0e, 0x21, 0x15, 0x06, 0xcc, 0x64, 0x2b, 0x49, 0x04, 0x4c,
	0xa9, 0xb0, 0x89, 0x2e, 0x92, 0xe6, 0x24, 0x9d, 0xca, 0x71, 0x03, 0xa6, 0xa4, 0x6b, 0x9e, 0x95,
	0x74, 0xcd, 0xd3, 0xb6, 0x95, 0x88, 0xab, 0xff, 0xa1, 0xc0, 0x2c, 0xff, 0xee, 0xe1, 0xc4, 0x01,
	0x35, 0xf6, 0x69, 0x4d, 0xe6, 0x78, 0x9f, 0xd6, 0x64, 0x4f, 0xe7, 0xd3, 0x1a, 0xf9, 0x15, 0x05,
	0x6d, 0x01, 0xe6, 0x12, 0x2f, 0x9b, 0x56, 0xc3, 0x89, 0xdd, 0xfc, 0xff, 0x26, 0x35, 0x24, 0x3c,
	0xcd, 0x4f, 0x14, 0x58, 0xe0, 0x23, 0xe3, 0xba, 0x98, 0x37, 0x12, 0x2e, 0xe6, 0x79, 0x7d, 0x08,
	0x01, 0xe9, 0x51, 0xf3, 0x22, 0x4c, 0x09, 0xcf, 0xcb, 0xbe, 0xa4, 0x10, 0x66, 0x5c, 0xe5, 0x60,
	0xf6, 0x01, 0xc5, 0x89, 0x9c, 0xd0, 0x0d, 0x58, 0x4c, 0x8b, 0xc4, 0xf7, 0xf3, 0x65, 0x28, 0xf2,
	0x18, 0x27, 0xbc, 0x4e, 0x55, 0x8f, 0x7d, 0x58, 0x64, 0x04, 0xe3, 0xda, 0x83, 0x40, 0x6b, 0xc7,
	0x76, 0x30, 0x63, 0xbf, 0xaf, 0xb6, 0x09, 0xf3, 0x49, 0x66, 0x5c, 0xe4, 0x4b, 0x61, 0x94, 0x66,
	0x06, 0x99, 0x94, 0x58, 0x0c, 0x6b, 0xdf, 0x0a, 0x8d, 0xfa, 0x67, 0xec, 0x66, 0x64, 0xdf, 0x96,
	0xe5, 0x64, 0xdf, 0x96, 0x45, 0x4c, 0x2f, 0xe1, 0x88, 0x7e, 0x5b, 0x81, 0xa5, 0xc4, 0xb5, 0x9d,
	0x13, 0x3b, 0xa4, 0x37, 0x25, 0x5b, 0x62, 0xd4, 0x47, 0x0d, 0xa9, 0x8d, 0xd2, 0x80, 0xe5, 0x21,
	0x32, 0x0d, 0x97, 0xfa, 0xc4, 0xfe, 0xe3, 0x67, 0x20, 0x75, 0x62, 0x9b, 0x9b, 0xd0, 0x48, 0x20,
	0x8c, 0xbb, 0xdb, 0x25, 0xf6, 0x9b, 0x91, 0xda, 0x6f, 0x07, 0x56, 0x86, 0xb3, 0xe0, 0x96, 0xbc,
	0x05, 0xd3, 0xc9, 0x17, 0x15, 0xbb, 0x70, 0x5e, 0x97, 0x7e, 0xe4, 0x62, 0xd4, 0x12, 0xef, 0xea,
	0x69, 0x5e, 0xea, 0x65, 0x9f, 0xc1, 0xee, 0x6c, 0x41, 0x7d, 0x18, 0x53, 0xfe, 0x6e, 0x1b, 0x92,
	0x45, 0x54, 0xf8, 0x95, 0x05, 0xf9, 0xab, 0xa5, 0x96, 0x71, 0x3b, 0x65, 0x5a, 0xc7, 0x3e, 0x5d,
	0xa7, 0x2d, 0x22, 0xb1, 0xfb, 0xbe, 0xa1, 0x88, 0xc4, 0x44, 0x9c, 0x06, 0x4e, 0xa3, 0xee, 0x25,
	0xeb, 0xe7, 0x0d, 0xb9, 0x19, 0x96, 0x38, 0x8b, 0x84, 0x79, 0x4b, 0x52, 0x9e, 0xa1, 0x02, 0x9f,
	0x46, 0xdd, 0xeb, 0x34, 0x05, 0x1e, 0x9a, 0xc4, 0x0b, 0x84, 0x93, 0x26, 0xf1, 0xc3, 0xe8, 0xfc,
	0xcc, 0x92, 0x78, 0x09, 0xc3, 0x54, 0x12, 0x2f, 0x54, 0x97, 0x4c, 0xe2, 0xe3, 0x97, 0x0e, 0x45,
	0x12, 0x2f, 0xa0, 0x91, 0x24, 0x3e, 0x54, 0xf2, 0x89, 0x93, 0xf8, 0x14, 0xa9, 0x54, 0x12, 0x1f,
	0xbb, 0xdb, 0x37, 0x54, 0xd8, 0xe4, 0x52, 0x3b, 0x49, 0xd3, 0x7b, 0x66, 0x49, 0x7c, 0x92, 0x21,
	0xb7, 0xad, 0x4f, 0x27, 0xdf, 0xf8, 0x2e, 0xbf, 0x07, 0x7b, 0x0c, 0xed, 0xad, 0x24, 0xcd, 0x34,
	0xa4, 0xc5, 0xb9, 0xe9, 0x30, 0xf7, 0x0e, 0xf6, 0x5d, 0xab, 0xe5, 0x8d, 0xb5, 0x46, 0xda, 0xbf,
	0x2b, 0x30, 0x9f, 0x9c, 0xc0, 0x57, 0xe2, 0x2a, 0xbd, 0x0c, 0xe8, 0x87, 0xfd, 0x09, 0x39, 0x1e,
	0x6d, 0x59, 0x79, 0x06, 0xc3, 0x55, 0xbf, 0xa3, 0xd0, 0x2b, 0x3d, 0x7e, 0xac, 0x29, 0xad, 0xc4,
	0x0b, 0x16, 0x17, 0xa0, 0x6a, 0x0f, 0x7a, 0xcd, 0x48, 0xd1, 0x82, 0x75, 0x31, 0x26, 0xed, 0x41,
	0xef, 0x76, 0x58, 0xb7, 0xb8, 0x0c, 0xd3, 0xac, 0x3b, 0x27, 0x0e, 0x75, 0xd6, 0x23, 0xd6, 0xcf,
	0xc8, 0x19, 0x53, 0x74, 0x80, 0x9f, 0x9d, 0xac, 0x47, 0xb4, 0x73, 0x49, 0x48, 0x86, 0xa7, 0xd4,
	0x1c, 0xc5, 0xab, 0xd8, 0x83, 0x5e, 0x78, 0x16, 0xfd, 0xdb, 0x2c, 0xcc, 0xb0, 0x39, 0xa7, 0x51,
	0x9e, 0x1c, 0xef, 0x3e, 0x44, 0x44, 0x0b, 0xd9, 0x51, 0x65, 0x9b, 0x5c, 0xaa, 0x6c, 0xf3, 0xd9,
	0x74, 0xd9, 0x66, 0x82, 0x2e, 0xc4, 0x25, 0x5d, 0xf2, 0x12, 0xc7, 0x2b, 0xd7, 0xe4, 0xc7, 0x29,
	0xd7, 0x14, 0xc6, 0xad, 0x0f, 0x16, 0x9f, 0x59, 0x51, 0x66, 0x5e, 0x5c, 0x97, 0x4e, 0x04, 0x1e,
	0x4f, 0x2c, 0xf0, 0x89, 0xe3, 0xcd, 0x0b, 0x43, 0xf2, 0x3c, 0xc9, 0x81, 0x2d, 0x10, 0x26, 0x11,
	0x54, 0x06, 0x30, 0xcf, 0xe0, 0xe3, 0xc6, 0x92, 0xeb, 0x30, 0x8d, 0x05, 0x6a, 0x53, 0x34, 0xb5,
	0x59, 0x94, 0x9b, 0x4e, 0x35, 0x07, 0xb9, 0xc4, 0x35, 0x9c, 0x80, 0x6b, 0xff, 0x1f, 0x16, 0x52,
	0x6c, 0xf9, 0x8e, 0xbe, 0x08, 0x05, 0xe1, 0xca, 0x14, 0xbe, 0x56, 0xd1, 0xeb, 0x70, 0x86, 0x18,
	0x45, 0x0d, 0x28, 0xb3, 0xad, 0xc7, 0xbe, 0x53, 0xe4, 0x4d, 0x46, 0x0a, 0x62, 0x9f, 0xc2, 0xaa,
	0x50, 0x6c, 0x39, 0xbd, 0x3e, 0x71, 0x74, 0xdc, 0x2b, 0x06, 0xcf, 0xda, 0x86, 0xd0, 0x47, 0xc2,
	0x03, 0xc9, 0x2e, 0x53, 0x84, 0x9a, 0xc8, 0x44, 0xbd, 0xd2, 0x35, 0x98, 0x4b, 0x90, 0xe0, 0x6f,
	0x70, 0x21, 0x76, 0x3f, 0x29, 0xf5, 0x02, 0x7c, 0x50, 0x7b, 0x4b, 0xd8, 0x41, 0xdc, 0xf9, 0x3f,
	0x85, 0x04, 0xc1, 0xa2, 0x26, 0xbc, 0xf9, 0x3f, 0x66, 0x61, 0x96, 0x9f, 0x97, 0x4e, 0xec, 0x44,
	0xc2, 0xcb, 0x56, 0x99, 0xd8, 0x65, 0xab, 0xe1, 0x3e, 0xe3, 0xf3, 0xc3, 0xaf, 0x44, 0x5d, 0xd1,
	0x65, 0x62, 0x3d, 0x93, 0xbb, 0x51, 0x63, 0x5c, 0x32, 0xca, 0x8f, 0x71, 0xc9, 0x48, 0xea, 0x53,
	0x0a, 0xe3, 0xf9, 0x94, 0xd3, 0xb8, 0x02, 0x44, 0x8e, 0xbf, 0x09, 0x1d, 0xf2, 0x45, 0xdf, 0x0e,
	0xd6, 0xfc, 0xa4, 0x7e, 0x25, 0xc2, 0x23, 0xe1, 0x2d, 0xf6, 0x61, 0x81, 0x0f, 0x3c, 0x5b, 0x77,
	0xf1, 0x2b, 0x0a, 0x2c, 0xa6, 0x19, 0x87, 0x15, 0x98, 0xa0, 0x64, 0x20, 0x2a, 0x30, 0xb1, 0xcb,
	0x1e, 0x46, 0x30, 0x7e, 0x32, 0x9f, 0xb1, 0x19, 0xa8, 0xe5, 0xf8, 0xa9, 0xe5, 0x26, 0xcc, 0x27,
	0x69, 0x84, 0x55, 0x19, 0x2e, 0x66, 0x50, 0x95, 0x89, 0xbf, 0x85, 0x18, 0x26, 0xbe, 0x8b, 0x8f,
	0x1c, 0xfb, 0x38, 0x17, 0xae, 0x70, 0xc2, 0x75, 0xdc, 0x86, 0xb3, 0xd1, 0xff, 0x97, 0x74, 0x52,
	0xf7, 0xa1, 0x2d, 0x81, 0x2a, 0xa3, 0xc7, 0xb9, 0xd5, 0x61, 0x29, 0x3a, 0x9a, 0x34, 0x2a, 0xed,
	0x8b, 0xb0, 0x3c, 0x64, 0x9c, 0x2b, 0xed, 0x35, 0x98, 0x74, 0x22, 0x08, 0xe1, 0xa5, 0xe5, 0xf4,
	0x3f, 0x7d, 0x32, 0xe2, 0x98, 0xda, 0x47, 0xe3, 0x92, 0x0d, 0x89, 0x03, 0x51, 0xa5, 0xdd, 0x85,
	0x73, 0xd2, 0x19, 0x5c, 0x96, 0x4f, 0x40, 0x25, 0xca, 0x81, 0x6b, 0x48, 0x2a, 0x4a, 0x0c, 0x51,
	0xfb, 0x0a, 0x4c, 0x1b, 0xa7, 0xd1, 0x8e, 0x7e, 0x61, 0xf4, 0xb5, 0xdc, 0xe8, 0x85, 0xdc, 0x59,
	0x40, 0x46, 0xba, 0x63, 0xc9, 0x05, 0x39, 0x85, 0xbc, 0xe4, 0x69, 0x05, 0x49, 0xf8, 0x99, 0x97,
	0x60, 0xd6, 0x18, 0xbf, 0x49, 0xa5, 0xad, 0xc3, 0x9c, 0x21, 0x6d, 0x0d, 0x9d, 0x8f, 0xdf, 0x65,
	0x2f, 0xeb, 0xe1, 0x8d, 0x67, 0x7e, 0x63, 0x5d, 0x7b, 0x93, 0x09, 0x70, 0xfc, 0x1d, 0xfd, 0x71,
	0x98, 0x31, 0x24, 0x7d, 0x9e, 0x06, 0xe4, 0xdc, 0xb0, 0xb9, 0x13, 0xe3, 0x4c, 0x07, 0xb4, 0x6b,
	0x4c, 0xd9, 0xc7, 0xde, 0xc2, 0x5c, 0x73, 0x89, 0xfd, 0xfb, 0x5b, 0x0a, 0x94, 0xef, 0xb2, 0x2b,
	0x9a, 0xf4, 0x4e, 0xdf, 0x2c, 0x4c, 0xf4, 0xcc, 0xf7, 0x1d, 0x71, 0xbc, 0x61, 0x0f, 0x14, 0x6a,
	0xd9, 0x8e, 0xf8, 0xe0, 0x8c, 0x3d, 0x10, 0x68, 0xdf, 0xf4, 0x5b, 0xf7, 0xc5, 0xb5, 0x50, 0xfa,
	0x80, 0x96, 0x01, 0x3a, 0x96, 0xdf, 0x6c, 0x39, 0xbd, 0x9e, 0xe5, 0xf3, 0x7e, 0x40, 0xa9, 0x63,
	0xf9, 0x5b, 0x14, 0x40, 0x86, 0xf7, 0x06, 0x56, 0xb7, 0xdd, 0xa4, 0xff, 0x79, 0x82, 0x75, 0x7d,
	0x4b, 0x14, 0x72, 0xdd, 0xf4, 0xb1, 0x36, 0x03, 0xd3, 0x5c, 0x9c, 0x4f, 0x61, 0xa1, 0x5d, 0xed,
	0x0d, 0x40, 0x51, 0x20, 0xd7, 0xd8, 0x47, 0xc2, 0xbb, 0xa6, 0x0a, 0xbf, 0x60, 0x17, 0x79, 0x93,
	0xf0, 0x3b, 0xbb, 0x6f, 0x2b, 0x30, 0xcf, 0xbf, 0xe4, 0xde, 0x68, 0xf9, 0xd6, 0xfe, 0xc9, 0x6c,
	0xf5, 0x39, 0x98, 0x34, 0x19, 0x15, 0xfe, 0xef, 0x8d, 0x98, 0x4a, 0x2a, 0x21, 0x70, 0xbb, 0x8d,
	0xce, 0x43, 0xa5, 0xcb, 0x38, 0x36, 0x29, 0x6d, 0xa2, 0xa0, 0x8a, 0x51, 0xe6, 0xb0, 0xeb, 0xc4,
	0xd1, 0x9d, 0x85, 0x85, 0x94, 0x50, 0xe1, 0x71, 0x97, 0x0f, 0x8d, 0x77, 0xdc, 0xfd, 0x62, 0xf0,
	0x7e, 0x49, 0xa3, 0x7a, 0x0b, 0xa6, 0x85, 0x1c, 0x2e, 0xf6, 0xf8, 0x37, 0x1e, 0x0a, 0xaf, 0xec,
	0xf2, 0x39, 0x02, 0x99, 0x55, 0x76, 0xbb, 0x21, 0x90, 0xee, 0xb7, 0xff, 0xce, 0xc0, 0x8c, 0x04,
	0x11, 0x6d, 0x41, 0xe5, 0x1e, 0x36, 0xfd, 0x81, 0xb8, 0xe2, 0xa8, 0xf0, 0x6b, 0xaa, 0x12, 0x5c,
	0xfd, 0x06, 0x43, 0xa4, 0x0c, 0xca, 0xf7, 0xc2, 0x07, 0xf5, 0x1b, 0x0a, 0x94, 0x23, 0x83, 0xd2,
	0x54, 0x96, 0x06, 0x58, 0xdb, 0x1b, 0xf4, 0x70, 0x9b, 0xff, 0x13, 0x97, 0xe0, 0x19, 0xdd, 0x81,
	0x1a, 0x39, 0xae, 0xf8, 0x5d, 0xfa, 0x2f, 0x44, 0x98, 0x20, 0x59, 0xde, 0x13, 0x92, 0x09, 0xf2,
	0x76, 0x88, 0xcc, 0xde, 0x16, 0xc7, 0x01, 0xea, 0xb7, 0x14, 0x98, 0x4a, 0x20, 0x11, 0x2b, 0x0f,
	0xff, 0x41, 0x4e, 0x96, 0xff, 0x57, 0x1c, 0xf4, 0x31, 0x28, 0xe0, 0x87, 0x7d, 0xcb, 0xc5, 0xde,
	0x18, 0x1f, 0xd4, 0x0b, 0x54, 0xb4, 0x46, 0x6f, 0xcc, 0xba, 0xbe, 0xf8, 0x47, 0x7b, 0xa3, 0x26,
	0x71, 0xcc, 0xb5, 0x5d, 0xc8, 0xb3, 0xeb, 0x9f, 0x68, 0x3b, 0xb8, 0x1e, 0x3b, 0xab, 0x4b, 0x2e,
	0x8a, 0xaa, 0x73, 0xba, 0xf4, 0x9e, 0x28, 0xfa, 0xe5, 0xbf, 0xff, 0x97, 0x6f, 0x67, 0x2a, 0x08,
	0x56, 0xf7, 0x5f, 0x5e, 0xbd, 0x4f, 0x31, 0xd6, 0x7e, 0x90, 0x83, 0x6a, 0xfc, 0xf6, 0x13, 0x6a,
	0x43, 0x9e, 0x99, 0x3e, 0x5a, 0xd2, 0x47, 0x5c, 0x48, 0x54, 0x97, 0xf5, 0x91, 0xd7, 0x03, 0x97,
	0x29, 0xb7, 0x05, 0x0d, 0x11, 0x6e, 0xa2, 0x74, 0xc1, 0xb2, 0xef, 0x75, 0xe5, 0x32, 0xe1, 0xc2,
	0x7c, 0x77, 0x8a, 0x4b, 0x2c, 0x8a, 0xa4, 0xb8, 0x24, 0x1c, 0x3e, 0xe7, 0xa2, 0x0e, 0xe1, 0xe2,
	0x41, 0x29, 0x70, 0xee, 0xa8, 0x71, 0xc4, 0xad, 0x3d, 0x75, 0x45, 0x3f, 0xe2, 0x96, 0x9d, 0xf6,
	0x1c, 0x65, 0xb7, 0x8c, 0xce, 0xa5, 0xd9, 0xad, 0x7e, 0x95, 0x6d, 0xc9, 0xaf, 0x21, 0x1f, 0x0a,
	0x7c, 0xff, 0xa1, 0x65, 0x7d, 0xd4, 0x85, 0x3a, 0xb5, 0xae, 0x8f, 0xbc, 0x24, 0xa7, 0x5d, 0xa6,
	0xec, 0x9e, 0x47, 0xda, 0x08, 0x76, 0xab, 0x5f, 0x25, 0xdb, 0xe3, 0x6b, 0xe8, 0x2b, 0xe2, 0xc3,
	0x97, 0x94, 0x42, 0x63, 0x91, 0x22, 0xa5, 0xd0, 0x44, 0x1c, 0xe0, 0x2c, 0x2f, 0x8f, 0xc1, 0x92,
	0x1a, 0x4f, 0xe2, 0xbb, 0xcd, 0xa8, 0xf1, 0x8c, 0xb8, 0xf0, 0xa5, 0x2e, 0xeb, 0x23, 0xaf, 0x40,
	0xc5, 0x8c, 0x87, 0x9f, 0xdb, 0x39, 0x66, 0xd2, 0x78, 0x46, 0xdc, 0xf2, 0x49, 0x71, 0x19, 0x65,
	0x3c, 0x69, 0x2e, 0x09, 0xe3, 0x19, 0x7d, 0x7f, 0x45, 0x5d, 0xd1, 0x8f, 0xb8, 0x6f, 0x12, 0x37,
	0x9e, 0x38, 0xbb, 0x21, 0xc6, 0x33, 0xea, 0x72, 0x89, 0x5a, 0xd7, 0x47, 0x5e, 0x18, 0x89, 0x1b,
	0xcf, 0x10, 0x76, 0x32, 0xe3, 0x19, 0x71, 0x4b, 0x24, 0xa5, 0xd0, 0x51, 0xc6, 0x33, 0x9a, 0xe5,
	0xda, 0x0f, 0xb3, 0x50, 0xe0, 0xfd, 0x58, 0x74, 0x27, 0xb0, 0x9a, 0x39, 0x5d, 0x76, 0x25, 0x44,
	0x9d, 0xd7, 0xe5, 0x97, 0x27, 0xe6, 0x29, 0xc3, 0x9a, 0x56, 0xa6, 0xff, 0xbf, 0x95, 0xa1, 0x90,
	0xa5, 0xbb, 0x13, 0x18, 0x48, 0x40, 0x30, 0x6e, 0x19, 0xf3, 0xba, 0xfc, 0x1a, 0x02, 0x27, 0xa8,
	0x26, 0x09, 0x7e, 0x39, 0x6a, 0x0b, 0x8b, 0xc3, 0x2e, 0x1a, 0xa8, 0x67, 0xf5, 0x61, 0xfd, 0x7e,
	0x6d, 0x89, 0x52, 0x9e, 0x47, 0xb3, 0x11, 0xca, 0xe1, 0xb2, 0x37, 0xc3, 0x65, 0x9f, 0xd7, 0xa5,
	0xbd, 0x7e, 0x75, 0x41, 0x97, 0xb7, 0xe5, 0xe3, 0x76, 0x95, 0xa4, 0x2c, 0x56, 0xf8, 0x4b, 0xc1,
	0x0a, 0x07, 0x1a, 0x89, 0x2f, 0xed, 0xbc, 0x2e, 0xef, 0x8e, 0x73, 0xea, 0x97, 0x47, 0x51, 0x5f,
	0xfb, 0x61, 0x0e, 0xa6, 0x92, 0xff, 0xf9, 0xa2, 0x13, 0x2c, 0xea, 0xb2, 0x3e, 0xaa, 0xbd, 0xae,
	0xd6, 0xf5, 0xd1, 0x9d, 0xee, 0x3a, 0x95, 0x60, 0x51, 0x9b, 0x61, 0x12, 0x38, 0x83, 0x76, 0x58,
	0xb6, 0x24, 0x6b, 0xd3, 0x09, 0x16, 0x3b, 0xc5, 0x28, 0xbe, 0xe8, 0x75, 0x7d, 0x74, 0x73, 0x9a,
	0x33, 0x52, 0x87, 0x31, 0xda, 0x8f, 0x1a, 0xc1, 0x8a, 0x7e, 0x44, 0x23, 0x5b, 0x3d, 0xaf, 0x1f,
	0xd5, 0x87, 0xd6, 0x9e, 0xa7, 0x1c, 0xeb, 0x68, 0x49, 0xc2, 0x31, 0x34, 0x8e, 0x0f, 0x42, 0xe3,
	0xa8, 0xeb, 0x23, 0x5b, 0xce, 0x6a, 0x43, 0x1f, 0xdd, 0x1d, 0xd6, 0xae, 0x50, 0x8e, 0x17, 0xd0,
	0x73, 0xa3, 0x38, 0x0a, 0xa3, 0xf1, 0x03, 0xa3, 0x49, 0x69, 0x36, 0x6e, 0x3c, 0x75, 0x7d, 0x74,
	0x93, 0x97, 0x73, 0xbd, 0x3c, 0x0e, 0xd7, 0xb5, 0x3f, 0x9e, 0x10, 0x61, 0x25, 0x68, 0x34, 0xa4,
	0xc3, 0x8a, 0xb4, 0x59, 0x1c, 0xf8, 0xa7, 0x21, 0xad, 0x5b, 0x49, 0x58, 0x11, 0x1d, 0x0e, 0x79,
	0x58, 0x91, 0x76, 0x78, 0x53, 0x5c, 0x8e, 0x0e, 0x2b, 0x51, 0x2e, 0xd2, 0xb0, 0x32, 0xac, 0xa3,
	0x1a, 0x84, 0x95, 0xa1, 0x1d, 0x50, 0x59, 0x58, 0x11, 0xec, 0x46, 0x86, 0x15, 0x79, 0xbb, 0x53,
	0xad, 0xeb, 0x23, 0x5b, 0x98, 0xb2, 0xb0, 0x92, 0x62, 0x37, 0x3c, 0xac, 0x48, 0xfb, 0x96, 0x29,
	0x85, 0x1e, 0x1d, 0x56, 0x86, 0xb2, 0xf4, 0xa0, 0x28, 0xda, 0x86, 0x28, 0xf9, 0x2a, 0x89, 0xde,
	0xa4, 0xda, 0xd0, 0x8f, 0xe8, 0x37, 0x7e, 0x84, 0x32, 0x5e, 0xd1, 0x64, 0xaa, 0x15, 0xff, 0xf0,
	0x67, 0x5d, 0xb9, 0xbc, 0xd6, 0x82, 0x02, 0x6f, 0x1f, 0xa2, 0xcf, 0x47, 0x1d, 0xb9, 0xb4, 0x59,
	0xa9, 0x2e, 0x0c, 0xe9, 0x35, 0xc6, 0x43, 0x44, 0x8f, 0xe1, 0x04, 0x2f, 0xb8, 0xf6, 0x83, 0x2c,
	0xe4, 0x99, 0xbc, 0xe8, 0x56, 0xb0, 0x1d, 0x66, 0x65, 0xed, 0x32, 0x75, 0x4e, 0x97, 0x36, 0x90,
	0xe6, 0x28, 0xfd, 0x29, 0x0d, 0xc2, 0xd7, 0x21, 0x06, 0x79, 0x2b, 0x30, 0x7b, 0x41, 0x2d, 0x6e,
	0xee, 0x73, 0xba, 0xb4, 0x03, 0xc4, 0xa9, 0xa9, 0x09, 0x6a, 0xff, 0x2f, 0x6a, 0xde, 0x0b, 0xba,
	0xbc, 0x49, 0xa4, 0x2e, 0xea, 0x43, 0xda, 0x38, 0xda, 0x39, 0x4a, 0x76, 0x0e, 0xcd, 0x84, 0x64,
	0x43, 0x33, 0xfe, 0x52, 0xa8, 0xdd, 0x39, 0x5d, 0xd6, 0x87, 0x51, 0xe7, 0x75, 0x69, 0x6f, 0x45,
	0xd3, 0x28, 0xd9, 0x25, 0xa4, 0x4a, 0xc8, 0x0a, 0xdb, 0xf9, 0x42, 0x60, 0xae, 0x42, 0x11, 0x71,
	0x33, 0x9d, 0xd3, 0xa5, 0x5d, 0x13, 0x4e, 0xfa, 0xf2, 0x08, 0xd2, 0x34, 0xdb, 0xe1, 0x85, 0xd3,
	0x58, 0xb6, 0x23, 0x6b, 0x6b, 0xa8, 0xf3, 0xba, 0xbc, 0x52, 0x1f, 0xcb, 0x76, 0x78, 0x51, 0x37,
	0x99, 0xed, 0xc8, 0x4a, 0xf9, 0x21, 0xc1, 0x51, 0xd9, 0x4e, 0x84, 0x60, 0x22, 0xdb, 0x19, 0x52,
	0xba, 0x57, 0xcf, 0xea, 0xc3, 0x6a, 0xeb, 0x71, 0x53, 0xe6, 0x94, 0x87, 0x64, 0x3b, 0xd2, 0xd2,
	0xb8, 0xba, 0xa0, 0xcb, 0xcb, 0xdd, 0x71, 0x77, 0x97, 0xa4, 0x2c, 0xcb, 0x76, 0x64, 0x25, 0xef,
	0x50, 0x23, 0xa3, 0xb2, 0x9d, 0x21, 0xd4, 0xd7, 0xfe, 0x32, 0x03, 0x95, 0x68, 0x71, 0x16, 0x7d,
	0x39, 0x58, 0x51, 0x55, 0x1f, 0x5a, 0x05, 0x57, 0xcf, 0xe9, 0x23, 0x2a, 0xda, 0xdc, 0xec, 0xb5,
	0x1a, 0x61, 0x1c, 0xad, 0xf2, 0xb2, 0xc0, 0x14, 0x59, 0x8f, 0x65, 0x7d, 0x54, 0xe9, 0x5b, 0xad,
	0xeb, 0x23, 0x2b, 0xdf, 0xda, 0x22, 0x65, 0x84, 0x50, 0x8a, 0x11, 0xc2, 0xe1, 0xaa, 0xc4, 0x45,
	0x4d, 0x2c, 0xcd, 0x92, 0x3e, 0xa2, 0x9a, 0xad, 0x35, 0x28, 0xfd, 0xb3, 0x68, 0x21, 0x49, 0x5f,
	0x68, 0xef, 0xbb, 0x59, 0x98, 0xa0, 0x25, 0x5d, 0x74, 0x23, 0x50, 0x1b, 0xd2, 0x53, 0x85, 0x6c,
	0x75, 0x46, 0x97, 0x54, 0x9a, 0x67, 0x28, 0xf5, 0x49, 0xad, 0x48, 0xd7, 0x87, 0x1f, 0xd4, 0x6e,
	0x04, 0xf6, 0xcf, 0xe8, 0xc4, 0x8d, 0x7f, 0x46, 0x97, 0x14, 0x8a, 0x39, 0x1d, 0x35, 0x46, 0xe7,
	0xbd, 0xa8, 0x9a, 0xe7, 0x74, 0x59, 0x25, 0x99, 0x18, 0x8e, 0xf4, 0x70, 0x77, 0x96, 0x12, 0x9c,
	0x41, 0xd3, 0x82, 0x60, 0x68, 0xed, 0x77, 0x43, 0xbd, 0x32, 0x59, 0x12, 0xfa, 0x9c, 0xd5, 0x25,
	0x75, 0x60, 0x6d, 0x85, 0x12, 0x54, 0xd1, 0x62, 0x8a, 0xa0, 0x30, 0xf2, 0xdd, 0xc0, 0xc8, 0xd9,
	0x6b, 0xc7, 0x2d, 0x7c, 0x46, 0x97, 0x54, 0x79, 0x39, 0xd1, 0xcb, 0x43, 0x89, 0xae, 0xdd, 0x86,
	0x02, 0x2f, 0x9e, 0xa2, 0x2d, 0xc8, 0x7e, 0x0a, 0xfb, 0x08, 0xe9, 0xa9, 0x42, 0xac, 0x3a, 0xa3,
	0xa7, 0xeb, 0xb0, 0x42, 0xa7, 0x88, 0x7a, 0x13, 0x5e, 0x74, 0x5d, 0xfb, 0x81, 0x02, 0x05, 0x5e,
	0x82, 0x43, 0xef, 0x41, 0x51, 0xd4, 0x38, 0xd1, 0x82, 0x2e, 0x2f, 0xc5, 0xaa, 0x8b, 0xfa, 0xb0,
	0x72, 0x68, 0xcc, 0xfd, 0xf1, 0xfa, 0x24, 0x59, 0xb6, 0x58, 0xc8, 0x95, 0x16, 0x4c, 0xd5, 0x05,
	0x5d, 0x5e, 0x18, 0x8d, 0xfb, 0x29, 0x4e, 0x33, 0xd0, 0xc9, 0xe6, 0x0b, 0xff, 0xf5, 0xcf, 0x75,
	0xe5, 0x8f, 0x3e, 0xac, 0x2b, 0x7f, 0xfe, 0x61, 0x5d, 0xf9, 0xbb, 0x0f, 0xeb, 0xca, 0x8f, 0x3f,
	0xac, 0x2b, 0xff, 0xf4, 0x61, 0x5d, 0xf9, 0xe6, 0x4f, 0xeb, 0x67, 0x7e, 0xfc, 0xd3, 0xfa, 0x99,
	0x7f, 0xf8, 0x69, 0xfd, 0xcc, 0x17, 0xb3, 0x66, 0xdf, 0xda, 0xcb, 0xd3, 0xca, 0xdd, 0xd5, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x92, 0x48, 0xa6, 0x51, 0xd7, 0x64, 0x00, 0x00,
}

func (this *OrganizationObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationObject)
	if !ok {
		that2, ok := that.(OrganizationObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *ClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo)
	if !ok {
		that2, ok := that.(ClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PxConfig.Equal(that1.PxConfig) {
		return false
	}
	if this.Kubeconfig != that1.Kubeconfig {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	if this.DeleteRestores != that1.DeleteRestores {
		return false
	}
	return true
}
func (this *ClusterInfo_StatusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo_StatusInfo)
	if !ok {
		that2, ok := that.(ClusterInfo_StatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ClusterObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterObject)
	if !ok {
		that2, ok := that.(ClusterObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.ClusterInfo.Equal(that1.ClusterInfo) {
		return false
	}
	return true
}
func (this *PXConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PXConfig)
	if !ok {
		that2, ok := that.(PXConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	return true
}
func (this *AWSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSConfig)
	if !ok {
		that2, ok := that.(AWSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessKey != that1.AccessKey {
		return false
	}
	if this.SecretKey != that1.SecretKey {
		return false
	}
	return true
}
func (this *S3Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S3Config)
	if !ok {
		that2, ok := that.(S3Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.DisableSsl != that1.DisableSsl {
		return false
	}
	if this.DisablePathStyle != that1.DisablePathStyle {
		return false
	}
	if this.StorageClass != that1.StorageClass {
		return false
	}
	return true
}
func (this *AzureConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureConfig)
	if !ok {
		that2, ok := that.(AzureConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountName != that1.AccountName {
		return false
	}
	if this.AccountKey != that1.AccountKey {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.SubscriptionId != that1.SubscriptionId {
		return false
	}
	return true
}
func (this *GoogleConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoogleConfig)
	if !ok {
		that2, ok := that.(GoogleConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectId != that1.ProjectId {
		return false
	}
	if this.JsonKey != that1.JsonKey {
		return false
	}
	return true
}
func (this *CloudCredentialInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInfo)
	if !ok {
		that2, ok := that.(CloudCredentialInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Config == nil {
		if this.Config != nil {
			return false
		}
	} else if this.Config == nil {
		return false
	} else if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *CloudCredentialInfo_AwsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInfo_AwsConfig)
	if !ok {
		that2, ok := that.(CloudCredentialInfo_AwsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsConfig.Equal(that1.AwsConfig) {
		return false
	}
	return true
}
func (this *CloudCredentialInfo_AzureConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInfo_AzureConfig)
	if !ok {
		that2, ok := that.(CloudCredentialInfo_AzureConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AzureConfig.Equal(that1.AzureConfig) {
		return false
	}
	return true
}
func (this *CloudCredentialInfo_GoogleConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInfo_GoogleConfig)
	if !ok {
		that2, ok := that.(CloudCredentialInfo_GoogleConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GoogleConfig.Equal(that1.GoogleConfig) {
		return false
	}
	return true
}
func (this *CloudCredentialObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialObject)
	if !ok {
		that2, ok := that.(CloudCredentialObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.CloudCredentialInfo.Equal(that1.CloudCredentialInfo) {
		return false
	}
	return true
}
func (this *SchedulePolicyInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interval.Equal(that1.Interval) {
		return false
	}
	if !this.Daily.Equal(that1.Daily) {
		return false
	}
	if !this.Weekly.Equal(that1.Weekly) {
		return false
	}
	if !this.Monthly.Equal(that1.Monthly) {
		return false
	}
	if len(this.BackupSchedule) != len(that1.BackupSchedule) {
		return false
	}
	for i := range this.BackupSchedule {
		if this.BackupSchedule[i] != that1.BackupSchedule[i] {
			return false
		}
	}
	return true
}
func (this *SchedulePolicyInfo_IncrementalCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo_IncrementalCount)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo_IncrementalCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *SchedulePolicyInfo_IntervalPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo_IntervalPolicy)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo_IntervalPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Minutes != that1.Minutes {
		return false
	}
	if this.Retain != that1.Retain {
		return false
	}
	if !this.IncrementalCount.Equal(that1.IncrementalCount) {
		return false
	}
	return true
}
func (this *SchedulePolicyInfo_DailyPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo_DailyPolicy)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo_DailyPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Retain != that1.Retain {
		return false
	}
	if !this.IncrementalCount.Equal(that1.IncrementalCount) {
		return false
	}
	return true
}
func (this *SchedulePolicyInfo_WeeklyPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo_WeeklyPolicy)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo_WeeklyPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Retain != that1.Retain {
		return false
	}
	if !this.IncrementalCount.Equal(that1.IncrementalCount) {
		return false
	}
	return true
}
func (this *SchedulePolicyInfo_MonthlyPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInfo_MonthlyPolicy)
	if !ok {
		that2, ok := that.(SchedulePolicyInfo_MonthlyPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Retain != that1.Retain {
		return false
	}
	if !this.IncrementalCount.Equal(that1.IncrementalCount) {
		return false
	}
	return true
}
func (this *SchedulePolicyObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyObject)
	if !ok {
		that2, ok := that.(SchedulePolicyObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SchedulePolicyInfo.Equal(that1.SchedulePolicyInfo) {
		return false
	}
	return true
}
func (this *BackupScheduleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInfo)
	if !ok {
		that2, ok := that.(BackupScheduleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchedulePolicy != that1.SchedulePolicy {
		return false
	}
	if this.Suspend != that1.Suspend {
		return false
	}
	if this.ReclaimPolicy != that1.ReclaimPolicy {
		return false
	}
	if len(this.BackupStatus) != len(that1.BackupStatus) {
		return false
	}
	for i := range this.BackupStatus {
		if !this.BackupStatus[i].Equal(that1.BackupStatus[i]) {
			return false
		}
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if this.PreExecRule != that1.PreExecRule {
		return false
	}
	if this.PostExecRule != that1.PostExecRule {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.SuspendedBy.Equal(that1.SuspendedBy) {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *BackupScheduleInfo_SuspendedBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInfo_SuspendedBy)
	if !ok {
		that2, ok := that.(BackupScheduleInfo_SuspendedBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (this *BackupScheduleInfo_StatusInfoList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInfo_StatusInfoList)
	if !ok {
		that2, ok := that.(BackupScheduleInfo_StatusInfoList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *BackupScheduleInfo_StatusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInfo_StatusInfo)
	if !ok {
		that2, ok := that.(BackupScheduleInfo_StatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BackupName != that1.BackupName {
		return false
	}
	if !this.CreateTime.Equal(that1.CreateTime) {
		return false
	}
	if !this.FinishTime.Equal(that1.FinishTime) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *BackupScheduleObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleObject)
	if !ok {
		that2, ok := that.(BackupScheduleObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.BackupScheduleInfo.Equal(that1.BackupScheduleInfo) {
		return false
	}
	return true
}
func (this *BackupLocationInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationInfo)
	if !ok {
		that2, ok := that.(BackupLocationInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.EncryptionKey != that1.EncryptionKey {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	if this.ValidateCloudCredential != that1.ValidateCloudCredential {
		return false
	}
	if that1.Config == nil {
		if this.Config != nil {
			return false
		}
	} else if this.Config == nil {
		return false
	} else if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *BackupLocationInfo_S3Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationInfo_S3Config)
	if !ok {
		that2, ok := that.(BackupLocationInfo_S3Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S3Config.Equal(that1.S3Config) {
		return false
	}
	return true
}
func (this *BackupLocationInfo_StatusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationInfo_StatusInfo)
	if !ok {
		that2, ok := that.(BackupLocationInfo_StatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *BackupLocationObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationObject)
	if !ok {
		that2, ok := that.(BackupLocationObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.BackupLocationInfo.Equal(that1.BackupLocationInfo) {
		return false
	}
	return true
}
func (this *ResourceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceInfo)
	if !ok {
		that2, ok := that.(ResourceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *BackupInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInfo)
	if !ok {
		that2, ok := that.(BackupInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if !this.Resources[i].Equal(that1.Resources[i]) {
			return false
		}
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	if this.BackupPath != that1.BackupPath {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if this.PreExecRule != that1.PreExecRule {
		return false
	}
	if this.PostExecRule != that1.PostExecRule {
		return false
	}
	if !this.BackupSchedule.Equal(that1.BackupSchedule) {
		return false
	}
	if this.CrName != that1.CrName {
		return false
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *BackupInfo_BackupSchedule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInfo_BackupSchedule)
	if !ok {
		that2, ok := that.(BackupInfo_BackupSchedule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *BackupInfo_Volume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInfo_Volume)
	if !ok {
		that2, ok := that.(BackupInfo_Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Pvc != that1.Pvc {
		return false
	}
	if this.BackupId != that1.BackupId {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.DriverName != that1.DriverName {
		return false
	}
	if len(this.Zones) != len(that1.Zones) {
		return false
	}
	for i := range this.Zones {
		if this.Zones[i] != that1.Zones[i] {
			return false
		}
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if this.Options[i] != that1.Options[i] {
			return false
		}
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if this.ActualSize != that1.ActualSize {
		return false
	}
	return true
}
func (this *BackupInfo_StatusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInfo_StatusInfo)
	if !ok {
		that2, ok := that.(BackupInfo_StatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *BackupObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupObject)
	if !ok {
		that2, ok := that.(BackupObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.BackupInfo.Equal(that1.BackupInfo) {
		return false
	}
	return true
}
func (this *RulesInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulesInfo)
	if !ok {
		that2, ok := that.(RulesInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *RulesInfo_RuleItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulesInfo_RuleItem)
	if !ok {
		that2, ok := that.(RulesInfo_RuleItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PodSelector) != len(that1.PodSelector) {
		return false
	}
	for i := range this.PodSelector {
		if this.PodSelector[i] != that1.PodSelector[i] {
			return false
		}
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if this.Container != that1.Container {
		return false
	}
	return true
}
func (this *RulesInfo_Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RulesInfo_Action)
	if !ok {
		that2, ok := that.(RulesInfo_Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Background != that1.Background {
		return false
	}
	if this.RunInSinglePod != that1.RunInSinglePod {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *RuleObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleObject)
	if !ok {
		that2, ok := that.(RuleObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.RulesInfo.Equal(that1.RulesInfo) {
		return false
	}
	return true
}
func (this *ReplacePolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplacePolicy)
	if !ok {
		that2, ok := that.(ReplacePolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RestoreInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInfo)
	if !ok {
		that2, ok := that.(RestoreInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Backup != that1.Backup {
		return false
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if len(this.NamespaceMapping) != len(that1.NamespaceMapping) {
		return false
	}
	for i := range this.NamespaceMapping {
		if this.NamespaceMapping[i] != that1.NamespaceMapping[i] {
			return false
		}
	}
	if this.ReplacePolicy != that1.ReplacePolicy {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if !this.Resources[i].Equal(that1.Resources[i]) {
			return false
		}
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.IncludeOptionalResourceTypes) != len(that1.IncludeOptionalResourceTypes) {
		return false
	}
	for i := range this.IncludeOptionalResourceTypes {
		if this.IncludeOptionalResourceTypes[i] != that1.IncludeOptionalResourceTypes[i] {
			return false
		}
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *RestoreInfo_RestoredResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInfo_RestoredResource)
	if !ok {
		that2, ok := that.(RestoreInfo_RestoredResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *RestoreInfo_Volume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInfo_Volume)
	if !ok {
		that2, ok := that.(RestoreInfo_Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pvc != that1.Pvc {
		return false
	}
	if this.SourceNamespace != that1.SourceNamespace {
		return false
	}
	if this.SourceVolume != that1.SourceVolume {
		return false
	}
	if this.RestoreVolume != that1.RestoreVolume {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.DriverName != that1.DriverName {
		return false
	}
	if len(this.Zones) != len(that1.Zones) {
		return false
	}
	for i := range this.Zones {
		if this.Zones[i] != that1.Zones[i] {
			return false
		}
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if this.Options[i] != that1.Options[i] {
			return false
		}
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	return true
}
func (this *RestoreInfo_StatusInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInfo_StatusInfo)
	if !ok {
		that2, ok := that.(RestoreInfo_StatusInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RestoreObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreObject)
	if !ok {
		that2, ok := that.(RestoreObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.RestoreInfo.Equal(that1.RestoreInfo) {
		return false
	}
	return true
}
func (this *HealthStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthStatusRequest)
	if !ok {
		that2, ok := that.(HealthStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthStatusResponse)
	if !ok {
		that2, ok := that.(HealthStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TimeRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeRange)
	if !ok {
		that2, ok := that.(TimeRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	return true
}
func (this *EnumerateOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnumerateOptions)
	if !ok {
		that2, ok := that.(EnumerateOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.MaxObjects != that1.MaxObjects {
		return false
	}
	if !this.TimeRange.Equal(that1.TimeRange) {
		return false
	}
	if this.NameFilter != that1.NameFilter {
		return false
	}
	if this.ClusterNameFilter != that1.ClusterNameFilter {
		return false
	}
	if this.ObjectIndex != that1.ObjectIndex {
		return false
	}
	return true
}
func (this *SchedulePolicyCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyCreateRequest)
	if !ok {
		that2, ok := that.(SchedulePolicyCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.SchedulePolicy.Equal(that1.SchedulePolicy) {
		return false
	}
	return true
}
func (this *SchedulePolicyCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyCreateResponse)
	if !ok {
		that2, ok := that.(SchedulePolicyCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchedulePolicyUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyUpdateRequest)
	if !ok {
		that2, ok := that.(SchedulePolicyUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.SchedulePolicy.Equal(that1.SchedulePolicy) {
		return false
	}
	return true
}
func (this *SchedulePolicyUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyUpdateResponse)
	if !ok {
		that2, ok := that.(SchedulePolicyUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchedulePolicyEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyEnumerateRequest)
	if !ok {
		that2, ok := that.(SchedulePolicyEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *SchedulePolicyEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyEnumerateResponse)
	if !ok {
		that2, ok := that.(SchedulePolicyEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchedulePolicies) != len(that1.SchedulePolicies) {
		return false
	}
	for i := range this.SchedulePolicies {
		if !this.SchedulePolicies[i].Equal(that1.SchedulePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SchedulePolicyInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInspectRequest)
	if !ok {
		that2, ok := that.(SchedulePolicyInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SchedulePolicyInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyInspectResponse)
	if !ok {
		that2, ok := that.(SchedulePolicyInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchedulePolicy.Equal(that1.SchedulePolicy) {
		return false
	}
	return true
}
func (this *SchedulePolicyDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyDeleteRequest)
	if !ok {
		that2, ok := that.(SchedulePolicyDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SchedulePolicyDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchedulePolicyDeleteResponse)
	if !ok {
		that2, ok := that.(SchedulePolicyDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupScheduleCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleCreateRequest)
	if !ok {
		that2, ok := that.(BackupScheduleCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.SchedulePolicy != that1.SchedulePolicy {
		return false
	}
	if this.ReclaimPolicy != that1.ReclaimPolicy {
		return false
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if this.PreExecRule != that1.PreExecRule {
		return false
	}
	if this.PostExecRule != that1.PostExecRule {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *BackupScheduleCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleCreateResponse)
	if !ok {
		that2, ok := that.(BackupScheduleCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupScheduleUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleUpdateRequest)
	if !ok {
		that2, ok := that.(BackupScheduleUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.SchedulePolicy != that1.SchedulePolicy {
		return false
	}
	if this.ReclaimPolicy != that1.ReclaimPolicy {
		return false
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if this.PreExecRule != that1.PreExecRule {
		return false
	}
	if this.PostExecRule != that1.PostExecRule {
		return false
	}
	if this.Suspend != that1.Suspend {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *BackupScheduleUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleUpdateResponse)
	if !ok {
		that2, ok := that.(BackupScheduleUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupScheduleEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleEnumerateRequest)
	if !ok {
		that2, ok := that.(BackupScheduleEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *BackupScheduleEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleEnumerateResponse)
	if !ok {
		that2, ok := that.(BackupScheduleEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BackupSchedules) != len(that1.BackupSchedules) {
		return false
	}
	for i := range this.BackupSchedules {
		if !this.BackupSchedules[i].Equal(that1.BackupSchedules[i]) {
			return false
		}
	}
	return true
}
func (this *BackupScheduleInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInspectRequest)
	if !ok {
		that2, ok := that.(BackupScheduleInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *BackupScheduleInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleInspectResponse)
	if !ok {
		that2, ok := that.(BackupScheduleInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BackupSchedule.Equal(that1.BackupSchedule) {
		return false
	}
	return true
}
func (this *BackupScheduleDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleDeleteRequest)
	if !ok {
		that2, ok := that.(BackupScheduleDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	return true
}
func (this *BackupScheduleDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupScheduleDeleteResponse)
	if !ok {
		that2, ok := that.(BackupScheduleDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ClusterCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterCreateRequest)
	if !ok {
		that2, ok := that.(ClusterCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.PxConfig.Equal(that1.PxConfig) {
		return false
	}
	if this.Kubeconfig != that1.Kubeconfig {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	return true
}
func (this *ClusterCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterCreateResponse)
	if !ok {
		that2, ok := that.(ClusterCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ClusterUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterUpdateRequest)
	if !ok {
		that2, ok := that.(ClusterUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.PxConfig.Equal(that1.PxConfig) {
		return false
	}
	if this.Kubeconfig != that1.Kubeconfig {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	return true
}
func (this *ClusterUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterUpdateResponse)
	if !ok {
		that2, ok := that.(ClusterUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ClusterEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterEnumerateRequest)
	if !ok {
		that2, ok := that.(ClusterEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.IncludeSecrets != that1.IncludeSecrets {
		return false
	}
	return true
}
func (this *ClusterEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterEnumerateResponse)
	if !ok {
		that2, ok := that.(ClusterEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	return true
}
func (this *ClusterInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInspectRequest)
	if !ok {
		that2, ok := that.(ClusterInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.IncludeSecrets != that1.IncludeSecrets {
		return false
	}
	return true
}
func (this *ClusterInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInspectResponse)
	if !ok {
		that2, ok := that.(ClusterInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	return true
}
func (this *ClusterDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterDeleteRequest)
	if !ok {
		that2, ok := that.(ClusterDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	if this.DeleteRestores != that1.DeleteRestores {
		return false
	}
	return true
}
func (this *ClusterDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterDeleteResponse)
	if !ok {
		that2, ok := that.(ClusterDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloudCredentialCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialCreateRequest)
	if !ok {
		that2, ok := that.(CloudCredentialCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.CloudCredential.Equal(that1.CloudCredential) {
		return false
	}
	return true
}
func (this *CloudCredentialCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialCreateResponse)
	if !ok {
		that2, ok := that.(CloudCredentialCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloudCredentialUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialUpdateRequest)
	if !ok {
		that2, ok := that.(CloudCredentialUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.CloudCredential.Equal(that1.CloudCredential) {
		return false
	}
	return true
}
func (this *CloudCredentialUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialUpdateResponse)
	if !ok {
		that2, ok := that.(CloudCredentialUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloudCredentialEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialEnumerateRequest)
	if !ok {
		that2, ok := that.(CloudCredentialEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.IncludeSecrets != that1.IncludeSecrets {
		return false
	}
	return true
}
func (this *CloudCredentialEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialEnumerateResponse)
	if !ok {
		that2, ok := that.(CloudCredentialEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CloudCredentials) != len(that1.CloudCredentials) {
		return false
	}
	for i := range this.CloudCredentials {
		if !this.CloudCredentials[i].Equal(that1.CloudCredentials[i]) {
			return false
		}
	}
	return true
}
func (this *CloudCredentialInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInspectRequest)
	if !ok {
		that2, ok := that.(CloudCredentialInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.IncludeSecrets != that1.IncludeSecrets {
		return false
	}
	return true
}
func (this *CloudCredentialInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialInspectResponse)
	if !ok {
		that2, ok := that.(CloudCredentialInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudCredential.Equal(that1.CloudCredential) {
		return false
	}
	return true
}
func (this *CloudCredentialDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialDeleteRequest)
	if !ok {
		that2, ok := that.(CloudCredentialDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CloudCredentialDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudCredentialDeleteResponse)
	if !ok {
		that2, ok := that.(CloudCredentialDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupLocationCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationCreateRequest)
	if !ok {
		that2, ok := that.(BackupLocationCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.BackupLocation.Equal(that1.BackupLocation) {
		return false
	}
	return true
}
func (this *BackupLocationCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationCreateResponse)
	if !ok {
		that2, ok := that.(BackupLocationCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupLocationUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationUpdateRequest)
	if !ok {
		that2, ok := that.(BackupLocationUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.BackupLocation.Equal(that1.BackupLocation) {
		return false
	}
	return true
}
func (this *BackupLocationUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationUpdateResponse)
	if !ok {
		that2, ok := that.(BackupLocationUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupLocationEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationEnumerateRequest)
	if !ok {
		that2, ok := that.(BackupLocationEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *BackupLocationEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationEnumerateResponse)
	if !ok {
		that2, ok := that.(BackupLocationEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BackupLocations) != len(that1.BackupLocations) {
		return false
	}
	for i := range this.BackupLocations {
		if !this.BackupLocations[i].Equal(that1.BackupLocations[i]) {
			return false
		}
	}
	return true
}
func (this *BackupLocationInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationInspectRequest)
	if !ok {
		that2, ok := that.(BackupLocationInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *BackupLocationInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationInspectResponse)
	if !ok {
		that2, ok := that.(BackupLocationInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BackupLocation.Equal(that1.BackupLocation) {
		return false
	}
	return true
}
func (this *BackupLocationDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationDeleteRequest)
	if !ok {
		that2, ok := that.(BackupLocationDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DeleteBackups != that1.DeleteBackups {
		return false
	}
	return true
}
func (this *BackupLocationDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationDeleteResponse)
	if !ok {
		that2, ok := that.(BackupLocationDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupLocationValidateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationValidateRequest)
	if !ok {
		that2, ok := that.(BackupLocationValidateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *BackupLocationValidateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupLocationValidateResponse)
	if !ok {
		that2, ok := that.(BackupLocationValidateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MetricsInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsInspectRequest)
	if !ok {
		that2, ok := that.(MetricsInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	return true
}
func (this *MetricsInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsInspectResponse)
	if !ok {
		that2, ok := that.(MetricsInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(that1.Stats[i]) {
			return false
		}
	}
	return true
}
func (this *MetricsInspectResponse_Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricsInspectResponse_Stats)
	if !ok {
		that2, ok := that.(MetricsInspectResponse_Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if this.NumNamespaces != that1.NumNamespaces {
		return false
	}
	if this.TotalBackupSize != that1.TotalBackupSize {
		return false
	}
	if this.NumSchedules != that1.NumSchedules {
		return false
	}
	return true
}
func (this *BackupCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupCreateRequest)
	if !ok {
		that2, ok := that.(BackupCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.BackupLocation != that1.BackupLocation {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if len(this.LabelSelectors) != len(that1.LabelSelectors) {
		return false
	}
	for i := range this.LabelSelectors {
		if this.LabelSelectors[i] != that1.LabelSelectors[i] {
			return false
		}
	}
	if this.PreExecRule != that1.PreExecRule {
		return false
	}
	if this.PostExecRule != that1.PostExecRule {
		return false
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *BackupCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupCreateResponse)
	if !ok {
		that2, ok := that.(BackupCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupUpdateRequest)
	if !ok {
		that2, ok := that.(BackupUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.CloudCredential != that1.CloudCredential {
		return false
	}
	return true
}
func (this *BackupUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupUpdateResponse)
	if !ok {
		that2, ok := that.(BackupUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BackupEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupEnumerateRequest)
	if !ok {
		that2, ok := that.(BackupEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if !this.EnumerateOptions.Equal(that1.EnumerateOptions) {
		return false
	}
	return true
}
func (this *BackupEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupEnumerateResponse)
	if !ok {
		that2, ok := that.(BackupEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Backups) != len(that1.Backups) {
		return false
	}
	for i := range this.Backups {
		if !this.Backups[i].Equal(that1.Backups[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.Complete != that1.Complete {
		return false
	}
	return true
}
func (this *BackupInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInspectRequest)
	if !ok {
		that2, ok := that.(BackupInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	return true
}
func (this *BackupInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupInspectResponse)
	if !ok {
		that2, ok := that.(BackupInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Backup.Equal(that1.Backup) {
		return false
	}
	return true
}
func (this *BackupDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupDeleteRequest)
	if !ok {
		that2, ok := that.(BackupDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	return true
}
func (this *BackupDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupDeleteResponse)
	if !ok {
		that2, ok := that.(BackupDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RestoreCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreCreateRequest)
	if !ok {
		that2, ok := that.(RestoreCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.Backup != that1.Backup {
		return false
	}
	if this.Cluster != that1.Cluster {
		return false
	}
	if len(this.NamespaceMapping) != len(that1.NamespaceMapping) {
		return false
	}
	for i := range this.NamespaceMapping {
		if this.NamespaceMapping[i] != that1.NamespaceMapping[i] {
			return false
		}
	}
	if this.ReplacePolicy != that1.ReplacePolicy {
		return false
	}
	if len(this.IncludeOptionalResourceTypes) != len(that1.IncludeOptionalResourceTypes) {
		return false
	}
	for i := range this.IncludeOptionalResourceTypes {
		if this.IncludeOptionalResourceTypes[i] != that1.IncludeOptionalResourceTypes[i] {
			return false
		}
	}
	if len(this.IncludeResources) != len(that1.IncludeResources) {
		return false
	}
	for i := range this.IncludeResources {
		if !this.IncludeResources[i].Equal(that1.IncludeResources[i]) {
			return false
		}
	}
	return true
}
func (this *RestoreCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreCreateResponse)
	if !ok {
		that2, ok := that.(RestoreCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RestoreUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreUpdateRequest)
	if !ok {
		that2, ok := that.(RestoreUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	return true
}
func (this *RestoreUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreUpdateResponse)
	if !ok {
		that2, ok := that.(RestoreUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RestoreEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreEnumerateRequest)
	if !ok {
		that2, ok := that.(RestoreEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if !this.EnumerateOptions.Equal(that1.EnumerateOptions) {
		return false
	}
	return true
}
func (this *RestoreEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreEnumerateResponse)
	if !ok {
		that2, ok := that.(RestoreEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Restores) != len(that1.Restores) {
		return false
	}
	for i := range this.Restores {
		if !this.Restores[i].Equal(that1.Restores[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.Complete != that1.Complete {
		return false
	}
	return true
}
func (this *RestoreInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInspectRequest)
	if !ok {
		that2, ok := that.(RestoreInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RestoreInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreInspectResponse)
	if !ok {
		that2, ok := that.(RestoreInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Restore.Equal(that1.Restore) {
		return false
	}
	return true
}
func (this *RestoreDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreDeleteRequest)
	if !ok {
		that2, ok := that.(RestoreDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RestoreDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreDeleteResponse)
	if !ok {
		that2, ok := that.(RestoreDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *OrganizationCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationCreateRequest)
	if !ok {
		that2, ok := that.(OrganizationCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	return true
}
func (this *OrganizationCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationCreateResponse)
	if !ok {
		that2, ok := that.(OrganizationCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *OrganizationEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationEnumerateRequest)
	if !ok {
		that2, ok := that.(OrganizationEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *OrganizationEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationEnumerateResponse)
	if !ok {
		that2, ok := that.(OrganizationEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *OrganizationInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationInspectRequest)
	if !ok {
		that2, ok := that.(OrganizationInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *OrganizationInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrganizationInspectResponse)
	if !ok {
		that2, ok := that.(OrganizationInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(that1.Organization) {
		return false
	}
	return true
}
func (this *RuleCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleCreateRequest)
	if !ok {
		that2, ok := that.(RuleCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.RulesInfo.Equal(that1.RulesInfo) {
		return false
	}
	return true
}
func (this *RuleCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleCreateResponse)
	if !ok {
		that2, ok := that.(RuleCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RuleUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleUpdateRequest)
	if !ok {
		that2, ok := that.(RuleUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if !this.RulesInfo.Equal(that1.RulesInfo) {
		return false
	}
	return true
}
func (this *RuleUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleUpdateResponse)
	if !ok {
		that2, ok := that.(RuleUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RuleEnumerateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleEnumerateRequest)
	if !ok {
		that2, ok := that.(RuleEnumerateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	return true
}
func (this *RuleEnumerateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleEnumerateResponse)
	if !ok {
		that2, ok := that.(RuleEnumerateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *RuleInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleInspectRequest)
	if !ok {
		that2, ok := that.(RuleInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RuleInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleInspectResponse)
	if !ok {
		that2, ok := that.(RuleInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rule.Equal(that1.Rule) {
		return false
	}
	return true
}
func (this *RuleDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleDeleteRequest)
	if !ok {
		that2, ok := that.(RuleDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RuleDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleDeleteResponse)
	if !ok {
		that2, ok := that.(RuleDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionInfo)
	if !ok {
		that2, ok := that.(VersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Patch != that1.Patch {
		return false
	}
	if this.GitCommit != that1.GitCommit {
		return false
	}
	if this.BuildDate != that1.BuildDate {
		return false
	}
	return true
}
func (this *VersionGetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionGetRequest)
	if !ok {
		that2, ok := that.(VersionGetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionGetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionGetResponse)
	if !ok {
		that2, ok := that.(VersionGetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	return true
}
func (this *LicenseActivateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseActivateRequest)
	if !ok {
		that2, ok := that.(LicenseActivateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateMetadata.Equal(that1.CreateMetadata) {
		return false
	}
	if this.ActivationId != that1.ActivationId {
		return false
	}
	if !bytes.Equal(this.LicenseData, that1.LicenseData) {
		return false
	}
	return true
}
func (this *LicenseActivateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseActivateResponse)
	if !ok {
		that2, ok := that.(LicenseActivateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LicenseInspectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseInspectRequest)
	if !ok {
		that2, ok := that.(LicenseInspectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgId != that1.OrgId {
		return false
	}
	return true
}
func (this *LicenseInspectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseInspectResponse)
	if !ok {
		that2, ok := that.(LicenseInspectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LicenseRespInfo.Equal(that1.LicenseRespInfo) {
		return false
	}
	return true
}
func (this *LicenseResponseInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseResponseInfo)
	if !ok {
		that2, ok := that.(LicenseResponseInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FeatureInfo) != len(that1.FeatureInfo) {
		return false
	}
	for i := range this.FeatureInfo {
		if !this.FeatureInfo[i].Equal(that1.FeatureInfo[i]) {
			return false
		}
	}
	return true
}
func (this *LicenseResponseInfo_FeatureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseResponseInfo_FeatureInfo)
	if !ok {
		that2, ok := that.(LicenseResponseInfo_FeatureInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Consumed != that1.Consumed {
		return false
	}
	if len(this.EntitlementInfo) != len(that1.EntitlementInfo) {
		return false
	}
	for i := range this.EntitlementInfo {
		if !this.EntitlementInfo[i].Equal(that1.EntitlementInfo[i]) {
			return false
		}
	}
	return true
}
func (this *LicenseResponseInfo_EntitlementInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseResponseInfo_EntitlementInfo)
	if !ok {
		that2, ok := that.(LicenseResponseInfo_EntitlementInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !this.Expires.Equal(that1.Expires) {
		return false
	}
	if !this.Starts.Equal(that1.Starts) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	// Status checks the health of the server
	Status(ctx context.Context, in *HealthStatusRequest, opts ...grpc.CallOption) (*HealthStatusResponse, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Status(ctx context.Context, in *HealthStatusRequest, opts ...grpc.CallOption) (*HealthStatusResponse, error) {
	out := new(HealthStatusResponse)
	err := c.cc.Invoke(ctx, "/Health/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	// Status checks the health of the server
	Status(context.Context, *HealthStatusRequest) (*HealthStatusResponse, error)
}

// UnimplementedHealthServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) Status(ctx context.Context, req *HealthStatusRequest) (*HealthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Health/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Status(ctx, req.(*HealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Health_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// SchedulePolicyClient is the client API for SchedulePolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulePolicyClient interface {
	// Create creates new schedule policy.
	Create(ctx context.Context, in *SchedulePolicyCreateRequest, opts ...grpc.CallOption) (*SchedulePolicyCreateResponse, error)
	// Update given schedule policy details
	Update(ctx context.Context, in *SchedulePolicyUpdateRequest, opts ...grpc.CallOption) (*SchedulePolicyUpdateResponse, error)
	// Enumerate returns a list of schedule policy
	Enumerate(ctx context.Context, in *SchedulePolicyEnumerateRequest, opts ...grpc.CallOption) (*SchedulePolicyEnumerateResponse, error)
	// Inspect returns detail information about a specified schedule policy
	Inspect(ctx context.Context, in *SchedulePolicyInspectRequest, opts ...grpc.CallOption) (*SchedulePolicyInspectResponse, error)
	// Delete removes a schedule policy
	Delete(ctx context.Context, in *SchedulePolicyDeleteRequest, opts ...grpc.CallOption) (*SchedulePolicyDeleteResponse, error)
}

type schedulePolicyClient struct {
	cc *grpc.ClientConn
}

func NewSchedulePolicyClient(cc *grpc.ClientConn) SchedulePolicyClient {
	return &schedulePolicyClient{cc}
}

func (c *schedulePolicyClient) Create(ctx context.Context, in *SchedulePolicyCreateRequest, opts ...grpc.CallOption) (*SchedulePolicyCreateResponse, error) {
	out := new(SchedulePolicyCreateResponse)
	err := c.cc.Invoke(ctx, "/SchedulePolicy/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulePolicyClient) Update(ctx context.Context, in *SchedulePolicyUpdateRequest, opts ...grpc.CallOption) (*SchedulePolicyUpdateResponse, error) {
	out := new(SchedulePolicyUpdateResponse)
	err := c.cc.Invoke(ctx, "/SchedulePolicy/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulePolicyClient) Enumerate(ctx context.Context, in *SchedulePolicyEnumerateRequest, opts ...grpc.CallOption) (*SchedulePolicyEnumerateResponse, error) {
	out := new(SchedulePolicyEnumerateResponse)
	err := c.cc.Invoke(ctx, "/SchedulePolicy/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulePolicyClient) Inspect(ctx context.Context, in *SchedulePolicyInspectRequest, opts ...grpc.CallOption) (*SchedulePolicyInspectResponse, error) {
	out := new(SchedulePolicyInspectResponse)
	err := c.cc.Invoke(ctx, "/SchedulePolicy/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulePolicyClient) Delete(ctx context.Context, in *SchedulePolicyDeleteRequest, opts ...grpc.CallOption) (*SchedulePolicyDeleteResponse, error) {
	out := new(SchedulePolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/SchedulePolicy/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulePolicyServer is the server API for SchedulePolicy service.
type SchedulePolicyServer interface {
	// Create creates new schedule policy.
	Create(context.Context, *SchedulePolicyCreateRequest) (*SchedulePolicyCreateResponse, error)
	// Update given schedule policy details
	Update(context.Context, *SchedulePolicyUpdateRequest) (*SchedulePolicyUpdateResponse, error)
	// Enumerate returns a list of schedule policy
	Enumerate(context.Context, *SchedulePolicyEnumerateRequest) (*SchedulePolicyEnumerateResponse, error)
	// Inspect returns detail information about a specified schedule policy
	Inspect(context.Context, *SchedulePolicyInspectRequest) (*SchedulePolicyInspectResponse, error)
	// Delete removes a schedule policy
	Delete(context.Context, *SchedulePolicyDeleteRequest) (*SchedulePolicyDeleteResponse, error)
}

// UnimplementedSchedulePolicyServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulePolicyServer struct {
}

func (*UnimplementedSchedulePolicyServer) Create(ctx context.Context, req *SchedulePolicyCreateRequest) (*SchedulePolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSchedulePolicyServer) Update(ctx context.Context, req *SchedulePolicyUpdateRequest) (*SchedulePolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSchedulePolicyServer) Enumerate(ctx context.Context, req *SchedulePolicyEnumerateRequest) (*SchedulePolicyEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedSchedulePolicyServer) Inspect(ctx context.Context, req *SchedulePolicyInspectRequest) (*SchedulePolicyInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedSchedulePolicyServer) Delete(ctx context.Context, req *SchedulePolicyDeleteRequest) (*SchedulePolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterSchedulePolicyServer(s *grpc.Server, srv SchedulePolicyServer) {
	s.RegisterService(&_SchedulePolicy_serviceDesc, srv)
}

func _SchedulePolicy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulePolicyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulePolicy/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulePolicyServer).Create(ctx, req.(*SchedulePolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulePolicy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulePolicyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulePolicy/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulePolicyServer).Update(ctx, req.(*SchedulePolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulePolicy_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicyEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulePolicyServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulePolicy/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulePolicyServer).Enumerate(ctx, req.(*SchedulePolicyEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulePolicy_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicyInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulePolicyServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulePolicy/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulePolicyServer).Inspect(ctx, req.(*SchedulePolicyInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulePolicy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulePolicyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SchedulePolicy/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulePolicyServer).Delete(ctx, req.(*SchedulePolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulePolicy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SchedulePolicy",
	HandlerType: (*SchedulePolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SchedulePolicy_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SchedulePolicy_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _SchedulePolicy_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _SchedulePolicy_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SchedulePolicy_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// BackupScheduleClient is the client API for BackupSchedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackupScheduleClient interface {
	// Create creates new backup schedule
	Create(ctx context.Context, in *BackupScheduleCreateRequest, opts ...grpc.CallOption) (*BackupScheduleCreateResponse, error)
	// Update updates a backup schedule
	Update(ctx context.Context, in *BackupScheduleUpdateRequest, opts ...grpc.CallOption) (*BackupScheduleUpdateResponse, error)
	// Enumerate returns a list of backup schedule
	Enumerate(ctx context.Context, in *BackupScheduleEnumerateRequest, opts ...grpc.CallOption) (*BackupScheduleEnumerateResponse, error)
	// Inspect returns detail information about a specified backup schedule
	Inspect(ctx context.Context, in *BackupScheduleInspectRequest, opts ...grpc.CallOption) (*BackupScheduleInspectResponse, error)
	// Delete removes a backup schedule
	Delete(ctx context.Context, in *BackupScheduleDeleteRequest, opts ...grpc.CallOption) (*BackupScheduleDeleteResponse, error)
}

type backupScheduleClient struct {
	cc *grpc.ClientConn
}

func NewBackupScheduleClient(cc *grpc.ClientConn) BackupScheduleClient {
	return &backupScheduleClient{cc}
}

func (c *backupScheduleClient) Create(ctx context.Context, in *BackupScheduleCreateRequest, opts ...grpc.CallOption) (*BackupScheduleCreateResponse, error) {
	out := new(BackupScheduleCreateResponse)
	err := c.cc.Invoke(ctx, "/BackupSchedule/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleClient) Update(ctx context.Context, in *BackupScheduleUpdateRequest, opts ...grpc.CallOption) (*BackupScheduleUpdateResponse, error) {
	out := new(BackupScheduleUpdateResponse)
	err := c.cc.Invoke(ctx, "/BackupSchedule/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleClient) Enumerate(ctx context.Context, in *BackupScheduleEnumerateRequest, opts ...grpc.CallOption) (*BackupScheduleEnumerateResponse, error) {
	out := new(BackupScheduleEnumerateResponse)
	err := c.cc.Invoke(ctx, "/BackupSchedule/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleClient) Inspect(ctx context.Context, in *BackupScheduleInspectRequest, opts ...grpc.CallOption) (*BackupScheduleInspectResponse, error) {
	out := new(BackupScheduleInspectResponse)
	err := c.cc.Invoke(ctx, "/BackupSchedule/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupScheduleClient) Delete(ctx context.Context, in *BackupScheduleDeleteRequest, opts ...grpc.CallOption) (*BackupScheduleDeleteResponse, error) {
	out := new(BackupScheduleDeleteResponse)
	err := c.cc.Invoke(ctx, "/BackupSchedule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupScheduleServer is the server API for BackupSchedule service.
type BackupScheduleServer interface {
	// Create creates new backup schedule
	Create(context.Context, *BackupScheduleCreateRequest) (*BackupScheduleCreateResponse, error)
	// Update updates a backup schedule
	Update(context.Context, *BackupScheduleUpdateRequest) (*BackupScheduleUpdateResponse, error)
	// Enumerate returns a list of backup schedule
	Enumerate(context.Context, *BackupScheduleEnumerateRequest) (*BackupScheduleEnumerateResponse, error)
	// Inspect returns detail information about a specified backup schedule
	Inspect(context.Context, *BackupScheduleInspectRequest) (*BackupScheduleInspectResponse, error)
	// Delete removes a backup schedule
	Delete(context.Context, *BackupScheduleDeleteRequest) (*BackupScheduleDeleteResponse, error)
}

// UnimplementedBackupScheduleServer can be embedded to have forward compatible implementations.
type UnimplementedBackupScheduleServer struct {
}

func (*UnimplementedBackupScheduleServer) Create(ctx context.Context, req *BackupScheduleCreateRequest) (*BackupScheduleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBackupScheduleServer) Update(ctx context.Context, req *BackupScheduleUpdateRequest) (*BackupScheduleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBackupScheduleServer) Enumerate(ctx context.Context, req *BackupScheduleEnumerateRequest) (*BackupScheduleEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedBackupScheduleServer) Inspect(ctx context.Context, req *BackupScheduleInspectRequest) (*BackupScheduleInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedBackupScheduleServer) Delete(ctx context.Context, req *BackupScheduleDeleteRequest) (*BackupScheduleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterBackupScheduleServer(s *grpc.Server, srv BackupScheduleServer) {
	s.RegisterService(&_BackupSchedule_serviceDesc, srv)
}

func _BackupSchedule_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupSchedule/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServer).Create(ctx, req.(*BackupScheduleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupSchedule_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupSchedule/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServer).Update(ctx, req.(*BackupScheduleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupSchedule_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupSchedule/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServer).Enumerate(ctx, req.(*BackupScheduleEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupSchedule_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupSchedule/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServer).Inspect(ctx, req.(*BackupScheduleInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupSchedule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupScheduleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupScheduleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupSchedule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupScheduleServer).Delete(ctx, req.(*BackupScheduleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackupSchedule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BackupSchedule",
	HandlerType: (*BackupScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BackupSchedule_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BackupSchedule_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _BackupSchedule_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _BackupSchedule_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BackupSchedule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// Create creates a new cluster
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error)
	// Update given cluster details
	Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error)
	// Enumerate returns a list of clusters
	Enumerate(ctx context.Context, in *ClusterEnumerateRequest, opts ...grpc.CallOption) (*ClusterEnumerateResponse, error)
	// Inspect returns detail information about a specified cluster
	Inspect(ctx context.Context, in *ClusterInspectRequest, opts ...grpc.CallOption) (*ClusterInspectResponse, error)
	// Delete removes a cluster
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*ClusterCreateResponse, error) {
	out := new(ClusterCreateResponse)
	err := c.cc.Invoke(ctx, "/Cluster/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error) {
	out := new(ClusterUpdateResponse)
	err := c.cc.Invoke(ctx, "/Cluster/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Enumerate(ctx context.Context, in *ClusterEnumerateRequest, opts ...grpc.CallOption) (*ClusterEnumerateResponse, error) {
	out := new(ClusterEnumerateResponse)
	err := c.cc.Invoke(ctx, "/Cluster/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Inspect(ctx context.Context, in *ClusterInspectRequest, opts ...grpc.CallOption) (*ClusterInspectResponse, error) {
	out := new(ClusterInspectResponse)
	err := c.cc.Invoke(ctx, "/Cluster/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*ClusterDeleteResponse, error) {
	out := new(ClusterDeleteResponse)
	err := c.cc.Invoke(ctx, "/Cluster/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	// Create creates a new cluster
	Create(context.Context, *ClusterCreateRequest) (*ClusterCreateResponse, error)
	// Update given cluster details
	Update(context.Context, *ClusterUpdateRequest) (*ClusterUpdateResponse, error)
	// Enumerate returns a list of clusters
	Enumerate(context.Context, *ClusterEnumerateRequest) (*ClusterEnumerateResponse, error)
	// Inspect returns detail information about a specified cluster
	Inspect(context.Context, *ClusterInspectRequest) (*ClusterInspectResponse, error)
	// Delete removes a cluster
	Delete(context.Context, *ClusterDeleteRequest) (*ClusterDeleteResponse, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) Create(ctx context.Context, req *ClusterCreateRequest) (*ClusterCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClusterServer) Update(ctx context.Context, req *ClusterUpdateRequest) (*ClusterUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClusterServer) Enumerate(ctx context.Context, req *ClusterEnumerateRequest) (*ClusterEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedClusterServer) Inspect(ctx context.Context, req *ClusterInspectRequest) (*ClusterInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedClusterServer) Delete(ctx context.Context, req *ClusterDeleteRequest) (*ClusterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Update(ctx, req.(*ClusterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Enumerate(ctx, req.(*ClusterEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Inspect(ctx, req.(*ClusterInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Cluster_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Cluster_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _Cluster_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Cluster_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cluster_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// CloudCredentialClient is the client API for CloudCredential service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudCredentialClient interface {
	// Create creates new cloud credential
	Create(ctx context.Context, in *CloudCredentialCreateRequest, opts ...grpc.CallOption) (*CloudCredentialCreateResponse, error)
	// Update given cloud credential details
	Update(ctx context.Context, in *CloudCredentialUpdateRequest, opts ...grpc.CallOption) (*CloudCredentialUpdateResponse, error)
	// Enumerate returns a list of cloud credentials
	Enumerate(ctx context.Context, in *CloudCredentialEnumerateRequest, opts ...grpc.CallOption) (*CloudCredentialEnumerateResponse, error)
	// Inspect returns detailed information about the specified cloud credential
	Inspect(ctx context.Context, in *CloudCredentialInspectRequest, opts ...grpc.CallOption) (*CloudCredentialInspectResponse, error)
	// Delete removes a cloud credential
	Delete(ctx context.Context, in *CloudCredentialDeleteRequest, opts ...grpc.CallOption) (*CloudCredentialDeleteResponse, error)
}

type cloudCredentialClient struct {
	cc *grpc.ClientConn
}

func NewCloudCredentialClient(cc *grpc.ClientConn) CloudCredentialClient {
	return &cloudCredentialClient{cc}
}

func (c *cloudCredentialClient) Create(ctx context.Context, in *CloudCredentialCreateRequest, opts ...grpc.CallOption) (*CloudCredentialCreateResponse, error) {
	out := new(CloudCredentialCreateResponse)
	err := c.cc.Invoke(ctx, "/CloudCredential/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialClient) Update(ctx context.Context, in *CloudCredentialUpdateRequest, opts ...grpc.CallOption) (*CloudCredentialUpdateResponse, error) {
	out := new(CloudCredentialUpdateResponse)
	err := c.cc.Invoke(ctx, "/CloudCredential/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialClient) Enumerate(ctx context.Context, in *CloudCredentialEnumerateRequest, opts ...grpc.CallOption) (*CloudCredentialEnumerateResponse, error) {
	out := new(CloudCredentialEnumerateResponse)
	err := c.cc.Invoke(ctx, "/CloudCredential/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialClient) Inspect(ctx context.Context, in *CloudCredentialInspectRequest, opts ...grpc.CallOption) (*CloudCredentialInspectResponse, error) {
	out := new(CloudCredentialInspectResponse)
	err := c.cc.Invoke(ctx, "/CloudCredential/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialClient) Delete(ctx context.Context, in *CloudCredentialDeleteRequest, opts ...grpc.CallOption) (*CloudCredentialDeleteResponse, error) {
	out := new(CloudCredentialDeleteResponse)
	err := c.cc.Invoke(ctx, "/CloudCredential/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudCredentialServer is the server API for CloudCredential service.
type CloudCredentialServer interface {
	// Create creates new cloud credential
	Create(context.Context, *CloudCredentialCreateRequest) (*CloudCredentialCreateResponse, error)
	// Update given cloud credential details
	Update(context.Context, *CloudCredentialUpdateRequest) (*CloudCredentialUpdateResponse, error)
	// Enumerate returns a list of cloud credentials
	Enumerate(context.Context, *CloudCredentialEnumerateRequest) (*CloudCredentialEnumerateResponse, error)
	// Inspect returns detailed information about the specified cloud credential
	Inspect(context.Context, *CloudCredentialInspectRequest) (*CloudCredentialInspectResponse, error)
	// Delete removes a cloud credential
	Delete(context.Context, *CloudCredentialDeleteRequest) (*CloudCredentialDeleteResponse, error)
}

// UnimplementedCloudCredentialServer can be embedded to have forward compatible implementations.
type UnimplementedCloudCredentialServer struct {
}

func (*UnimplementedCloudCredentialServer) Create(ctx context.Context, req *CloudCredentialCreateRequest) (*CloudCredentialCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCloudCredentialServer) Update(ctx context.Context, req *CloudCredentialUpdateRequest) (*CloudCredentialUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCloudCredentialServer) Enumerate(ctx context.Context, req *CloudCredentialEnumerateRequest) (*CloudCredentialEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedCloudCredentialServer) Inspect(ctx context.Context, req *CloudCredentialInspectRequest) (*CloudCredentialInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedCloudCredentialServer) Delete(ctx context.Context, req *CloudCredentialDeleteRequest) (*CloudCredentialDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCloudCredentialServer(s *grpc.Server, srv CloudCredentialServer) {
	s.RegisterService(&_CloudCredential_serviceDesc, srv)
}

func _CloudCredential_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCredentialCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudCredential/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServer).Create(ctx, req.(*CloudCredentialCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredential_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCredentialUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudCredential/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServer).Update(ctx, req.(*CloudCredentialUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredential_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCredentialEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudCredential/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServer).Enumerate(ctx, req.(*CloudCredentialEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredential_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCredentialInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudCredential/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServer).Inspect(ctx, req.(*CloudCredentialInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredential_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudCredentialDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CloudCredential/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServer).Delete(ctx, req.(*CloudCredentialDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudCredential_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CloudCredential",
	HandlerType: (*CloudCredentialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CloudCredential_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CloudCredential_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _CloudCredential_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _CloudCredential_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CloudCredential_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// BackupLocationClient is the client API for BackupLocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackupLocationClient interface {
	// Create creates new backup location
	Create(ctx context.Context, in *BackupLocationCreateRequest, opts ...grpc.CallOption) (*BackupLocationCreateResponse, error)
	// Update given backup location details
	Update(ctx context.Context, in *BackupLocationUpdateRequest, opts ...grpc.CallOption) (*BackupLocationUpdateResponse, error)
	// Enumerate returns a list of backup locations
	Enumerate(ctx context.Context, in *BackupLocationEnumerateRequest, opts ...grpc.CallOption) (*BackupLocationEnumerateResponse, error)
	// Inspect returns detailed information about a specified backup location
	Inspect(ctx context.Context, in *BackupLocationInspectRequest, opts ...grpc.CallOption) (*BackupLocationInspectResponse, error)
	// Delete removes a backup location
	Delete(ctx context.Context, in *BackupLocationDeleteRequest, opts ...grpc.CallOption) (*BackupLocationDeleteResponse, error)
	// Verify if a backup location is valid
	Validate(ctx context.Context, in *BackupLocationValidateRequest, opts ...grpc.CallOption) (*BackupLocationValidateResponse, error)
}

type backupLocationClient struct {
	cc *grpc.ClientConn
}

func NewBackupLocationClient(cc *grpc.ClientConn) BackupLocationClient {
	return &backupLocationClient{cc}
}

func (c *backupLocationClient) Create(ctx context.Context, in *BackupLocationCreateRequest, opts ...grpc.CallOption) (*BackupLocationCreateResponse, error) {
	out := new(BackupLocationCreateResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationClient) Update(ctx context.Context, in *BackupLocationUpdateRequest, opts ...grpc.CallOption) (*BackupLocationUpdateResponse, error) {
	out := new(BackupLocationUpdateResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationClient) Enumerate(ctx context.Context, in *BackupLocationEnumerateRequest, opts ...grpc.CallOption) (*BackupLocationEnumerateResponse, error) {
	out := new(BackupLocationEnumerateResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationClient) Inspect(ctx context.Context, in *BackupLocationInspectRequest, opts ...grpc.CallOption) (*BackupLocationInspectResponse, error) {
	out := new(BackupLocationInspectResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationClient) Delete(ctx context.Context, in *BackupLocationDeleteRequest, opts ...grpc.CallOption) (*BackupLocationDeleteResponse, error) {
	out := new(BackupLocationDeleteResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationClient) Validate(ctx context.Context, in *BackupLocationValidateRequest, opts ...grpc.CallOption) (*BackupLocationValidateResponse, error) {
	out := new(BackupLocationValidateResponse)
	err := c.cc.Invoke(ctx, "/BackupLocation/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupLocationServer is the server API for BackupLocation service.
type BackupLocationServer interface {
	// Create creates new backup location
	Create(context.Context, *BackupLocationCreateRequest) (*BackupLocationCreateResponse, error)
	// Update given backup location details
	Update(context.Context, *BackupLocationUpdateRequest) (*BackupLocationUpdateResponse, error)
	// Enumerate returns a list of backup locations
	Enumerate(context.Context, *BackupLocationEnumerateRequest) (*BackupLocationEnumerateResponse, error)
	// Inspect returns detailed information about a specified backup location
	Inspect(context.Context, *BackupLocationInspectRequest) (*BackupLocationInspectResponse, error)
	// Delete removes a backup location
	Delete(context.Context, *BackupLocationDeleteRequest) (*BackupLocationDeleteResponse, error)
	// Verify if a backup location is valid
	Validate(context.Context, *BackupLocationValidateRequest) (*BackupLocationValidateResponse, error)
}

// UnimplementedBackupLocationServer can be embedded to have forward compatible implementations.
type UnimplementedBackupLocationServer struct {
}

func (*UnimplementedBackupLocationServer) Create(ctx context.Context, req *BackupLocationCreateRequest) (*BackupLocationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBackupLocationServer) Update(ctx context.Context, req *BackupLocationUpdateRequest) (*BackupLocationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBackupLocationServer) Enumerate(ctx context.Context, req *BackupLocationEnumerateRequest) (*BackupLocationEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedBackupLocationServer) Inspect(ctx context.Context, req *BackupLocationInspectRequest) (*BackupLocationInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedBackupLocationServer) Delete(ctx context.Context, req *BackupLocationDeleteRequest) (*BackupLocationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedBackupLocationServer) Validate(ctx context.Context, req *BackupLocationValidateRequest) (*BackupLocationValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

func RegisterBackupLocationServer(s *grpc.Server, srv BackupLocationServer) {
	s.RegisterService(&_BackupLocation_serviceDesc, srv)
}

func _BackupLocation_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Create(ctx, req.(*BackupLocationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocation_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Update(ctx, req.(*BackupLocationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocation_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Enumerate(ctx, req.(*BackupLocationEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocation_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Inspect(ctx, req.(*BackupLocationInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocation_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Delete(ctx, req.(*BackupLocationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocation_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupLocationValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BackupLocation/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServer).Validate(ctx, req.(*BackupLocationValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackupLocation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BackupLocation",
	HandlerType: (*BackupLocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BackupLocation_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BackupLocation_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _BackupLocation_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _BackupLocation_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BackupLocation_Delete_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _BackupLocation_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsClient interface {
	Inspect(ctx context.Context, in *MetricsInspectRequest, opts ...grpc.CallOption) (*MetricsInspectResponse, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) Inspect(ctx context.Context, in *MetricsInspectRequest, opts ...grpc.CallOption) (*MetricsInspectResponse, error) {
	out := new(MetricsInspectResponse)
	err := c.cc.Invoke(ctx, "/Metrics/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
type MetricsServer interface {
	Inspect(context.Context, *MetricsInspectRequest) (*MetricsInspectResponse, error)
}

// UnimplementedMetricsServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (*UnimplementedMetricsServer) Inspect(ctx context.Context, req *MetricsInspectRequest) (*MetricsInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Metrics/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).Inspect(ctx, req.(*MetricsInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inspect",
			Handler:    _Metrics_Inspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// BackupClient is the client API for Backup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackupClient interface {
	// Create creates a new backup object
	Create(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*BackupCreateResponse, error)
	// Update given backup details
	Update(ctx context.Context, in *BackupUpdateRequest, opts ...grpc.CallOption) (*BackupUpdateResponse, error)
	// Enumerate returns a list of objects
	Enumerate(ctx context.Context, in *BackupEnumerateRequest, opts ...grpc.CallOption) (*BackupEnumerateResponse, error)
	// Inspect returns detail information about a specified object
	Inspect(ctx context.Context, in *BackupInspectRequest, opts ...grpc.CallOption) (*BackupInspectResponse, error)
	// Delete triggers delete of a backup
	Delete(ctx context.Context, in *BackupDeleteRequest, opts ...grpc.CallOption) (*BackupDeleteResponse, error)
}

type backupClient struct {
	cc *grpc.ClientConn
}

func NewBackupClient(cc *grpc.ClientConn) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) Create(ctx context.Context, in *BackupCreateRequest, opts ...grpc.CallOption) (*BackupCreateResponse, error) {
	out := new(BackupCreateResponse)
	err := c.cc.Invoke(ctx, "/Backup/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Update(ctx context.Context, in *BackupUpdateRequest, opts ...grpc.CallOption) (*BackupUpdateResponse, error) {
	out := new(BackupUpdateResponse)
	err := c.cc.Invoke(ctx, "/Backup/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Enumerate(ctx context.Context, in *BackupEnumerateRequest, opts ...grpc.CallOption) (*BackupEnumerateResponse, error) {
	out := new(BackupEnumerateResponse)
	err := c.cc.Invoke(ctx, "/Backup/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Inspect(ctx context.Context, in *BackupInspectRequest, opts ...grpc.CallOption) (*BackupInspectResponse, error) {
	out := new(BackupInspectResponse)
	err := c.cc.Invoke(ctx, "/Backup/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupClient) Delete(ctx context.Context, in *BackupDeleteRequest, opts ...grpc.CallOption) (*BackupDeleteResponse, error) {
	out := new(BackupDeleteResponse)
	err := c.cc.Invoke(ctx, "/Backup/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupServer is the server API for Backup service.
type BackupServer interface {
	// Create creates a new backup object
	Create(context.Context, *BackupCreateRequest) (*BackupCreateResponse, error)
	// Update given backup details
	Update(context.Context, *BackupUpdateRequest) (*BackupUpdateResponse, error)
	// Enumerate returns a list of objects
	Enumerate(context.Context, *BackupEnumerateRequest) (*BackupEnumerateResponse, error)
	// Inspect returns detail information about a specified object
	Inspect(context.Context, *BackupInspectRequest) (*BackupInspectResponse, error)
	// Delete triggers delete of a backup
	Delete(context.Context, *BackupDeleteRequest) (*BackupDeleteResponse, error)
}

// UnimplementedBackupServer can be embedded to have forward compatible implementations.
type UnimplementedBackupServer struct {
}

func (*UnimplementedBackupServer) Create(ctx context.Context, req *BackupCreateRequest) (*BackupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBackupServer) Update(ctx context.Context, req *BackupUpdateRequest) (*BackupUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBackupServer) Enumerate(ctx context.Context, req *BackupEnumerateRequest) (*BackupEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedBackupServer) Inspect(ctx context.Context, req *BackupInspectRequest) (*BackupInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedBackupServer) Delete(ctx context.Context, req *BackupDeleteRequest) (*BackupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterBackupServer(s *grpc.Server, srv BackupServer) {
	s.RegisterService(&_Backup_serviceDesc, srv)
}

func _Backup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backup/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Create(ctx, req.(*BackupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backup/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Update(ctx, req.(*BackupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backup/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Enumerate(ctx, req.(*BackupEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backup/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Inspect(ctx, req.(*BackupInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backup/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupServer).Delete(ctx, req.(*BackupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Backup",
	HandlerType: (*BackupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Backup_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Backup_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _Backup_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Backup_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Backup_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// RestoreClient is the client API for Restore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RestoreClient interface {
	// Create creates new restore object in datastore
	// It will also trigger a restore operation on the target cluster
	Create(ctx context.Context, in *RestoreCreateRequest, opts ...grpc.CallOption) (*RestoreCreateResponse, error)
	// Update given restore details
	Update(ctx context.Context, in *RestoreUpdateRequest, opts ...grpc.CallOption) (*RestoreUpdateResponse, error)
	// Enumerate returns a list of restore objects
	Enumerate(ctx context.Context, in *RestoreEnumerateRequest, opts ...grpc.CallOption) (*RestoreEnumerateResponse, error)
	// Inspect returns detailed information about specified restore object
	Inspect(ctx context.Context, in *RestoreInspectRequest, opts ...grpc.CallOption) (*RestoreInspectResponse, error)
	// Delete removes a restore object
	Delete(ctx context.Context, in *RestoreDeleteRequest, opts ...grpc.CallOption) (*RestoreDeleteResponse, error)
}

type restoreClient struct {
	cc *grpc.ClientConn
}

func NewRestoreClient(cc *grpc.ClientConn) RestoreClient {
	return &restoreClient{cc}
}

func (c *restoreClient) Create(ctx context.Context, in *RestoreCreateRequest, opts ...grpc.CallOption) (*RestoreCreateResponse, error) {
	out := new(RestoreCreateResponse)
	err := c.cc.Invoke(ctx, "/Restore/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreClient) Update(ctx context.Context, in *RestoreUpdateRequest, opts ...grpc.CallOption) (*RestoreUpdateResponse, error) {
	out := new(RestoreUpdateResponse)
	err := c.cc.Invoke(ctx, "/Restore/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreClient) Enumerate(ctx context.Context, in *RestoreEnumerateRequest, opts ...grpc.CallOption) (*RestoreEnumerateResponse, error) {
	out := new(RestoreEnumerateResponse)
	err := c.cc.Invoke(ctx, "/Restore/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreClient) Inspect(ctx context.Context, in *RestoreInspectRequest, opts ...grpc.CallOption) (*RestoreInspectResponse, error) {
	out := new(RestoreInspectResponse)
	err := c.cc.Invoke(ctx, "/Restore/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreClient) Delete(ctx context.Context, in *RestoreDeleteRequest, opts ...grpc.CallOption) (*RestoreDeleteResponse, error) {
	out := new(RestoreDeleteResponse)
	err := c.cc.Invoke(ctx, "/Restore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestoreServer is the server API for Restore service.
type RestoreServer interface {
	// Create creates new restore object in datastore
	// It will also trigger a restore operation on the target cluster
	Create(context.Context, *RestoreCreateRequest) (*RestoreCreateResponse, error)
	// Update given restore details
	Update(context.Context, *RestoreUpdateRequest) (*RestoreUpdateResponse, error)
	// Enumerate returns a list of restore objects
	Enumerate(context.Context, *RestoreEnumerateRequest) (*RestoreEnumerateResponse, error)
	// Inspect returns detailed information about specified restore object
	Inspect(context.Context, *RestoreInspectRequest) (*RestoreInspectResponse, error)
	// Delete removes a restore object
	Delete(context.Context, *RestoreDeleteRequest) (*RestoreDeleteResponse, error)
}

// UnimplementedRestoreServer can be embedded to have forward compatible implementations.
type UnimplementedRestoreServer struct {
}

func (*UnimplementedRestoreServer) Create(ctx context.Context, req *RestoreCreateRequest) (*RestoreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRestoreServer) Update(ctx context.Context, req *RestoreUpdateRequest) (*RestoreUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRestoreServer) Enumerate(ctx context.Context, req *RestoreEnumerateRequest) (*RestoreEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedRestoreServer) Inspect(ctx context.Context, req *RestoreInspectRequest) (*RestoreInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedRestoreServer) Delete(ctx context.Context, req *RestoreDeleteRequest) (*RestoreDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRestoreServer(s *grpc.Server, srv RestoreServer) {
	s.RegisterService(&_Restore_serviceDesc, srv)
}

func _Restore_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Restore/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServer).Create(ctx, req.(*RestoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restore_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Restore/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServer).Update(ctx, req.(*RestoreUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restore_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Restore/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServer).Enumerate(ctx, req.(*RestoreEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restore_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Restore/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServer).Inspect(ctx, req.(*RestoreInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Restore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServer).Delete(ctx, req.(*RestoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Restore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Restore",
	HandlerType: (*RestoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Restore_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Restore_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _Restore_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Restore_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Restore_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationClient interface {
	// Create creates new organization object in datastore
	Create(ctx context.Context, in *OrganizationCreateRequest, opts ...grpc.CallOption) (*OrganizationCreateResponse, error)
	// Enumerate returns a list of organization object
	Enumerate(ctx context.Context, in *OrganizationEnumerateRequest, opts ...grpc.CallOption) (*OrganizationEnumerateResponse, error)
	// Inspect returns detailed information about specified organization object
	Inspect(ctx context.Context, in *OrganizationInspectRequest, opts ...grpc.CallOption) (*OrganizationInspectResponse, error)
}

type organizationClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationClient(cc *grpc.ClientConn) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) Create(ctx context.Context, in *OrganizationCreateRequest, opts ...grpc.CallOption) (*OrganizationCreateResponse, error) {
	out := new(OrganizationCreateResponse)
	err := c.cc.Invoke(ctx, "/Organization/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Enumerate(ctx context.Context, in *OrganizationEnumerateRequest, opts ...grpc.CallOption) (*OrganizationEnumerateResponse, error) {
	out := new(OrganizationEnumerateResponse)
	err := c.cc.Invoke(ctx, "/Organization/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Inspect(ctx context.Context, in *OrganizationInspectRequest, opts ...grpc.CallOption) (*OrganizationInspectResponse, error) {
	out := new(OrganizationInspectResponse)
	err := c.cc.Invoke(ctx, "/Organization/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
type OrganizationServer interface {
	// Create creates new organization object in datastore
	Create(context.Context, *OrganizationCreateRequest) (*OrganizationCreateResponse, error)
	// Enumerate returns a list of organization object
	Enumerate(context.Context, *OrganizationEnumerateRequest) (*OrganizationEnumerateResponse, error)
	// Inspect returns detailed information about specified organization object
	Inspect(context.Context, *OrganizationInspectRequest) (*OrganizationInspectResponse, error)
}

// UnimplementedOrganizationServer can be embedded to have forward compatible implementations.
type UnimplementedOrganizationServer struct {
}

func (*UnimplementedOrganizationServer) Create(ctx context.Context, req *OrganizationCreateRequest) (*OrganizationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOrganizationServer) Enumerate(ctx context.Context, req *OrganizationEnumerateRequest) (*OrganizationEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedOrganizationServer) Inspect(ctx context.Context, req *OrganizationInspectRequest) (*OrganizationInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}

func RegisterOrganizationServer(s *grpc.Server, srv OrganizationServer) {
	s.RegisterService(&_Organization_serviceDesc, srv)
}

func _Organization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Organization/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Create(ctx, req.(*OrganizationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Organization/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Enumerate(ctx, req.(*OrganizationEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Organization/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Inspect(ctx, req.(*OrganizationInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Organization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Organization_Create_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _Organization_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Organization_Inspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// RulesClient is the client API for Rules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RulesClient interface {
	// Create creates new rule
	Create(ctx context.Context, in *RuleCreateRequest, opts ...grpc.CallOption) (*RuleCreateResponse, error)
	// Update given rule details
	Update(ctx context.Context, in *RuleUpdateRequest, opts ...grpc.CallOption) (*RuleUpdateResponse, error)
	// Enumerate returns a list of rules
	Enumerate(ctx context.Context, in *RuleEnumerateRequest, opts ...grpc.CallOption) (*RuleEnumerateResponse, error)
	// Inspect returns detailed information about the specified rule
	Inspect(ctx context.Context, in *RuleInspectRequest, opts ...grpc.CallOption) (*RuleInspectResponse, error)
	// Delete removes rule from px-backup
	Delete(ctx context.Context, in *RuleDeleteRequest, opts ...grpc.CallOption) (*RuleDeleteResponse, error)
}

type rulesClient struct {
	cc *grpc.ClientConn
}

func NewRulesClient(cc *grpc.ClientConn) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) Create(ctx context.Context, in *RuleCreateRequest, opts ...grpc.CallOption) (*RuleCreateResponse, error) {
	out := new(RuleCreateResponse)
	err := c.cc.Invoke(ctx, "/Rules/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Update(ctx context.Context, in *RuleUpdateRequest, opts ...grpc.CallOption) (*RuleUpdateResponse, error) {
	out := new(RuleUpdateResponse)
	err := c.cc.Invoke(ctx, "/Rules/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Enumerate(ctx context.Context, in *RuleEnumerateRequest, opts ...grpc.CallOption) (*RuleEnumerateResponse, error) {
	out := new(RuleEnumerateResponse)
	err := c.cc.Invoke(ctx, "/Rules/Enumerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Inspect(ctx context.Context, in *RuleInspectRequest, opts ...grpc.CallOption) (*RuleInspectResponse, error) {
	out := new(RuleInspectResponse)
	err := c.cc.Invoke(ctx, "/Rules/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Delete(ctx context.Context, in *RuleDeleteRequest, opts ...grpc.CallOption) (*RuleDeleteResponse, error) {
	out := new(RuleDeleteResponse)
	err := c.cc.Invoke(ctx, "/Rules/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServer is the server API for Rules service.
type RulesServer interface {
	// Create creates new rule
	Create(context.Context, *RuleCreateRequest) (*RuleCreateResponse, error)
	// Update given rule details
	Update(context.Context, *RuleUpdateRequest) (*RuleUpdateResponse, error)
	// Enumerate returns a list of rules
	Enumerate(context.Context, *RuleEnumerateRequest) (*RuleEnumerateResponse, error)
	// Inspect returns detailed information about the specified rule
	Inspect(context.Context, *RuleInspectRequest) (*RuleInspectResponse, error)
	// Delete removes rule from px-backup
	Delete(context.Context, *RuleDeleteRequest) (*RuleDeleteResponse, error)
}

// UnimplementedRulesServer can be embedded to have forward compatible implementations.
type UnimplementedRulesServer struct {
}

func (*UnimplementedRulesServer) Create(ctx context.Context, req *RuleCreateRequest) (*RuleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRulesServer) Update(ctx context.Context, req *RuleUpdateRequest) (*RuleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRulesServer) Enumerate(ctx context.Context, req *RuleEnumerateRequest) (*RuleEnumerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enumerate not implemented")
}
func (*UnimplementedRulesServer) Inspect(ctx context.Context, req *RuleInspectRequest) (*RuleInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (*UnimplementedRulesServer) Delete(ctx context.Context, req *RuleDeleteRequest) (*RuleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRulesServer(s *grpc.Server, srv RulesServer) {
	s.RegisterService(&_Rules_serviceDesc, srv)
}

func _Rules_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rules/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Create(ctx, req.(*RuleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rules/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Update(ctx, req.(*RuleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rules/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Enumerate(ctx, req.(*RuleEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rules/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Inspect(ctx, req.(*RuleInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rules/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Delete(ctx, req.(*RuleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Rules_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Rules_Update_Handler,
		},
		{
			MethodName: "Enumerate",
			Handler:    _Rules_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Rules_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Rules_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// VersionClient is the client API for Version service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionClient interface {
	// Get gets the version of the server
	Get(ctx context.Context, in *VersionGetRequest, opts ...grpc.CallOption) (*VersionGetResponse, error)
}

type versionClient struct {
	cc *grpc.ClientConn
}

func NewVersionClient(cc *grpc.ClientConn) VersionClient {
	return &versionClient{cc}
}

func (c *versionClient) Get(ctx context.Context, in *VersionGetRequest, opts ...grpc.CallOption) (*VersionGetResponse, error) {
	out := new(VersionGetResponse)
	err := c.cc.Invoke(ctx, "/Version/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServer is the server API for Version service.
type VersionServer interface {
	// Get gets the version of the server
	Get(context.Context, *VersionGetRequest) (*VersionGetResponse, error)
}

// UnimplementedVersionServer can be embedded to have forward compatible implementations.
type UnimplementedVersionServer struct {
}

func (*UnimplementedVersionServer) Get(ctx context.Context, req *VersionGetRequest) (*VersionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterVersionServer(s *grpc.Server, srv VersionServer) {
	s.RegisterService(&_Version_serviceDesc, srv)
}

func _Version_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Version/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServer).Get(ctx, req.(*VersionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Version_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Version",
	HandlerType: (*VersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Version_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

// LicenseClient is the client API for License service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseClient interface {
	// Activate activate a new license
	Activate(ctx context.Context, in *LicenseActivateRequest, opts ...grpc.CallOption) (*LicenseActivateResponse, error)
	// Enumerate returns a list of license for given cluster
	Inspect(ctx context.Context, in *LicenseInspectRequest, opts ...grpc.CallOption) (*LicenseInspectResponse, error)
}

type licenseClient struct {
	cc *grpc.ClientConn
}

func NewLicenseClient(cc *grpc.ClientConn) LicenseClient {
	return &licenseClient{cc}
}

func (c *licenseClient) Activate(ctx context.Context, in *LicenseActivateRequest, opts ...grpc.CallOption) (*LicenseActivateResponse, error) {
	out := new(LicenseActivateResponse)
	err := c.cc.Invoke(ctx, "/License/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) Inspect(ctx context.Context, in *LicenseInspectRequest, opts ...grpc.CallOption) (*LicenseInspectResponse, error) {
	out := new(LicenseInspectResponse)
	err := c.cc.Invoke(ctx, "/License/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServer is the server API for License service.
type LicenseServer interface {
	// Activate activate a new license
	Activate(context.Context, *LicenseActivateRequest) (*LicenseActivateResponse, error)
	// Enumerate returns a list of license for given cluster
	Inspect(context.Context, *LicenseInspectRequest) (*LicenseInspectResponse, error)
}

// UnimplementedLicenseServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseServer struct {
}

func (*UnimplementedLicenseServer) Activate(ctx context.Context, req *LicenseActivateRequest) (*LicenseActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedLicenseServer) Inspect(ctx context.Context, req *LicenseInspectRequest) (*LicenseInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}

func RegisterLicenseServer(s *grpc.Server, srv LicenseServer) {
	s.RegisterService(&_License_serviceDesc, srv)
}

func _License_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/License/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Activate(ctx, req.(*LicenseActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/License/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Inspect(ctx, req.(*LicenseInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _License_serviceDesc = grpc.ServiceDesc{
	ServiceName: "License",
	HandlerType: (*LicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _License_Activate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _License_Inspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/v1/api.proto",
}

func (m *OrganizationObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteRestores {
		i--
		if m.DeleteRestores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Kubeconfig) > 0 {
		i -= len(m.Kubeconfig)
		copy(dAtA[i:], m.Kubeconfig)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kubeconfig)))
		i--
		dAtA[i] = 0x12
	}
	if m.PxConfig != nil {
		{
			size, err := m.PxConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo_StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo_StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo_StatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClusterObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PXConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PXConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PXConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecretKey) > 0 {
		i -= len(m.SecretKey)
		copy(dAtA[i:], m.SecretKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SecretKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S3Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageClass) > 0 {
		i -= len(m.StorageClass)
		copy(dAtA[i:], m.StorageClass)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StorageClass)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DisablePathStyle {
		i--
		if m.DisablePathStyle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DisableSsl {
		i--
		if m.DisableSsl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AzureConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientSecret) > 0 {
		i -= len(m.ClientSecret)
		copy(dAtA[i:], m.ClientSecret)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientSecret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountKey) > 0 {
		i -= len(m.AccountKey)
		copy(dAtA[i:], m.AccountKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoogleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoogleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonKey) > 0 {
		i -= len(m.JsonKey)
		copy(dAtA[i:], m.JsonKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialInfo_AwsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInfo_AwsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsConfig != nil {
		{
			size, err := m.AwsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CloudCredentialInfo_AzureConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInfo_AzureConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AzureConfig != nil {
		{
			size, err := m.AzureConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CloudCredentialInfo_GoogleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInfo_GoogleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GoogleConfig != nil {
		{
			size, err := m.GoogleConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CloudCredentialObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudCredentialInfo != nil {
		{
			size, err := m.CloudCredentialInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackupSchedule) > 0 {
		for iNdEx := len(m.BackupSchedule) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupSchedule[iNdEx])
			copy(dAtA[i:], m.BackupSchedule[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupSchedule[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Monthly != nil {
		{
			size, err := m.Monthly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Weekly != nil {
		{
			size, err := m.Weekly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Daily != nil {
		{
			size, err := m.Daily.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo_IncrementalCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo_IncrementalCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo_IncrementalCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo_IntervalPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo_IntervalPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo_IntervalPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncrementalCount != nil {
		{
			size, err := m.IncrementalCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Retain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Retain))
		i--
		dAtA[i] = 0x10
	}
	if m.Minutes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Minutes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo_DailyPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo_DailyPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo_DailyPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncrementalCount != nil {
		{
			size, err := m.IncrementalCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Retain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Retain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo_WeeklyPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo_WeeklyPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo_WeeklyPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncrementalCount != nil {
		{
			size, err := m.IncrementalCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Retain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Retain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Day) > 0 {
		i -= len(m.Day)
		copy(dAtA[i:], m.Day)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Day)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInfo_MonthlyPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInfo_MonthlyPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInfo_MonthlyPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncrementalCount != nil {
		{
			size, err := m.IncrementalCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Retain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Retain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x12
	}
	if m.Date != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchedulePolicyInfo != nil {
		{
			size, err := m.SchedulePolicyInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SuspendedBy != nil {
		{
			size, err := m.SuspendedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.PostExecRule) > 0 {
		i -= len(m.PostExecRule)
		copy(dAtA[i:], m.PostExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PostExecRule)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PreExecRule) > 0 {
		i -= len(m.PreExecRule)
		copy(dAtA[i:], m.PreExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreExecRule)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackupStatus) > 0 {
		for k := range m.BackupStatus {
			v := m.BackupStatus[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReclaimPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReclaimPolicy))
		i--
		dAtA[i] = 0x18
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.SchedulePolicy) > 0 {
		i -= len(m.SchedulePolicy)
		copy(dAtA[i:], m.SchedulePolicy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SchedulePolicy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInfo_SuspendedBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInfo_SuspendedBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInfo_SuspendedBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInfo_StatusInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInfo_StatusInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInfo_StatusInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInfo_StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInfo_StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInfo_StatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.FinishTime != nil {
		{
			size, err := m.FinishTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateTime != nil {
		{
			size, err := m.CreateTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BackupName) > 0 {
		i -= len(m.BackupName)
		copy(dAtA[i:], m.BackupName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupScheduleInfo != nil {
		{
			size, err := m.BackupScheduleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ValidateCloudCredential {
		i--
		if m.ValidateCloudCredential {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncryptionKey) > 0 {
		i -= len(m.EncryptionKey)
		copy(dAtA[i:], m.EncryptionKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EncryptionKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationInfo_S3Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationInfo_S3Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S3Config != nil {
		{
			size, err := m.S3Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *BackupLocationInfo_StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationInfo_StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationInfo_StatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupLocationInfo != nil {
		{
			size, err := m.BackupLocationInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TotalSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x70
	}
	if len(m.CrName) > 0 {
		i -= len(m.CrName)
		copy(dAtA[i:], m.CrName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CrName)))
		i--
		dAtA[i] = 0x6a
	}
	if m.BackupSchedule != nil {
		{
			size, err := m.BackupSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.PostExecRule) > 0 {
		i -= len(m.PostExecRule)
		copy(dAtA[i:], m.PostExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PostExecRule)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PreExecRule) > 0 {
		i -= len(m.PreExecRule)
		copy(dAtA[i:], m.PreExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreExecRule)))
		i--
		dAtA[i] = 0x52
	}
	if m.Stage != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BackupPath) > 0 {
		i -= len(m.BackupPath)
		copy(dAtA[i:], m.BackupPath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupPath)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Volumes) > 0 {
		for iNdEx := len(m.Volumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Volumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupInfo_BackupSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInfo_BackupSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInfo_BackupSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupInfo_Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInfo_Volume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInfo_Volume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActualSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActualSize))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Options) > 0 {
		for k := range m.Options {
			v := m.Options[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackupId) > 0 {
		i -= len(m.BackupId)
		copy(dAtA[i:], m.BackupId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pvc) > 0 {
		i -= len(m.Pvc)
		copy(dAtA[i:], m.Pvc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pvc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupInfo_StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInfo_StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInfo_StatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupInfo != nil {
		{
			size, err := m.BackupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RulesInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RulesInfo_RuleItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesInfo_RuleItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulesInfo_RuleItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PodSelector) > 0 {
		for k := range m.PodSelector {
			v := m.PodSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RulesInfo_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesInfo_Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulesInfo_Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RunInSinglePod {
		i--
		if m.RunInSinglePod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RuleObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RulesInfo != nil {
		{
			size, err := m.RulesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplacePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplacePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplacePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RestoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.TotalSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x58
	}
	if len(m.IncludeOptionalResourceTypes) > 0 {
		for iNdEx := len(m.IncludeOptionalResourceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IncludeOptionalResourceTypes[iNdEx])
			copy(dAtA[i:], m.IncludeOptionalResourceTypes[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.IncludeOptionalResourceTypes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Volumes) > 0 {
		for iNdEx := len(m.Volumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Volumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ReplacePolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReplacePolicy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NamespaceMapping) > 0 {
		for k := range m.NamespaceMapping {
			v := m.NamespaceMapping[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Backup) > 0 {
		i -= len(m.Backup)
		copy(dAtA[i:], m.Backup)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Backup)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreInfo_RestoredResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInfo_RestoredResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInfo_RestoredResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreInfo_Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInfo_Volume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInfo_Volume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Options) > 0 {
		for k := range m.Options {
			v := m.Options[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RestoreVolume) > 0 {
		i -= len(m.RestoreVolume)
		copy(dAtA[i:], m.RestoreVolume)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RestoreVolume)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceVolume) > 0 {
		i -= len(m.SourceVolume)
		copy(dAtA[i:], m.SourceVolume)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceVolume)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceNamespace) > 0 {
		i -= len(m.SourceNamespace)
		copy(dAtA[i:], m.SourceNamespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pvc) > 0 {
		i -= len(m.Pvc)
		copy(dAtA[i:], m.Pvc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pvc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreInfo_StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInfo_StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInfo_StatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestoreObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestoreInfo != nil {
		{
			size, err := m.RestoreInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HealthStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnumerateOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumerateOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnumerateOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ObjectIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ObjectIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClusterNameFilter) > 0 {
		i -= len(m.ClusterNameFilter)
		copy(dAtA[i:], m.ClusterNameFilter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClusterNameFilter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NameFilter) > 0 {
		i -= len(m.NameFilter)
		copy(dAtA[i:], m.NameFilter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameFilter)))
		i--
		dAtA[i] = 0x22
	}
	if m.TimeRange != nil {
		{
			size, err := m.TimeRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxObjects != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxObjects))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchedulePolicy != nil {
		{
			size, err := m.SchedulePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchedulePolicy != nil {
		{
			size, err := m.SchedulePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchedulePolicies) > 0 {
		for iNdEx := len(m.SchedulePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchedulePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchedulePolicy != nil {
		{
			size, err := m.SchedulePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchedulePolicyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulePolicyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulePolicyDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupScheduleCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PostExecRule) > 0 {
		i -= len(m.PostExecRule)
		copy(dAtA[i:], m.PostExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PostExecRule)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PreExecRule) > 0 {
		i -= len(m.PreExecRule)
		copy(dAtA[i:], m.PreExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreExecRule)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReclaimPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReclaimPolicy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SchedulePolicy) > 0 {
		i -= len(m.SchedulePolicy)
		copy(dAtA[i:], m.SchedulePolicy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SchedulePolicy)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupScheduleUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Suspend {
		i--
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.PostExecRule) > 0 {
		i -= len(m.PostExecRule)
		copy(dAtA[i:], m.PostExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PostExecRule)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PreExecRule) > 0 {
		i -= len(m.PreExecRule)
		copy(dAtA[i:], m.PreExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreExecRule)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReclaimPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReclaimPolicy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SchedulePolicy) > 0 {
		i -= len(m.SchedulePolicy)
		copy(dAtA[i:], m.SchedulePolicy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SchedulePolicy)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupScheduleEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackupSchedules) > 0 {
		for iNdEx := len(m.BackupSchedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BackupSchedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupSchedule != nil {
		{
			size, err := m.BackupSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupScheduleDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupScheduleDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupScheduleDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClusterCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Kubeconfig) > 0 {
		i -= len(m.Kubeconfig)
		copy(dAtA[i:], m.Kubeconfig)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kubeconfig)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PxConfig != nil {
		{
			size, err := m.PxConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClusterUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Kubeconfig) > 0 {
		i -= len(m.Kubeconfig)
		copy(dAtA[i:], m.Kubeconfig)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kubeconfig)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PxConfig != nil {
		{
			size, err := m.PxConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClusterEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSecrets {
		i--
		if m.IncludeSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSecrets {
		i--
		if m.IncludeSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteRestores {
		i--
		if m.DeleteRestores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloudCredentialCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudCredential != nil {
		{
			size, err := m.CloudCredential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloudCredentialUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudCredential != nil {
		{
			size, err := m.CloudCredential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CloudCredentialEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSecrets {
		i--
		if m.IncludeSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudCredentials) > 0 {
		for iNdEx := len(m.CloudCredentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudCredentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeSecrets {
		i--
		if m.IncludeSecrets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudCredential != nil {
		{
			size, err := m.CloudCredential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudCredentialDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudCredentialDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudCredentialDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupLocationCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupLocation != nil {
		{
			size, err := m.BackupLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupLocationUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupLocation != nil {
		{
			size, err := m.BackupLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupLocationEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BackupLocations) > 0 {
		for iNdEx := len(m.BackupLocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BackupLocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackupLocation != nil {
		{
			size, err := m.BackupLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteBackups {
		i--
		if m.DeleteBackups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupLocationValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationValidateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupLocationValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupLocationValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupLocationValidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MetricsInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetricsInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricsInspectResponse_Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsInspectResponse_Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsInspectResponse_Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumSchedules != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NumSchedules))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalBackupSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalBackupSize))
		i--
		dAtA[i] = 0x18
	}
	if m.NumNamespaces != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NumNamespaces))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PostExecRule) > 0 {
		i -= len(m.PostExecRule)
		copy(dAtA[i:], m.PostExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PostExecRule)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PreExecRule) > 0 {
		i -= len(m.PreExecRule)
		copy(dAtA[i:], m.PreExecRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PreExecRule)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LabelSelectors) > 0 {
		for k := range m.LabelSelectors {
			v := m.LabelSelectors[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BackupLocation) > 0 {
		i -= len(m.BackupLocation)
		copy(dAtA[i:], m.BackupLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupLocation)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudCredential) > 0 {
		i -= len(m.CloudCredential)
		copy(dAtA[i:], m.CloudCredential)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CloudCredential)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BackupEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnumerateOptions != nil {
		{
			size, err := m.EnumerateOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Complete {
		i--
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TotalCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Backups) > 0 {
		for iNdEx := len(m.Backups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Backups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Backup != nil {
		{
			size, err := m.Backup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RestoreCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncludeResources) > 0 {
		for iNdEx := len(m.IncludeResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.IncludeOptionalResourceTypes) > 0 {
		for iNdEx := len(m.IncludeOptionalResourceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IncludeOptionalResourceTypes[iNdEx])
			copy(dAtA[i:], m.IncludeOptionalResourceTypes[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.IncludeOptionalResourceTypes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ReplacePolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReplacePolicy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NamespaceMapping) > 0 {
		for k := range m.NamespaceMapping {
			v := m.NamespaceMapping[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Backup) > 0 {
		i -= len(m.Backup)
		copy(dAtA[i:], m.Backup)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Backup)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RestoreUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RestoreEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnumerateOptions != nil {
		{
			size, err := m.EnumerateOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Complete {
		i--
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TotalCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Restores) > 0 {
		for iNdEx := len(m.Restores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Restores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RestoreInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Restore != nil {
		{
			size, err := m.Restore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestoreDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RulesInfo != nil {
		{
			size, err := m.RulesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RuleUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RulesInfo != nil {
		{
			size, err := m.RulesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RuleEnumerateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleEnumerateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleEnumerateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleEnumerateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleEnumerateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleEnumerateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RuleInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuleDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildDate) > 0 {
		i -= len(m.BuildDate)
		copy(dAtA[i:], m.BuildDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BuildDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GitCommit) > 0 {
		i -= len(m.GitCommit)
		copy(dAtA[i:], m.GitCommit)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GitCommit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Patch) > 0 {
		i -= len(m.Patch)
		copy(dAtA[i:], m.Patch)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Patch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Minor) > 0 {
		i -= len(m.Minor)
		copy(dAtA[i:], m.Minor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Minor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Major) > 0 {
		i -= len(m.Major)
		copy(dAtA[i:], m.Major)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Major)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VersionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseActivateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseActivateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseActivateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LicenseData) > 0 {
		i -= len(m.LicenseData)
		copy(dAtA[i:], m.LicenseData)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LicenseData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActivationId) > 0 {
		i -= len(m.ActivationId)
		copy(dAtA[i:], m.ActivationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreateMetadata != nil {
		{
			size, err := m.CreateMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseActivateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseActivateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseActivateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LicenseInspectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseInspectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseInspectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseInspectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseInspectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseInspectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LicenseRespInfo != nil {
		{
			size, err := m.LicenseRespInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseResponseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureInfo) > 0 {
		for iNdEx := len(m.FeatureInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeatureInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LicenseResponseInfo_FeatureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseResponseInfo_FeatureInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseResponseInfo_FeatureInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntitlementInfo) > 0 {
		for iNdEx := len(m.EntitlementInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntitlementInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Consumed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Consumed))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseResponseInfo_EntitlementInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseResponseInfo_EntitlementInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseResponseInfo_EntitlementInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Starts != nil {
		{
			size, err := m.Starts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Expires != nil {
		{
			size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedOrganizationObject(r randyApi, easy bool) *OrganizationObject {
	this := &OrganizationObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterInfo(r randyApi, easy bool) *ClusterInfo {
	this := &ClusterInfo{}
	if r.Intn(5) != 0 {
		this.PxConfig = NewPopulatedPXConfig(r, easy)
	}
	this.Kubeconfig = string(randStringApi(r))
	this.CloudCredential = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedClusterInfo_StatusInfo(r, easy)
	}
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	this.DeleteRestores = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterInfo_StatusInfo(r randyApi, easy bool) *ClusterInfo_StatusInfo {
	this := &ClusterInfo_StatusInfo{}
	this.Status = ClusterInfo_StatusInfo_Status([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Reason = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterObject(r randyApi, easy bool) *ClusterObject {
	this := &ClusterObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ClusterInfo = NewPopulatedClusterInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPXConfig(r randyApi, easy bool) *PXConfig {
	this := &PXConfig{}
	this.AccessToken = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAWSConfig(r randyApi, easy bool) *AWSConfig {
	this := &AWSConfig{}
	this.AccessKey = string(randStringApi(r))
	this.SecretKey = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedS3Config(r randyApi, easy bool) *S3Config {
	this := &S3Config{}
	this.Endpoint = string(randStringApi(r))
	this.Region = string(randStringApi(r))
	this.DisableSsl = bool(bool(r.Intn(2) == 0))
	this.DisablePathStyle = bool(bool(r.Intn(2) == 0))
	this.StorageClass = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAzureConfig(r randyApi, easy bool) *AzureConfig {
	this := &AzureConfig{}
	this.AccountName = string(randStringApi(r))
	this.AccountKey = string(randStringApi(r))
	this.ClientSecret = string(randStringApi(r))
	this.ClientId = string(randStringApi(r))
	this.TenantId = string(randStringApi(r))
	this.SubscriptionId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGoogleConfig(r randyApi, easy bool) *GoogleConfig {
	this := &GoogleConfig{}
	this.ProjectId = string(randStringApi(r))
	this.JsonKey = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialInfo(r randyApi, easy bool) *CloudCredentialInfo {
	this := &CloudCredentialInfo{}
	this.Type = CloudCredentialInfo_Type([]int32{0, 1, 2, 3}[r.Intn(4)])
	oneofNumber_Config := []int32{100, 101, 102}[r.Intn(3)]
	switch oneofNumber_Config {
	case 100:
		this.Config = NewPopulatedCloudCredentialInfo_AwsConfig(r, easy)
	case 101:
		this.Config = NewPopulatedCloudCredentialInfo_AzureConfig(r, easy)
	case 102:
		this.Config = NewPopulatedCloudCredentialInfo_GoogleConfig(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialInfo_AwsConfig(r randyApi, easy bool) *CloudCredentialInfo_AwsConfig {
	this := &CloudCredentialInfo_AwsConfig{}
	this.AwsConfig = NewPopulatedAWSConfig(r, easy)
	return this
}
func NewPopulatedCloudCredentialInfo_AzureConfig(r randyApi, easy bool) *CloudCredentialInfo_AzureConfig {
	this := &CloudCredentialInfo_AzureConfig{}
	this.AzureConfig = NewPopulatedAzureConfig(r, easy)
	return this
}
func NewPopulatedCloudCredentialInfo_GoogleConfig(r randyApi, easy bool) *CloudCredentialInfo_GoogleConfig {
	this := &CloudCredentialInfo_GoogleConfig{}
	this.GoogleConfig = NewPopulatedGoogleConfig(r, easy)
	return this
}
func NewPopulatedCloudCredentialObject(r randyApi, easy bool) *CloudCredentialObject {
	this := &CloudCredentialObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CloudCredentialInfo = NewPopulatedCloudCredentialInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo(r randyApi, easy bool) *SchedulePolicyInfo {
	this := &SchedulePolicyInfo{}
	if r.Intn(5) != 0 {
		this.Interval = NewPopulatedSchedulePolicyInfo_IntervalPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Daily = NewPopulatedSchedulePolicyInfo_DailyPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Weekly = NewPopulatedSchedulePolicyInfo_WeeklyPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Monthly = NewPopulatedSchedulePolicyInfo_MonthlyPolicy(r, easy)
	}
	v1 := r.Intn(10)
	this.BackupSchedule = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.BackupSchedule[i] = string(randStringApi(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo_IncrementalCount(r randyApi, easy bool) *SchedulePolicyInfo_IncrementalCount {
	this := &SchedulePolicyInfo_IncrementalCount{}
	this.Count = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo_IntervalPolicy(r randyApi, easy bool) *SchedulePolicyInfo_IntervalPolicy {
	this := &SchedulePolicyInfo_IntervalPolicy{}
	this.Minutes = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Minutes *= -1
	}
	this.Retain = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Retain *= -1
	}
	if r.Intn(5) != 0 {
		this.IncrementalCount = NewPopulatedSchedulePolicyInfo_IncrementalCount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo_DailyPolicy(r randyApi, easy bool) *SchedulePolicyInfo_DailyPolicy {
	this := &SchedulePolicyInfo_DailyPolicy{}
	this.Time = string(randStringApi(r))
	this.Retain = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Retain *= -1
	}
	if r.Intn(5) != 0 {
		this.IncrementalCount = NewPopulatedSchedulePolicyInfo_IncrementalCount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo_WeeklyPolicy(r randyApi, easy bool) *SchedulePolicyInfo_WeeklyPolicy {
	this := &SchedulePolicyInfo_WeeklyPolicy{}
	this.Day = string(randStringApi(r))
	this.Time = string(randStringApi(r))
	this.Retain = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Retain *= -1
	}
	if r.Intn(5) != 0 {
		this.IncrementalCount = NewPopulatedSchedulePolicyInfo_IncrementalCount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInfo_MonthlyPolicy(r randyApi, easy bool) *SchedulePolicyInfo_MonthlyPolicy {
	this := &SchedulePolicyInfo_MonthlyPolicy{}
	this.Date = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Date *= -1
	}
	this.Time = string(randStringApi(r))
	this.Retain = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Retain *= -1
	}
	if r.Intn(5) != 0 {
		this.IncrementalCount = NewPopulatedSchedulePolicyInfo_IncrementalCount(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyObject(r randyApi, easy bool) *SchedulePolicyObject {
	this := &SchedulePolicyObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SchedulePolicyInfo = NewPopulatedSchedulePolicyInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInfo(r randyApi, easy bool) *BackupScheduleInfo {
	this := &BackupScheduleInfo{}
	this.SchedulePolicy = string(randStringApi(r))
	this.Suspend = bool(bool(r.Intn(2) == 0))
	this.ReclaimPolicy = BackupScheduleInfo_ReclaimPolicyType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.BackupStatus = make(map[string]*BackupScheduleInfo_StatusInfoList)
		for i := 0; i < v2; i++ {
			this.BackupStatus[randStringApi(r)] = NewPopulatedBackupScheduleInfo_StatusInfoList(r, easy)
		}
	}
	this.BackupLocation = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	v3 := r.Intn(10)
	this.Namespaces = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.Namespaces[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	this.PreExecRule = string(randStringApi(r))
	this.PostExecRule = string(randStringApi(r))
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedBackupScheduleInfo_StatusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SuspendedBy = NewPopulatedBackupScheduleInfo_SuspendedBy(r, easy)
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v5)
		for i := 0; i < v5; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInfo_SuspendedBy(r randyApi, easy bool) *BackupScheduleInfo_SuspendedBy {
	this := &BackupScheduleInfo_SuspendedBy{}
	this.Source = BackupScheduleInfo_SuspendedBy_Source([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInfo_StatusInfoList(r randyApi, easy bool) *BackupScheduleInfo_StatusInfoList {
	this := &BackupScheduleInfo_StatusInfoList{}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Status = make([]*BackupScheduleInfo_StatusInfo, v6)
		for i := 0; i < v6; i++ {
			this.Status[i] = NewPopulatedBackupScheduleInfo_StatusInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInfo_StatusInfo(r randyApi, easy bool) *BackupScheduleInfo_StatusInfo {
	this := &BackupScheduleInfo_StatusInfo{}
	this.BackupName = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.CreateTime = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FinishTime = types.NewPopulatedTimestamp(r, easy)
	}
	this.Status = BackupScheduleInfo_StatusInfo_Status([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	this.Reason = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleObject(r randyApi, easy bool) *BackupScheduleObject {
	this := &BackupScheduleObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BackupScheduleInfo = NewPopulatedBackupScheduleInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationInfo(r randyApi, easy bool) *BackupLocationInfo {
	this := &BackupLocationInfo{}
	this.Type = BackupLocationInfo_Type([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Path = string(randStringApi(r))
	this.EncryptionKey = string(randStringApi(r))
	this.CloudCredential = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedBackupLocationInfo_StatusInfo(r, easy)
	}
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	this.ValidateCloudCredential = bool(bool(r.Intn(2) == 0))
	oneofNumber_Config := []int32{100}[r.Intn(1)]
	switch oneofNumber_Config {
	case 100:
		this.Config = NewPopulatedBackupLocationInfo_S3Config(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationInfo_S3Config(r randyApi, easy bool) *BackupLocationInfo_S3Config {
	this := &BackupLocationInfo_S3Config{}
	this.S3Config = NewPopulatedS3Config(r, easy)
	return this
}
func NewPopulatedBackupLocationInfo_StatusInfo(r randyApi, easy bool) *BackupLocationInfo_StatusInfo {
	this := &BackupLocationInfo_StatusInfo{}
	this.Status = BackupLocationInfo_StatusInfo_Status([]int32{0, 1, 2}[r.Intn(3)])
	this.Reason = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationObject(r randyApi, easy bool) *BackupLocationObject {
	this := &BackupLocationObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BackupLocationInfo = NewPopulatedBackupLocationInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResourceInfo(r randyApi, easy bool) *ResourceInfo {
	this := &ResourceInfo{}
	this.Name = string(randStringApi(r))
	this.Namespace = string(randStringApi(r))
	this.Group = string(randStringApi(r))
	this.Kind = string(randStringApi(r))
	this.Version = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInfo(r randyApi, easy bool) *BackupInfo {
	this := &BackupInfo{}
	this.BackupLocation = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	v7 := r.Intn(10)
	this.Namespaces = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.Namespaces[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v8; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedBackupInfo_StatusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Resources = make([]*ResourceInfo, v9)
		for i := 0; i < v9; i++ {
			this.Resources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.Volumes = make([]*BackupInfo_Volume, v10)
		for i := 0; i < v10; i++ {
			this.Volumes[i] = NewPopulatedBackupInfo_Volume(r, easy)
		}
	}
	this.BackupPath = string(randStringApi(r))
	this.Stage = BackupInfo_Stage([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	this.PreExecRule = string(randStringApi(r))
	this.PostExecRule = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.BackupSchedule = NewPopulatedBackupInfo_BackupSchedule(r, easy)
	}
	this.CrName = string(randStringApi(r))
	this.TotalSize = uint64(uint64(r.Uint32()))
	this.CloudCredential = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v11)
		for i := 0; i < v11; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInfo_BackupSchedule(r randyApi, easy bool) *BackupInfo_BackupSchedule {
	this := &BackupInfo_BackupSchedule{}
	this.Uid = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInfo_Volume(r randyApi, easy bool) *BackupInfo_Volume {
	this := &BackupInfo_Volume{}
	this.Name = string(randStringApi(r))
	this.Namespace = string(randStringApi(r))
	this.Pvc = string(randStringApi(r))
	this.BackupId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedBackupInfo_StatusInfo(r, easy)
	}
	this.DriverName = string(randStringApi(r))
	v12 := r.Intn(10)
	this.Zones = make([]string, v12)
	for i := 0; i < v12; i++ {
		this.Zones[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v13 := r.Intn(10)
		this.Options = make(map[string]string)
		for i := 0; i < v13; i++ {
			this.Options[randStringApi(r)] = randStringApi(r)
		}
	}
	this.TotalSize = uint64(uint64(r.Uint32()))
	this.ActualSize = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInfo_StatusInfo(r randyApi, easy bool) *BackupInfo_StatusInfo {
	this := &BackupInfo_StatusInfo{}
	this.Status = BackupInfo_StatusInfo_Status([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(11)])
	this.Reason = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupObject(r randyApi, easy bool) *BackupObject {
	this := &BackupObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BackupInfo = NewPopulatedBackupInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRulesInfo(r randyApi, easy bool) *RulesInfo {
	this := &RulesInfo{}
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.Rules = make([]*RulesInfo_RuleItem, v14)
		for i := 0; i < v14; i++ {
			this.Rules[i] = NewPopulatedRulesInfo_RuleItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRulesInfo_RuleItem(r randyApi, easy bool) *RulesInfo_RuleItem {
	this := &RulesInfo_RuleItem{}
	if r.Intn(5) != 0 {
		v15 := r.Intn(10)
		this.PodSelector = make(map[string]string)
		for i := 0; i < v15; i++ {
			this.PodSelector[randStringApi(r)] = randStringApi(r)
		}
	}
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.Actions = make([]*RulesInfo_Action, v16)
		for i := 0; i < v16; i++ {
			this.Actions[i] = NewPopulatedRulesInfo_Action(r, easy)
		}
	}
	this.Container = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRulesInfo_Action(r randyApi, easy bool) *RulesInfo_Action {
	this := &RulesInfo_Action{}
	this.Background = bool(bool(r.Intn(2) == 0))
	this.RunInSinglePod = bool(bool(r.Intn(2) == 0))
	this.Value = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleObject(r randyApi, easy bool) *RuleObject {
	this := &RuleObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RulesInfo = NewPopulatedRulesInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplacePolicy(r randyApi, easy bool) *ReplacePolicy {
	this := &ReplacePolicy{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInfo(r randyApi, easy bool) *RestoreInfo {
	this := &RestoreInfo{}
	this.Backup = string(randStringApi(r))
	this.BackupLocation = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v17 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v17; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	if r.Intn(5) != 0 {
		v18 := r.Intn(10)
		this.NamespaceMapping = make(map[string]string)
		for i := 0; i < v18; i++ {
			this.NamespaceMapping[randStringApi(r)] = randStringApi(r)
		}
	}
	this.ReplacePolicy = ReplacePolicy_Type([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedRestoreInfo_StatusInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		v19 := r.Intn(5)
		this.Resources = make([]*RestoreInfo_RestoredResource, v19)
		for i := 0; i < v19; i++ {
			this.Resources[i] = NewPopulatedRestoreInfo_RestoredResource(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v20 := r.Intn(5)
		this.Volumes = make([]*RestoreInfo_Volume, v20)
		for i := 0; i < v20; i++ {
			this.Volumes[i] = NewPopulatedRestoreInfo_Volume(r, easy)
		}
	}
	this.Cluster = string(randStringApi(r))
	v21 := r.Intn(10)
	this.IncludeOptionalResourceTypes = make([]string, v21)
	for i := 0; i < v21; i++ {
		this.IncludeOptionalResourceTypes[i] = string(randStringApi(r))
	}
	this.TotalSize = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v22 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v22)
		for i := 0; i < v22; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInfo_RestoredResource(r randyApi, easy bool) *RestoreInfo_RestoredResource {
	this := &RestoreInfo_RestoredResource{}
	this.Name = string(randStringApi(r))
	this.Namespace = string(randStringApi(r))
	this.Group = string(randStringApi(r))
	this.Kind = string(randStringApi(r))
	this.Version = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedRestoreInfo_StatusInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInfo_Volume(r randyApi, easy bool) *RestoreInfo_Volume {
	this := &RestoreInfo_Volume{}
	this.Pvc = string(randStringApi(r))
	this.SourceNamespace = string(randStringApi(r))
	this.SourceVolume = string(randStringApi(r))
	this.RestoreVolume = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedRestoreInfo_StatusInfo(r, easy)
	}
	this.DriverName = string(randStringApi(r))
	v23 := r.Intn(10)
	this.Zones = make([]string, v23)
	for i := 0; i < v23; i++ {
		this.Zones[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v24 := r.Intn(10)
		this.Options = make(map[string]string)
		for i := 0; i < v24; i++ {
			this.Options[randStringApi(r)] = randStringApi(r)
		}
	}
	this.TotalSize = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInfo_StatusInfo(r randyApi, easy bool) *RestoreInfo_StatusInfo {
	this := &RestoreInfo_StatusInfo{}
	this.Status = RestoreInfo_StatusInfo_Status([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	this.Reason = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreObject(r randyApi, easy bool) *RestoreObject {
	this := &RestoreObject{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RestoreInfo = NewPopulatedRestoreInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthStatusRequest(r randyApi, easy bool) *HealthStatusRequest {
	this := &HealthStatusRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthStatusResponse(r randyApi, easy bool) *HealthStatusResponse {
	this := &HealthStatusResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTimeRange(r randyApi, easy bool) *TimeRange {
	this := &TimeRange{}
	if r.Intn(5) != 0 {
		this.StartTime = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndTime = types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEnumerateOptions(r randyApi, easy bool) *EnumerateOptions {
	this := &EnumerateOptions{}
	if r.Intn(5) != 0 {
		v25 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v25; i++ {
			this.Labels[randStringApi(r)] = randStringApi(r)
		}
	}
	this.MaxObjects = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.TimeRange = NewPopulatedTimeRange(r, easy)
	}
	this.NameFilter = string(randStringApi(r))
	this.ClusterNameFilter = string(randStringApi(r))
	this.ObjectIndex = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyCreateRequest(r randyApi, easy bool) *SchedulePolicyCreateRequest {
	this := &SchedulePolicyCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SchedulePolicy = NewPopulatedSchedulePolicyInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyCreateResponse(r randyApi, easy bool) *SchedulePolicyCreateResponse {
	this := &SchedulePolicyCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyUpdateRequest(r randyApi, easy bool) *SchedulePolicyUpdateRequest {
	this := &SchedulePolicyUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SchedulePolicy = NewPopulatedSchedulePolicyInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyUpdateResponse(r randyApi, easy bool) *SchedulePolicyUpdateResponse {
	this := &SchedulePolicyUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyEnumerateRequest(r randyApi, easy bool) *SchedulePolicyEnumerateRequest {
	this := &SchedulePolicyEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v26 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v26; i++ {
			this.Labels[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyEnumerateResponse(r randyApi, easy bool) *SchedulePolicyEnumerateResponse {
	this := &SchedulePolicyEnumerateResponse{}
	if r.Intn(5) != 0 {
		v27 := r.Intn(5)
		this.SchedulePolicies = make([]*SchedulePolicyObject, v27)
		for i := 0; i < v27; i++ {
			this.SchedulePolicies[i] = NewPopulatedSchedulePolicyObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInspectRequest(r randyApi, easy bool) *SchedulePolicyInspectRequest {
	this := &SchedulePolicyInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyInspectResponse(r randyApi, easy bool) *SchedulePolicyInspectResponse {
	this := &SchedulePolicyInspectResponse{}
	if r.Intn(5) != 0 {
		this.SchedulePolicy = NewPopulatedSchedulePolicyObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyDeleteRequest(r randyApi, easy bool) *SchedulePolicyDeleteRequest {
	this := &SchedulePolicyDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSchedulePolicyDeleteResponse(r randyApi, easy bool) *SchedulePolicyDeleteResponse {
	this := &SchedulePolicyDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleCreateRequest(r randyApi, easy bool) *BackupScheduleCreateRequest {
	this := &BackupScheduleCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.SchedulePolicy = string(randStringApi(r))
	this.ReclaimPolicy = BackupScheduleInfo_ReclaimPolicyType([]int32{0, 1, 2}[r.Intn(3)])
	this.BackupLocation = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	v28 := r.Intn(10)
	this.Namespaces = make([]string, v28)
	for i := 0; i < v28; i++ {
		this.Namespaces[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v29 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v29; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	this.PreExecRule = string(randStringApi(r))
	this.PostExecRule = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v30 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v30)
		for i := 0; i < v30; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleCreateResponse(r randyApi, easy bool) *BackupScheduleCreateResponse {
	this := &BackupScheduleCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleUpdateRequest(r randyApi, easy bool) *BackupScheduleUpdateRequest {
	this := &BackupScheduleUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.SchedulePolicy = string(randStringApi(r))
	this.ReclaimPolicy = BackupScheduleInfo_ReclaimPolicyType([]int32{0, 1, 2}[r.Intn(3)])
	this.BackupLocation = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	v31 := r.Intn(10)
	this.Namespaces = make([]string, v31)
	for i := 0; i < v31; i++ {
		this.Namespaces[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v32 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v32; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	this.PreExecRule = string(randStringApi(r))
	this.PostExecRule = string(randStringApi(r))
	this.Suspend = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		v33 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v33)
		for i := 0; i < v33; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleUpdateResponse(r randyApi, easy bool) *BackupScheduleUpdateResponse {
	this := &BackupScheduleUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleEnumerateRequest(r randyApi, easy bool) *BackupScheduleEnumerateRequest {
	this := &BackupScheduleEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v34 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v34; i++ {
			this.Labels[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleEnumerateResponse(r randyApi, easy bool) *BackupScheduleEnumerateResponse {
	this := &BackupScheduleEnumerateResponse{}
	if r.Intn(5) != 0 {
		v35 := r.Intn(5)
		this.BackupSchedules = make([]*BackupScheduleObject, v35)
		for i := 0; i < v35; i++ {
			this.BackupSchedules[i] = NewPopulatedBackupScheduleObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInspectRequest(r randyApi, easy bool) *BackupScheduleInspectRequest {
	this := &BackupScheduleInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleInspectResponse(r randyApi, easy bool) *BackupScheduleInspectResponse {
	this := &BackupScheduleInspectResponse{}
	if r.Intn(5) != 0 {
		this.BackupSchedule = NewPopulatedBackupScheduleObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleDeleteRequest(r randyApi, easy bool) *BackupScheduleDeleteRequest {
	this := &BackupScheduleDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupScheduleDeleteResponse(r randyApi, easy bool) *BackupScheduleDeleteResponse {
	this := &BackupScheduleDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterCreateRequest(r randyApi, easy bool) *ClusterCreateRequest {
	this := &ClusterCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.PxConfig = NewPopulatedPXConfig(r, easy)
	}
	this.Kubeconfig = string(randStringApi(r))
	this.CloudCredential = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterCreateResponse(r randyApi, easy bool) *ClusterCreateResponse {
	this := &ClusterCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterUpdateRequest(r randyApi, easy bool) *ClusterUpdateRequest {
	this := &ClusterUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.PxConfig = NewPopulatedPXConfig(r, easy)
	}
	this.Kubeconfig = string(randStringApi(r))
	this.CloudCredential = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterUpdateResponse(r randyApi, easy bool) *ClusterUpdateResponse {
	this := &ClusterUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterEnumerateRequest(r randyApi, easy bool) *ClusterEnumerateRequest {
	this := &ClusterEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v36 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v36; i++ {
			this.Labels[randStringApi(r)] = randStringApi(r)
		}
	}
	this.IncludeSecrets = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterEnumerateResponse(r randyApi, easy bool) *ClusterEnumerateResponse {
	this := &ClusterEnumerateResponse{}
	if r.Intn(5) != 0 {
		v37 := r.Intn(5)
		this.Clusters = make([]*ClusterObject, v37)
		for i := 0; i < v37; i++ {
			this.Clusters[i] = NewPopulatedClusterObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterInspectRequest(r randyApi, easy bool) *ClusterInspectRequest {
	this := &ClusterInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	this.IncludeSecrets = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterInspectResponse(r randyApi, easy bool) *ClusterInspectResponse {
	this := &ClusterInspectResponse{}
	if r.Intn(5) != 0 {
		this.Cluster = NewPopulatedClusterObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterDeleteRequest(r randyApi, easy bool) *ClusterDeleteRequest {
	this := &ClusterDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	this.DeleteRestores = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusterDeleteResponse(r randyApi, easy bool) *ClusterDeleteResponse {
	this := &ClusterDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialCreateRequest(r randyApi, easy bool) *CloudCredentialCreateRequest {
	this := &CloudCredentialCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CloudCredential = NewPopulatedCloudCredentialInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialCreateResponse(r randyApi, easy bool) *CloudCredentialCreateResponse {
	this := &CloudCredentialCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialUpdateRequest(r randyApi, easy bool) *CloudCredentialUpdateRequest {
	this := &CloudCredentialUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CloudCredential = NewPopulatedCloudCredentialInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialUpdateResponse(r randyApi, easy bool) *CloudCredentialUpdateResponse {
	this := &CloudCredentialUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialEnumerateRequest(r randyApi, easy bool) *CloudCredentialEnumerateRequest {
	this := &CloudCredentialEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	this.IncludeSecrets = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialEnumerateResponse(r randyApi, easy bool) *CloudCredentialEnumerateResponse {
	this := &CloudCredentialEnumerateResponse{}
	if r.Intn(5) != 0 {
		v38 := r.Intn(5)
		this.CloudCredentials = make([]*CloudCredentialObject, v38)
		for i := 0; i < v38; i++ {
			this.CloudCredentials[i] = NewPopulatedCloudCredentialObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialInspectRequest(r randyApi, easy bool) *CloudCredentialInspectRequest {
	this := &CloudCredentialInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	this.IncludeSecrets = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialInspectResponse(r randyApi, easy bool) *CloudCredentialInspectResponse {
	this := &CloudCredentialInspectResponse{}
	if r.Intn(5) != 0 {
		this.CloudCredential = NewPopulatedCloudCredentialObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialDeleteRequest(r randyApi, easy bool) *CloudCredentialDeleteRequest {
	this := &CloudCredentialDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCloudCredentialDeleteResponse(r randyApi, easy bool) *CloudCredentialDeleteResponse {
	this := &CloudCredentialDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationCreateRequest(r randyApi, easy bool) *BackupLocationCreateRequest {
	this := &BackupLocationCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BackupLocation = NewPopulatedBackupLocationInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationCreateResponse(r randyApi, easy bool) *BackupLocationCreateResponse {
	this := &BackupLocationCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationUpdateRequest(r randyApi, easy bool) *BackupLocationUpdateRequest {
	this := &BackupLocationUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BackupLocation = NewPopulatedBackupLocationInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationUpdateResponse(r randyApi, easy bool) *BackupLocationUpdateResponse {
	this := &BackupLocationUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationEnumerateRequest(r randyApi, easy bool) *BackupLocationEnumerateRequest {
	this := &BackupLocationEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v39 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v39; i++ {
			this.Labels[randStringApi(r)] = randStringApi(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationEnumerateResponse(r randyApi, easy bool) *BackupLocationEnumerateResponse {
	this := &BackupLocationEnumerateResponse{}
	if r.Intn(5) != 0 {
		v40 := r.Intn(5)
		this.BackupLocations = make([]*BackupLocationObject, v40)
		for i := 0; i < v40; i++ {
			this.BackupLocations[i] = NewPopulatedBackupLocationObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationInspectRequest(r randyApi, easy bool) *BackupLocationInspectRequest {
	this := &BackupLocationInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationInspectResponse(r randyApi, easy bool) *BackupLocationInspectResponse {
	this := &BackupLocationInspectResponse{}
	if r.Intn(5) != 0 {
		this.BackupLocation = NewPopulatedBackupLocationObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationDeleteRequest(r randyApi, easy bool) *BackupLocationDeleteRequest {
	this := &BackupLocationDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	this.DeleteBackups = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationDeleteResponse(r randyApi, easy bool) *BackupLocationDeleteResponse {
	this := &BackupLocationDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationValidateRequest(r randyApi, easy bool) *BackupLocationValidateRequest {
	this := &BackupLocationValidateRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupLocationValidateResponse(r randyApi, easy bool) *BackupLocationValidateResponse {
	this := &BackupLocationValidateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricsInspectRequest(r randyApi, easy bool) *MetricsInspectRequest {
	this := &MetricsInspectRequest{}
	this.OrgId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricsInspectResponse(r randyApi, easy bool) *MetricsInspectResponse {
	this := &MetricsInspectResponse{}
	if r.Intn(5) != 0 {
		v41 := r.Intn(5)
		this.Stats = make([]*MetricsInspectResponse_Stats, v41)
		for i := 0; i < v41; i++ {
			this.Stats[i] = NewPopulatedMetricsInspectResponse_Stats(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricsInspectResponse_Stats(r randyApi, easy bool) *MetricsInspectResponse_Stats {
	this := &MetricsInspectResponse_Stats{}
	this.Cluster = string(randStringApi(r))
	this.NumNamespaces = uint64(uint64(r.Uint32()))
	this.TotalBackupSize = uint64(uint64(r.Uint32()))
	this.NumSchedules = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupCreateRequest(r randyApi, easy bool) *BackupCreateRequest {
	this := &BackupCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.BackupLocation = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	v42 := r.Intn(10)
	this.Namespaces = make([]string, v42)
	for i := 0; i < v42; i++ {
		this.Namespaces[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v43 := r.Intn(10)
		this.LabelSelectors = make(map[string]string)
		for i := 0; i < v43; i++ {
			this.LabelSelectors[randStringApi(r)] = randStringApi(r)
		}
	}
	this.PreExecRule = string(randStringApi(r))
	this.PostExecRule = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v44 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v44)
		for i := 0; i < v44; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupCreateResponse(r randyApi, easy bool) *BackupCreateResponse {
	this := &BackupCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupUpdateRequest(r randyApi, easy bool) *BackupUpdateRequest {
	this := &BackupUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.CloudCredential = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupUpdateResponse(r randyApi, easy bool) *BackupUpdateResponse {
	this := &BackupUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupEnumerateRequest(r randyApi, easy bool) *BackupEnumerateRequest {
	this := &BackupEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.EnumerateOptions = NewPopulatedEnumerateOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupEnumerateResponse(r randyApi, easy bool) *BackupEnumerateResponse {
	this := &BackupEnumerateResponse{}
	if r.Intn(5) != 0 {
		v45 := r.Intn(5)
		this.Backups = make([]*BackupObject, v45)
		for i := 0; i < v45; i++ {
			this.Backups[i] = NewPopulatedBackupObject(r, easy)
		}
	}
	this.TotalCount = uint64(uint64(r.Uint32()))
	this.Complete = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInspectRequest(r randyApi, easy bool) *BackupInspectRequest {
	this := &BackupInspectRequest{}
	this.Name = string(randStringApi(r))
	this.OrgId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupInspectResponse(r randyApi, easy bool) *BackupInspectResponse {
	this := &BackupInspectResponse{}
	if r.Intn(5) != 0 {
		this.Backup = NewPopulatedBackupObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupDeleteRequest(r randyApi, easy bool) *BackupDeleteRequest {
	this := &BackupDeleteRequest{}
	this.Name = string(randStringApi(r))
	this.OrgId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBackupDeleteResponse(r randyApi, easy bool) *BackupDeleteResponse {
	this := &BackupDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreCreateRequest(r randyApi, easy bool) *RestoreCreateRequest {
	this := &RestoreCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.Backup = string(randStringApi(r))
	this.Cluster = string(randStringApi(r))
	if r.Intn(5) != 0 {
		v46 := r.Intn(10)
		this.NamespaceMapping = make(map[string]string)
		for i := 0; i < v46; i++ {
			this.NamespaceMapping[randStringApi(r)] = randStringApi(r)
		}
	}
	this.ReplacePolicy = ReplacePolicy_Type([]int32{0, 1, 2}[r.Intn(3)])
	v47 := r.Intn(10)
	this.IncludeOptionalResourceTypes = make([]string, v47)
	for i := 0; i < v47; i++ {
		this.IncludeOptionalResourceTypes[i] = string(randStringApi(r))
	}
	if r.Intn(5) != 0 {
		v48 := r.Intn(5)
		this.IncludeResources = make([]*ResourceInfo, v48)
		for i := 0; i < v48; i++ {
			this.IncludeResources[i] = NewPopulatedResourceInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreCreateResponse(r randyApi, easy bool) *RestoreCreateResponse {
	this := &RestoreCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreUpdateRequest(r randyApi, easy bool) *RestoreUpdateRequest {
	this := &RestoreUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreUpdateResponse(r randyApi, easy bool) *RestoreUpdateResponse {
	this := &RestoreUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreEnumerateRequest(r randyApi, easy bool) *RestoreEnumerateRequest {
	this := &RestoreEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if r.Intn(5) != 0 {
		this.EnumerateOptions = NewPopulatedEnumerateOptions(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreEnumerateResponse(r randyApi, easy bool) *RestoreEnumerateResponse {
	this := &RestoreEnumerateResponse{}
	if r.Intn(5) != 0 {
		v49 := r.Intn(5)
		this.Restores = make([]*RestoreObject, v49)
		for i := 0; i < v49; i++ {
			this.Restores[i] = NewPopulatedRestoreObject(r, easy)
		}
	}
	this.TotalCount = uint64(uint64(r.Uint32()))
	this.Complete = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInspectRequest(r randyApi, easy bool) *RestoreInspectRequest {
	this := &RestoreInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreInspectResponse(r randyApi, easy bool) *RestoreInspectResponse {
	this := &RestoreInspectResponse{}
	if r.Intn(5) != 0 {
		this.Restore = NewPopulatedRestoreObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreDeleteRequest(r randyApi, easy bool) *RestoreDeleteRequest {
	this := &RestoreDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRestoreDeleteResponse(r randyApi, easy bool) *RestoreDeleteResponse {
	this := &RestoreDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationCreateRequest(r randyApi, easy bool) *OrganizationCreateRequest {
	this := &OrganizationCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationCreateResponse(r randyApi, easy bool) *OrganizationCreateResponse {
	this := &OrganizationCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationEnumerateRequest(r randyApi, easy bool) *OrganizationEnumerateRequest {
	this := &OrganizationEnumerateRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationEnumerateResponse(r randyApi, easy bool) *OrganizationEnumerateResponse {
	this := &OrganizationEnumerateResponse{}
	if r.Intn(5) != 0 {
		v50 := r.Intn(5)
		this.Organizations = make([]*OrganizationObject, v50)
		for i := 0; i < v50; i++ {
			this.Organizations[i] = NewPopulatedOrganizationObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationInspectRequest(r randyApi, easy bool) *OrganizationInspectRequest {
	this := &OrganizationInspectRequest{}
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganizationInspectResponse(r randyApi, easy bool) *OrganizationInspectResponse {
	this := &OrganizationInspectResponse{}
	if r.Intn(5) != 0 {
		this.Organization = NewPopulatedOrganizationObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleCreateRequest(r randyApi, easy bool) *RuleCreateRequest {
	this := &RuleCreateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RulesInfo = NewPopulatedRulesInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleCreateResponse(r randyApi, easy bool) *RuleCreateResponse {
	this := &RuleCreateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleUpdateRequest(r randyApi, easy bool) *RuleUpdateRequest {
	this := &RuleUpdateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RulesInfo = NewPopulatedRulesInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleUpdateResponse(r randyApi, easy bool) *RuleUpdateResponse {
	this := &RuleUpdateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleEnumerateRequest(r randyApi, easy bool) *RuleEnumerateRequest {
	this := &RuleEnumerateRequest{}
	this.OrgId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleEnumerateResponse(r randyApi, easy bool) *RuleEnumerateResponse {
	this := &RuleEnumerateResponse{}
	if r.Intn(5) != 0 {
		v51 := r.Intn(5)
		this.Rules = make([]*RuleObject, v51)
		for i := 0; i < v51; i++ {
			this.Rules[i] = NewPopulatedRuleObject(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleInspectRequest(r randyApi, easy bool) *RuleInspectRequest {
	this := &RuleInspectRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleInspectResponse(r randyApi, easy bool) *RuleInspectResponse {
	this := &RuleInspectResponse{}
	if r.Intn(5) != 0 {
		this.Rule = NewPopulatedRuleObject(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleDeleteRequest(r randyApi, easy bool) *RuleDeleteRequest {
	this := &RuleDeleteRequest{}
	this.OrgId = string(randStringApi(r))
	this.Name = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuleDeleteResponse(r randyApi, easy bool) *RuleDeleteResponse {
	this := &RuleDeleteResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionInfo(r randyApi, easy bool) *VersionInfo {
	this := &VersionInfo{}
	this.Major = string(randStringApi(r))
	this.Minor = string(randStringApi(r))
	this.Patch = string(randStringApi(r))
	this.GitCommit = string(randStringApi(r))
	this.BuildDate = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionGetRequest(r randyApi, easy bool) *VersionGetRequest {
	this := &VersionGetRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionGetResponse(r randyApi, easy bool) *VersionGetResponse {
	this := &VersionGetResponse{}
	if r.Intn(5) != 0 {
		this.Version = NewPopulatedVersionInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseActivateRequest(r randyApi, easy bool) *LicenseActivateRequest {
	this := &LicenseActivateRequest{}
	if r.Intn(5) != 0 {
		this.CreateMetadata = NewPopulatedCreateMetadata(r, easy)
	}
	this.ActivationId = string(randStringApi(r))
	v52 := r.Intn(100)
	this.LicenseData = make([]byte, v52)
	for i := 0; i < v52; i++ {
		this.LicenseData[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseActivateResponse(r randyApi, easy bool) *LicenseActivateResponse {
	this := &LicenseActivateResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseInspectRequest(r randyApi, easy bool) *LicenseInspectRequest {
	this := &LicenseInspectRequest{}
	this.OrgId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseInspectResponse(r randyApi, easy bool) *LicenseInspectResponse {
	this := &LicenseInspectResponse{}
	if r.Intn(5) != 0 {
		this.LicenseRespInfo = NewPopulatedLicenseResponseInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseResponseInfo(r randyApi, easy bool) *LicenseResponseInfo {
	this := &LicenseResponseInfo{}
	if r.Intn(5) != 0 {
		v53 := r.Intn(5)
		this.FeatureInfo = make([]*LicenseResponseInfo_FeatureInfo, v53)
		for i := 0; i < v53; i++ {
			this.FeatureInfo[i] = NewPopulatedLicenseResponseInfo_FeatureInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseResponseInfo_FeatureInfo(r randyApi, easy bool) *LicenseResponseInfo_FeatureInfo {
	this := &LicenseResponseInfo_FeatureInfo{}
	this.Name = string(randStringApi(r))
	this.Consumed = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Consumed *= -1
	}
	if r.Intn(5) != 0 {
		v54 := r.Intn(5)
		this.EntitlementInfo = make([]*LicenseResponseInfo_EntitlementInfo, v54)
		for i := 0; i < v54; i++ {
			this.EntitlementInfo[i] = NewPopulatedLicenseResponseInfo_EntitlementInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLicenseResponseInfo_EntitlementInfo(r randyApi, easy bool) *LicenseResponseInfo_EntitlementInfo {
	this := &LicenseResponseInfo_EntitlementInfo{}
	this.Count = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if r.Intn(5) != 0 {
		this.Expires = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Starts = types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v55 := r.Intn(100)
	tmps := make([]rune, v55)
	for i := 0; i < v55; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v56 := r.Int63()
		if r.Intn(2) == 0 {
			v56 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v56))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *OrganizationObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PxConfig != nil {
		l = m.PxConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Kubeconfig)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	if m.DeleteRestores {
		n += 2
	}
	return n
}

func (m *ClusterInfo_StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ClusterObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PXConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AWSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SecretKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *S3Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DisableSsl {
		n += 2
	}
	if m.DisablePathStyle {
		n += 2
	}
	l = len(m.StorageClass)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AzureConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClientSecret)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GoogleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CloudCredentialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *CloudCredentialInfo_AwsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsConfig != nil {
		l = m.AwsConfig.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CloudCredentialInfo_AzureConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzureConfig != nil {
		l = m.AzureConfig.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CloudCredentialInfo_GoogleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoogleConfig != nil {
		l = m.GoogleConfig.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CloudCredentialObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CloudCredentialInfo != nil {
		l = m.CloudCredentialInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Daily != nil {
		l = m.Daily.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weekly != nil {
		l = m.Weekly.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Monthly != nil {
		l = m.Monthly.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.BackupSchedule) > 0 {
		for _, s := range m.BackupSchedule {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *SchedulePolicyInfo_IncrementalCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	return n
}

func (m *SchedulePolicyInfo_IntervalPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minutes != 0 {
		n += 1 + sovApi(uint64(m.Minutes))
	}
	if m.Retain != 0 {
		n += 1 + sovApi(uint64(m.Retain))
	}
	if m.IncrementalCount != nil {
		l = m.IncrementalCount.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyInfo_DailyPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Retain != 0 {
		n += 1 + sovApi(uint64(m.Retain))
	}
	if m.IncrementalCount != nil {
		l = m.IncrementalCount.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyInfo_WeeklyPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Day)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Retain != 0 {
		n += 1 + sovApi(uint64(m.Retain))
	}
	if m.IncrementalCount != nil {
		l = m.IncrementalCount.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyInfo_MonthlyPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovApi(uint64(m.Date))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Retain != 0 {
		n += 1 + sovApi(uint64(m.Retain))
	}
	if m.IncrementalCount != nil {
		l = m.IncrementalCount.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SchedulePolicyInfo != nil {
		l = m.SchedulePolicyInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupScheduleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchedulePolicy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if m.ReclaimPolicy != 0 {
		n += 1 + sovApi(uint64(m.ReclaimPolicy))
	}
	if len(m.BackupStatus) > 0 {
		for k, v := range m.BackupStatus {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.PreExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PostExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SuspendedBy != nil {
		l = m.SuspendedBy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupScheduleInfo_SuspendedBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovApi(uint64(m.Source))
	}
	return n
}

func (m *BackupScheduleInfo_StatusInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupScheduleInfo_StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BackupName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreateTime != nil {
		l = m.CreateTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FinishTime != nil {
		l = m.FinishTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupScheduleObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupScheduleInfo != nil {
		l = m.BackupScheduleInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EncryptionKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	if m.ValidateCloudCredential {
		n += 2
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *BackupLocationInfo_S3Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S3Config != nil {
		l = m.S3Config.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}
func (m *BackupLocationInfo_StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupLocationInfo != nil {
		l = m.BackupLocationInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.BackupPath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovApi(uint64(m.Stage))
	}
	l = len(m.PreExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PostExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupSchedule != nil {
		l = m.BackupSchedule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CrName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TotalSize != 0 {
		n += 1 + sovApi(uint64(m.TotalSize))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupInfo_BackupSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupInfo_Volume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pvc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackupId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.TotalSize != 0 {
		n += 1 + sovApi(uint64(m.TotalSize))
	}
	if m.ActualSize != 0 {
		n += 1 + sovApi(uint64(m.ActualSize))
	}
	return n
}

func (m *BackupInfo_StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupInfo != nil {
		l = m.BackupInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RulesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RulesInfo_RuleItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PodSelector) > 0 {
		for k, v := range m.PodSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RulesInfo_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Background {
		n += 2
	}
	if m.RunInSinglePod {
		n += 2
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RulesInfo != nil {
		l = m.RulesInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ReplacePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RestoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Backup)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.NamespaceMapping) > 0 {
		for k, v := range m.NamespaceMapping {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.ReplacePolicy != 0 {
		n += 1 + sovApi(uint64(m.ReplacePolicy))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IncludeOptionalResourceTypes) > 0 {
		for _, s := range m.IncludeOptionalResourceTypes {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TotalSize != 0 {
		n += 1 + sovApi(uint64(m.TotalSize))
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RestoreInfo_RestoredResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreInfo_Volume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pvc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceNamespace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceVolume)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RestoreVolume)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.TotalSize != 0 {
		n += 1 + sovApi(uint64(m.TotalSize))
	}
	return n
}

func (m *RestoreInfo_StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RestoreInfo != nil {
		l = m.RestoreInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *HealthStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TimeRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EnumerateOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.MaxObjects != 0 {
		n += 1 + sovApi(uint64(m.MaxObjects))
	}
	if m.TimeRange != nil {
		l = m.TimeRange.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NameFilter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClusterNameFilter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ObjectIndex != 0 {
		n += 1 + sovApi(uint64(m.ObjectIndex))
	}
	return n
}

func (m *SchedulePolicyCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SchedulePolicy != nil {
		l = m.SchedulePolicy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchedulePolicyUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SchedulePolicy != nil {
		l = m.SchedulePolicy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchedulePolicyEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SchedulePolicyEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchedulePolicies) > 0 {
		for _, e := range m.SchedulePolicies {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *SchedulePolicyInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulePolicy != nil {
		l = m.SchedulePolicy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SchedulePolicyDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupScheduleCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SchedulePolicy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReclaimPolicy != 0 {
		n += 1 + sovApi(uint64(m.ReclaimPolicy))
	}
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.PreExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PostExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupScheduleCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupScheduleUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SchedulePolicy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReclaimPolicy != 0 {
		n += 1 + sovApi(uint64(m.ReclaimPolicy))
	}
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.PreExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PostExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Suspend {
		n += 2
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupScheduleUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupScheduleEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BackupScheduleEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BackupSchedules) > 0 {
		for _, e := range m.BackupSchedules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupScheduleInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupScheduleInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackupSchedule != nil {
		l = m.BackupSchedule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupScheduleDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	return n
}

func (m *BackupScheduleDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClusterCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PxConfig != nil {
		l = m.PxConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Kubeconfig)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ClusterCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClusterUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PxConfig != nil {
		l = m.PxConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Kubeconfig)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ClusterUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClusterEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.IncludeSecrets {
		n += 2
	}
	return n
}

func (m *ClusterEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ClusterInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IncludeSecrets {
		n += 2
	}
	return n
}

func (m *ClusterInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ClusterDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	if m.DeleteRestores {
		n += 2
	}
	return n
}

func (m *ClusterDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloudCredentialCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CloudCredential != nil {
		l = m.CloudCredential.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CloudCredentialCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloudCredentialUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CloudCredential != nil {
		l = m.CloudCredential.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CloudCredentialUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CloudCredentialEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IncludeSecrets {
		n += 2
	}
	return n
}

func (m *CloudCredentialEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CloudCredentials) > 0 {
		for _, e := range m.CloudCredentials {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CloudCredentialInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IncludeSecrets {
		n += 2
	}
	return n
}

func (m *CloudCredentialInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudCredential != nil {
		l = m.CloudCredential.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CloudCredentialDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CloudCredentialDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupLocationCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupLocation != nil {
		l = m.BackupLocation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupLocationUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BackupLocation != nil {
		l = m.BackupLocation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupLocationEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BackupLocationEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BackupLocations) > 0 {
		for _, e := range m.BackupLocations {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupLocationInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackupLocation != nil {
		l = m.BackupLocation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteBackups {
		n += 2
	}
	return n
}

func (m *BackupLocationDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupLocationValidateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupLocationValidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MetricsInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *MetricsInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *MetricsInspectResponse_Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NumNamespaces != 0 {
		n += 1 + sovApi(uint64(m.NumNamespaces))
	}
	if m.TotalBackupSize != 0 {
		n += 1 + sovApi(uint64(m.TotalBackupSize))
	}
	if m.NumSchedules != 0 {
		n += 1 + sovApi(uint64(m.NumSchedules))
	}
	return n
}

func (m *BackupCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackupLocation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.LabelSelectors) > 0 {
		for k, v := range m.LabelSelectors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.PreExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PostExecRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BackupCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CloudCredential)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BackupEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.EnumerateOptions != nil {
		l = m.EnumerateOptions.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Backups) > 0 {
		for _, e := range m.Backups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovApi(uint64(m.TotalCount))
	}
	if m.Complete {
		n += 2
	}
	return n
}

func (m *BackupInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Backup != nil {
		l = m.Backup.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BackupDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RestoreCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Backup)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.NamespaceMapping) > 0 {
		for k, v := range m.NamespaceMapping {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.ReplacePolicy != 0 {
		n += 1 + sovApi(uint64(m.ReplacePolicy))
	}
	if len(m.IncludeOptionalResourceTypes) > 0 {
		for _, s := range m.IncludeOptionalResourceTypes {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.IncludeResources) > 0 {
		for _, e := range m.IncludeResources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RestoreCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RestoreUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RestoreEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.EnumerateOptions != nil {
		l = m.EnumerateOptions.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Restores) > 0 {
		for _, e := range m.Restores {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovApi(uint64(m.TotalCount))
	}
	if m.Complete {
		n += 2
	}
	return n
}

func (m *RestoreInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Restore != nil {
		l = m.Restore.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RestoreDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *OrganizationCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *OrganizationInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *OrganizationInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RulesInfo != nil {
		l = m.RulesInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RuleUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RulesInfo != nil {
		l = m.RulesInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RuleEnumerateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleEnumerateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *RuleInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RuleDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Minor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Patch)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GitCommit)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BuildDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *VersionGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VersionGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *LicenseActivateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateMetadata != nil {
		l = m.CreateMetadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActivationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LicenseData)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *LicenseActivateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LicenseInspectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *LicenseInspectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LicenseRespInfo != nil {
		l = m.LicenseRespInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *LicenseResponseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeatureInfo) > 0 {
		for _, e := range m.FeatureInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *LicenseResponseInfo_FeatureInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Consumed != 0 {
		n += 1 + sovApi(uint64(m.Consumed))
	}
	if len(m.EntitlementInfo) > 0 {
		for _, e := range m.EntitlementInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *LicenseResponseInfo_EntitlementInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Starts != nil {
		l = m.Starts.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrganizationObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PxConfig == nil {
				m.PxConfig = &PXConfig{}
			}
			if err := m.PxConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ClusterInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRestores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteRestores = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo_StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ClusterInfo_StatusInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterInfo == nil {
				m.ClusterInfo = &ClusterInfo{}
			}
			if err := m.ClusterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PXConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PXConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PXConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSsl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSsl = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathStyle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisablePathStyle = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CloudCredentialInfo_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &CloudCredentialInfo_AwsConfig{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &CloudCredentialInfo_AzureConfig{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GoogleConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &CloudCredentialInfo_GoogleConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredentialInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudCredentialInfo == nil {
				m.CloudCredentialInfo = &CloudCredentialInfo{}
			}
			if err := m.CloudCredentialInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &SchedulePolicyInfo_IntervalPolicy{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Daily == nil {
				m.Daily = &SchedulePolicyInfo_DailyPolicy{}
			}
			if err := m.Daily.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weekly == nil {
				m.Weekly = &SchedulePolicyInfo_WeeklyPolicy{}
			}
			if err := m.Weekly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monthly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monthly == nil {
				m.Monthly = &SchedulePolicyInfo_MonthlyPolicy{}
			}
			if err := m.Monthly.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupSchedule = append(m.BackupSchedule, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo_IncrementalCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncrementalCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncrementalCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo_IntervalPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntervalPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntervalPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			m.Minutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minutes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retain", wireType)
			}
			m.Retain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementalCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncrementalCount == nil {
				m.IncrementalCount = &SchedulePolicyInfo_IncrementalCount{}
			}
			if err := m.IncrementalCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo_DailyPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retain", wireType)
			}
			m.Retain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementalCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncrementalCount == nil {
				m.IncrementalCount = &SchedulePolicyInfo_IncrementalCount{}
			}
			if err := m.IncrementalCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo_WeeklyPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Day = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retain", wireType)
			}
			m.Retain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementalCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncrementalCount == nil {
				m.IncrementalCount = &SchedulePolicyInfo_IncrementalCount{}
			}
			if err := m.IncrementalCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInfo_MonthlyPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlyPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlyPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retain", wireType)
			}
			m.Retain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementalCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncrementalCount == nil {
				m.IncrementalCount = &SchedulePolicyInfo_IncrementalCount{}
			}
			if err := m.IncrementalCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePolicyInfo == nil {
				m.SchedulePolicyInfo = &SchedulePolicyInfo{}
			}
			if err := m.SchedulePolicyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReclaimPolicy", wireType)
			}
			m.ReclaimPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReclaimPolicy |= BackupScheduleInfo_ReclaimPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupStatus == nil {
				m.BackupStatus = make(map[string]*BackupScheduleInfo_StatusInfoList)
			}
			var mapkey string
			var mapvalue *BackupScheduleInfo_StatusInfoList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BackupScheduleInfo_StatusInfoList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BackupStatus[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BackupScheduleInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspendedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuspendedBy == nil {
				m.SuspendedBy = &BackupScheduleInfo_SuspendedBy{}
			}
			if err := m.SuspendedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInfo_SuspendedBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuspendedBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuspendedBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= BackupScheduleInfo_SuspendedBy_Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInfo_StatusInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &BackupScheduleInfo_StatusInfo{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInfo_StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTime == nil {
				m.CreateTime = &types.Timestamp{}
			}
			if err := m.CreateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinishTime == nil {
				m.FinishTime = &types.Timestamp{}
			}
			if err := m.FinishTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BackupScheduleInfo_StatusInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupScheduleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupScheduleInfo == nil {
				m.BackupScheduleInfo = &BackupScheduleInfo{}
			}
			if err := m.BackupScheduleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BackupLocationInfo_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BackupLocationInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidateCloudCredential", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidateCloudCredential = bool(v != 0)
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3Config{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &BackupLocationInfo_S3Config{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationInfo_StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BackupLocationInfo_StatusInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupLocationInfo == nil {
				m.BackupLocationInfo = &BackupLocationInfo{}
			}
			if err := m.BackupLocationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BackupInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &ResourceInfo{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &BackupInfo_Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= BackupInfo_Stage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupSchedule == nil {
				m.BackupSchedule = &BackupInfo_BackupSchedule{}
			}
			if err := m.BackupSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInfo_BackupSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInfo_Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pvc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pvc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BackupInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualSize", wireType)
			}
			m.ActualSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInfo_StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BackupInfo_StatusInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupInfo == nil {
				m.BackupInfo = &BackupInfo{}
			}
			if err := m.BackupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulesInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RulesInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RulesInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RulesInfo_RuleItem{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulesInfo_RuleItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodSelector == nil {
				m.PodSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &RulesInfo_Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulesInfo_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunInSinglePod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunInSinglePod = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RulesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RulesInfo == nil {
				m.RulesInfo = &RulesInfo{}
			}
			if err := m.RulesInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplacePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplacePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplacePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceMapping == nil {
				m.NamespaceMapping = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NamespaceMapping[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacePolicy", wireType)
			}
			m.ReplacePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacePolicy |= ReplacePolicy_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestoreInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &RestoreInfo_RestoredResource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &RestoreInfo_Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOptionalResourceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeOptionalResourceTypes = append(m.IncludeOptionalResourceTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInfo_RestoredResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoredResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoredResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestoreInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInfo_Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pvc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pvc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestoreVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestoreVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RestoreInfo_StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInfo_StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RestoreInfo_StatusInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestoreInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestoreInfo == nil {
				m.RestoreInfo = &RestoreInfo{}
			}
			if err := m.RestoreInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnumerateOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumerateOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumerateOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxObjects", wireType)
			}
			m.MaxObjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxObjects |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeRange == nil {
				m.TimeRange = &TimeRange{}
			}
			if err := m.TimeRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterNameFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterNameFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectIndex", wireType)
			}
			m.ObjectIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePolicy == nil {
				m.SchedulePolicy = &SchedulePolicyInfo{}
			}
			if err := m.SchedulePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePolicy == nil {
				m.SchedulePolicy = &SchedulePolicyInfo{}
			}
			if err := m.SchedulePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulePolicies = append(m.SchedulePolicies, &SchedulePolicyObject{})
			if err := m.SchedulePolicies[len(m.SchedulePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePolicy == nil {
				m.SchedulePolicy = &SchedulePolicyObject{}
			}
			if err := m.SchedulePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulePolicyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulePolicyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulePolicyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReclaimPolicy", wireType)
			}
			m.ReclaimPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReclaimPolicy |= BackupScheduleInfo_ReclaimPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReclaimPolicy", wireType)
			}
			m.ReclaimPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReclaimPolicy |= BackupScheduleInfo_ReclaimPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupSchedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupSchedules = append(m.BackupSchedules, &BackupScheduleObject{})
			if err := m.BackupSchedules[len(m.BackupSchedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupSchedule == nil {
				m.BackupSchedule = &BackupScheduleObject{}
			}
			if err := m.BackupSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupScheduleDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupScheduleDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupScheduleDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PxConfig == nil {
				m.PxConfig = &PXConfig{}
			}
			if err := m.PxConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PxConfig == nil {
				m.PxConfig = &PXConfig{}
			}
			if err := m.PxConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterObject{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &ClusterObject{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRestores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteRestores = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudCredential == nil {
				m.CloudCredential = &CloudCredentialInfo{}
			}
			if err := m.CloudCredential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudCredential == nil {
				m.CloudCredential = &CloudCredentialInfo{}
			}
			if err := m.CloudCredential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredentials = append(m.CloudCredentials, &CloudCredentialObject{})
			if err := m.CloudCredentials[len(m.CloudCredentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSecrets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSecrets = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudCredential == nil {
				m.CloudCredential = &CloudCredentialObject{}
			}
			if err := m.CloudCredential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudCredentialDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudCredentialDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudCredentialDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupLocation == nil {
				m.BackupLocation = &BackupLocationInfo{}
			}
			if err := m.BackupLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupLocation == nil {
				m.BackupLocation = &BackupLocationInfo{}
			}
			if err := m.BackupLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocations = append(m.BackupLocations, &BackupLocationObject{})
			if err := m.BackupLocations[len(m.BackupLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupLocation == nil {
				m.BackupLocation = &BackupLocationObject{}
			}
			if err := m.BackupLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBackups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteBackups = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupLocationValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupLocationValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupLocationValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &MetricsInspectResponse_Stats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsInspectResponse_Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNamespaces", wireType)
			}
			m.NumNamespaces = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNamespaces |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBackupSize", wireType)
			}
			m.TotalBackupSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBackupSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSchedules", wireType)
			}
			m.NumSchedules = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSchedules |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LabelSelectors == nil {
				m.LabelSelectors = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LabelSelectors[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostExecRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostExecRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumerateOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnumerateOptions == nil {
				m.EnumerateOptions = &EnumerateOptions{}
			}
			if err := m.EnumerateOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backups = append(m.Backups, &BackupObject{})
			if err := m.Backups[len(m.Backups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Backup == nil {
				m.Backup = &BackupObject{}
			}
			if err := m.Backup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceMapping == nil {
				m.NamespaceMapping = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NamespaceMapping[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacePolicy", wireType)
			}
			m.ReplacePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacePolicy |= ReplacePolicy_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOptionalResourceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeOptionalResourceTypes = append(m.IncludeOptionalResourceTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeResources = append(m.IncludeResources, &ResourceInfo{})
			if err := m.IncludeResources[len(m.IncludeResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumerateOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnumerateOptions == nil {
				m.EnumerateOptions = &EnumerateOptions{}
			}
			if err := m.EnumerateOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Restores = append(m.Restores, &RestoreObject{})
			if err := m.Restores[len(m.Restores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Restore == nil {
				m.Restore = &RestoreObject{}
			}
			if err := m.Restore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &OrganizationObject{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &OrganizationObject{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RulesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RulesInfo == nil {
				m.RulesInfo = &RulesInfo{}
			}
			if err := m.RulesInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RulesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RulesInfo == nil {
				m.RulesInfo = &RulesInfo{}
			}
			if err := m.RulesInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleEnumerateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleEnumerateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleEnumerateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleEnumerateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleEnumerateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleEnumerateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleObject{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &RuleObject{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &VersionInfo{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseActivateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseActivateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseActivateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateMetadata == nil {
				m.CreateMetadata = &CreateMetadata{}
			}
			if err := m.CreateMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseData = append(m.LicenseData[:0], dAtA[iNdEx:postIndex]...)
			if m.LicenseData == nil {
				m.LicenseData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseActivateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseActivateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseActivateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseInspectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseInspectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseInspectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseInspectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseInspectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseInspectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseRespInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LicenseRespInfo == nil {
				m.LicenseRespInfo = &LicenseResponseInfo{}
			}
			if err := m.LicenseRespInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureInfo = append(m.FeatureInfo, &LicenseResponseInfo_FeatureInfo{})
			if err := m.FeatureInfo[len(m.FeatureInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseResponseInfo_FeatureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumed", wireType)
			}
			m.Consumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consumed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntitlementInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntitlementInfo = append(m.EntitlementInfo, &LicenseResponseInfo_EntitlementInfo{})
			if err := m.EntitlementInfo[len(m.EntitlementInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseResponseInfo_EntitlementInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitlementInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitlementInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &types.Timestamp{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Starts == nil {
				m.Starts = &types.Timestamp{}
			}
			if err := m.Starts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
