
// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.pds.deployment.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "public/portworx/common/apiv1/meta.proto";
import "public/portworx/pds/deploymenttopology/apiv1/deploymenttopology.proto";
import "public/portworx/common/apiv1/pagination.proto";
import "public/portworx/common/apiv1/sort.proto";

option go_package = "github.com/pure-px/apis/public/portworx/pds/deployment/apiv1;deployment";
option java_multiple_files = true;
option java_package = "com.public.portworx.pds.deployment.v1";
option java_outer_classname = "DeploymentProto";

// DeploymentService serves Deployment resource APIs.
service DeploymentService {
  // CreateDeployment API creates the Deployment resource.
  rpc CreateDeployment(CreateDeploymentRequest)
    returns (Deployment) {
    option(google.api.http) = {
      post: "/pds/v1/namespace/{namespace_id}/deployment"
      body: "deployment"
    };
  }

  // GetDeployment API returns the Deployment resource.
  rpc GetDeployment(GetDeploymentRequest)
    returns (Deployment) {
    option(google.api.http) = {
      get: "/pds/v1/deployments/{id}"
    };
  }

  // UpdateDeployment API updates the Deployment resource.
  rpc UpdateDeployment(UpdateDeploymentRequest)
    returns (Deployment) {
    option(google.api.http) = {
      put: "/pds/v1/deployments/{deployment.meta.uid}"
      body: "deployment"
    };
  }

  // DeleteDeployment API deletes the Deployment resource.
  rpc DeleteDeployment(DeleteDeploymentRequest)
    returns (google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/pds/v1/deployments/{id}"
    };
  }

  // ListDeployments API lists the Deployment resources.
  rpc ListDeployments(ListDeploymentsRequest)
    returns (ListDeploymentsResponse) {
    option(google.api.http) = {
      get: "/pds/v1/deployments"
    };
  }

  // GetDeploymentCredentials API returns the Credentials to be used to access the Deployment.
  rpc GetDeploymentCredentials(GetDeploymentCredentialsRequest)
      returns (DeploymentCredentials) {
    option(google.api.http) = {
      get: "/pds/v1/deployments/{id}:credentials"
    };
  }
}

// Resource representing a Data Service Deployment.
message Deployment {
  // Metadata of the resource.
  public.portworx.common.v1.Meta meta = 1;

  // Desired configuration of the Deployment.
  Config config = 2;

  // Current status of the Deployment.
  Status status = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Credentials to access a Data Service Deployment.
message DeploymentCredentials {
  // secret to access the resource.
  string secret = 1;
}

// Desired configuration of the Deployment.
message Config {
  // References to other objects.
  References references = 1;

  // TLS configuration for the Data Service.
  TLSConfig tls_config = 2 [(google.api.field_behavior) = OPTIONAL];

  // A deployment topology contains a number of nodes that have various attributes as a collective group.
  repeated public.portworx.pds.deploymenttopology.v1.DeploymentTopology  deployment_topologies = 3;
}

// TLS configuration for the Data Service.
message TLSConfig {
  // Flag to enable TLS for the Data Service.
  bool enabled = 1;
  // Issuer (Certificate Authority) name for the TLS certificates.
  string issuer_name = 2;
}

// References to other resources.
message References {
    // UID of the target cluster in which Data Service will be deployed.
    string target_cluster_id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

    // UID of the image to be used for the Data Service Deployment.
    string image_id = 2;

    // UID of the project to which DataService Deployment associated.
    string project_id = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // UID of the restore id for the Deployment.
    string restore_id = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Status of the Deployment.
message Status {
  // Enum for Health of the Deployment.
  enum Health {
    // Health is unspecified.
    HEALTH_UNSPECIFIED = 0;

    // Deployment is Available.
    AVAILABLE = 1;

    // Deployment is PartiallyAvailable.
    PARTIALLY_AVAILABLE = 2;

    // Deployment is Unavailable.
    UNAVAILABLE = 3;
  }

  // Health of the Deployment.
  Health health = 1;

  // Enum for Status of the Deployment.
  enum Phase {
    // Phase is unspecified.
    PHASE_UNSPECIFIED = 0;

    // Restore of Deployment is in progress.
    RESTORING = 1;

    // Deployment is Failed.
    FAILED = 2;

    // Deployment is being deleted.
    DELETING = 3;

    // Deployment is Preparing.
    PREPARING = 4;

    // Deployment is Deploying.
    DEPLOYING = 5;

    // Deployment is Deployed.
    DEPLOYED = 6;

    // Deployment is Updating.
    UPDATING = 7;

    // Deployment is Timeout.
    TIMED_OUT = 8;
  }

  // Status of the Deployment.
  Phase phase = 2;

  // ConnectionDetails urls, ports, credentials, etc for connecting to the data service.
  map<string, google.protobuf.Any> connection_info = 3;

  // Initialize used to control startup scripts.
  string  initialized = 4;

  // Status of the deployment topology.
  repeated public.portworx.pds.deploymenttopology.v1.DeploymentTopologyStatus deployment_topology_status = 5;

}

// Request to get the Deployment resource.
message GetDeploymentRequest {
  // UID of the Deployment.
  string id = 1;
}

// Request to get the DeploymentCredentials resource.
message GetDeploymentCredentialsRequest {
  // UID of the Deployment.
  string id = 1;
}

// Request to delete the Deployment resource.
message DeleteDeploymentRequest {
  // UID of the Deployment.
  string id = 1;
}

// Request to create the Deployment resource.
message CreateDeploymentRequest {
  // UID of the namespace resource where this deployment will be created.
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for to support creation of
  //     the resource in the namespace context. --)
  string namespace_id = 1;

  // UID of the project.
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for to know the project with which the deployment is associated with. --)
  string project_id = 2;

  // Deployment resource.
  Deployment deployment = 3;
}

// Request to update the Deployment resource.
message UpdateDeploymentRequest {
  // Deployment resource.
  Deployment deployment = 1;
}

// Request to list the Deployment resources.
message ListDeploymentsRequest {
  // Specifies a filter to list the Deployments.
  oneof list_by {
    // UID of the account.
    string account_id = 1;

    // UID of the tenant.
    string tenant_id = 2;

    // UID of the target cluster.
    string cluster_id = 3;

    // UID of the namespace.
    string namespace_id = 4;

    // UID of the project.
    string project_id = 5;
  }

  // Pagination parameters for listing deployments.
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 6 [(google.api.field_behavior) = OPTIONAL];

  // Sorting details using which requested list of deployments to be sorted.
  public.portworx.common.v1.Sort sort = 7;
}

// Response to list Deployment request.
message ListDeploymentsResponse {
  // List of deployment resources.
  repeated Deployment deployments = 1;

  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;
}
