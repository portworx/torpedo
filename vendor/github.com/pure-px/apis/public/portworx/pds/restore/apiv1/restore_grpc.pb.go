// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/restore/apiv1/restore.proto

package restore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RestoreService_CreateRestore_FullMethodName          = "/public.portworx.pds.restore.v1.RestoreService/CreateRestore"
	RestoreService_GetRestore_FullMethodName             = "/public.portworx.pds.restore.v1.RestoreService/GetRestore"
	RestoreService_ListRestores_FullMethodName           = "/public.portworx.pds.restore.v1.RestoreService/ListRestores"
	RestoreService_RecreateRestore_FullMethodName        = "/public.portworx.pds.restore.v1.RestoreService/RecreateRestore"
	RestoreService_GetRestorabilityMatrix_FullMethodName = "/public.portworx.pds.restore.v1.RestoreService/GetRestorabilityMatrix"
)

// RestoreServiceClient is the client API for RestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestoreServiceClient interface {
	// CreateRestore API creates the Restore resource.
	CreateRestore(ctx context.Context, in *CreateRestoreRequest, opts ...grpc.CallOption) (*Restore, error)
	// GetRestore API returns the Restore resource.
	GetRestore(ctx context.Context, in *GetRestoreRequest, opts ...grpc.CallOption) (*Restore, error)
	// ListRestore API lists the Restore resources.
	ListRestores(ctx context.Context, in *ListRestoresRequest, opts ...grpc.CallOption) (*ListRestoresResponse, error)
	// RecreateRestore API recreates a already failed restore.
	RecreateRestore(ctx context.Context, in *RecreateRestoreRequest, opts ...grpc.CallOption) (*Restore, error)
	// GetRestorabilityMatrix API returns the compatibility matrix for restore.
	// (-- api-linter: core::0131::request-message-name=disabled
	//
	//	aip.dev/not-precedent: We need to do this because we don't need any parameter in request --)
	GetRestorabilityMatrix(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RestorabilityMatrix, error)
}

type restoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestoreServiceClient(cc grpc.ClientConnInterface) RestoreServiceClient {
	return &restoreServiceClient{cc}
}

func (c *restoreServiceClient) CreateRestore(ctx context.Context, in *CreateRestoreRequest, opts ...grpc.CallOption) (*Restore, error) {
	out := new(Restore)
	err := c.cc.Invoke(ctx, RestoreService_CreateRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) GetRestore(ctx context.Context, in *GetRestoreRequest, opts ...grpc.CallOption) (*Restore, error) {
	out := new(Restore)
	err := c.cc.Invoke(ctx, RestoreService_GetRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) ListRestores(ctx context.Context, in *ListRestoresRequest, opts ...grpc.CallOption) (*ListRestoresResponse, error) {
	out := new(ListRestoresResponse)
	err := c.cc.Invoke(ctx, RestoreService_ListRestores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) RecreateRestore(ctx context.Context, in *RecreateRestoreRequest, opts ...grpc.CallOption) (*Restore, error) {
	out := new(Restore)
	err := c.cc.Invoke(ctx, RestoreService_RecreateRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restoreServiceClient) GetRestorabilityMatrix(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RestorabilityMatrix, error) {
	out := new(RestorabilityMatrix)
	err := c.cc.Invoke(ctx, RestoreService_GetRestorabilityMatrix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestoreServiceServer is the server API for RestoreService service.
// All implementations must embed UnimplementedRestoreServiceServer
// for forward compatibility
type RestoreServiceServer interface {
	// CreateRestore API creates the Restore resource.
	CreateRestore(context.Context, *CreateRestoreRequest) (*Restore, error)
	// GetRestore API returns the Restore resource.
	GetRestore(context.Context, *GetRestoreRequest) (*Restore, error)
	// ListRestore API lists the Restore resources.
	ListRestores(context.Context, *ListRestoresRequest) (*ListRestoresResponse, error)
	// RecreateRestore API recreates a already failed restore.
	RecreateRestore(context.Context, *RecreateRestoreRequest) (*Restore, error)
	// GetRestorabilityMatrix API returns the compatibility matrix for restore.
	// (-- api-linter: core::0131::request-message-name=disabled
	//
	//	aip.dev/not-precedent: We need to do this because we don't need any parameter in request --)
	GetRestorabilityMatrix(context.Context, *emptypb.Empty) (*RestorabilityMatrix, error)
	mustEmbedUnimplementedRestoreServiceServer()
}

// UnimplementedRestoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestoreServiceServer struct {
}

func (UnimplementedRestoreServiceServer) CreateRestore(context.Context, *CreateRestoreRequest) (*Restore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestore not implemented")
}
func (UnimplementedRestoreServiceServer) GetRestore(context.Context, *GetRestoreRequest) (*Restore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestore not implemented")
}
func (UnimplementedRestoreServiceServer) ListRestores(context.Context, *ListRestoresRequest) (*ListRestoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestores not implemented")
}
func (UnimplementedRestoreServiceServer) RecreateRestore(context.Context, *RecreateRestoreRequest) (*Restore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecreateRestore not implemented")
}
func (UnimplementedRestoreServiceServer) GetRestorabilityMatrix(context.Context, *emptypb.Empty) (*RestorabilityMatrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestorabilityMatrix not implemented")
}
func (UnimplementedRestoreServiceServer) mustEmbedUnimplementedRestoreServiceServer() {}

// UnsafeRestoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestoreServiceServer will
// result in compilation errors.
type UnsafeRestoreServiceServer interface {
	mustEmbedUnimplementedRestoreServiceServer()
}

func RegisterRestoreServiceServer(s grpc.ServiceRegistrar, srv RestoreServiceServer) {
	s.RegisterService(&RestoreService_ServiceDesc, srv)
}

func _RestoreService_CreateRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).CreateRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_CreateRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).CreateRestore(ctx, req.(*CreateRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_GetRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).GetRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_GetRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).GetRestore(ctx, req.(*GetRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_ListRestores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).ListRestores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_ListRestores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).ListRestores(ctx, req.(*ListRestoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_RecreateRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecreateRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).RecreateRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_RecreateRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).RecreateRestore(ctx, req.(*RecreateRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestoreService_GetRestorabilityMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).GetRestorabilityMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestoreService_GetRestorabilityMatrix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).GetRestorabilityMatrix(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RestoreService_ServiceDesc is the grpc.ServiceDesc for RestoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.restore.v1.RestoreService",
	HandlerType: (*RestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestore",
			Handler:    _RestoreService_CreateRestore_Handler,
		},
		{
			MethodName: "GetRestore",
			Handler:    _RestoreService_GetRestore_Handler,
		},
		{
			MethodName: "ListRestores",
			Handler:    _RestoreService_ListRestores_Handler,
		},
		{
			MethodName: "RecreateRestore",
			Handler:    _RestoreService_RecreateRestore_Handler,
		},
		{
			MethodName: "GetRestorabilityMatrix",
			Handler:    _RestoreService_GetRestorabilityMatrix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/restore/apiv1/restore.proto",
}
