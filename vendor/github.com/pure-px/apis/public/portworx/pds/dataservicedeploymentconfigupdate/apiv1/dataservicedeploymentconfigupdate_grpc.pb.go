// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/dataservicedeploymentconfigupdate/apiv1/dataservicedeploymentconfigupdate.proto

package dataservicedeploymentconfigupdate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataServiceDeploymentConfigUpdateService_CreateDataServiceDeploymentConfigUpdate_FullMethodName = "/public.portworx.pds.dataservicedeploymentconfigupdate.v1.DataServiceDeploymentConfigUpdateService/CreateDataServiceDeploymentConfigUpdate"
	DataServiceDeploymentConfigUpdateService_GetDataServiceDeploymentConfigUpdate_FullMethodName    = "/public.portworx.pds.dataservicedeploymentconfigupdate.v1.DataServiceDeploymentConfigUpdateService/GetDataServiceDeploymentConfigUpdate"
	DataServiceDeploymentConfigUpdateService_ListDataServiceDeploymentConfigUpdates_FullMethodName  = "/public.portworx.pds.dataservicedeploymentconfigupdate.v1.DataServiceDeploymentConfigUpdateService/ListDataServiceDeploymentConfigUpdates"
	DataServiceDeploymentConfigUpdateService_RetryDataServiceDeploymentConfigUpdate_FullMethodName  = "/public.portworx.pds.dataservicedeploymentconfigupdate.v1.DataServiceDeploymentConfigUpdateService/RetryDataServiceDeploymentConfigUpdate"
)

// DataServiceDeploymentConfigUpdateServiceClient is the client API for DataServiceDeploymentConfigUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceDeploymentConfigUpdateServiceClient interface {
	// CreateDataServiceDeploymentConfigUpdate API creates config update for deployment.
	// (-- api-linter: core::0133::http-method=disabled
	//
	//	aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)
	CreateDataServiceDeploymentConfigUpdate(ctx context.Context, in *CreateDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error)
	// GetDataServiceDeploymentConfigUpdate API returns a DataService deployment config update by id.
	GetDataServiceDeploymentConfigUpdate(ctx context.Context, in *GetDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error)
	// ListDataServiceDeploymentConfigUpdates API returns a list of data service deployment config updates.
	ListDataServiceDeploymentConfigUpdates(ctx context.Context, in *ListDataServiceDeploymentConfigUpdatesRequest, opts ...grpc.CallOption) (*ListDataServiceDeploymentConfigUpdatesResponse, error)
	// RetryDataServiceDeploymentConfigUpdate API retries a data service deployment config update.
	RetryDataServiceDeploymentConfigUpdate(ctx context.Context, in *RetryDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error)
}

type dataServiceDeploymentConfigUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceDeploymentConfigUpdateServiceClient(cc grpc.ClientConnInterface) DataServiceDeploymentConfigUpdateServiceClient {
	return &dataServiceDeploymentConfigUpdateServiceClient{cc}
}

func (c *dataServiceDeploymentConfigUpdateServiceClient) CreateDataServiceDeploymentConfigUpdate(ctx context.Context, in *CreateDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error) {
	out := new(DataServiceDeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DataServiceDeploymentConfigUpdateService_CreateDataServiceDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentConfigUpdateServiceClient) GetDataServiceDeploymentConfigUpdate(ctx context.Context, in *GetDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error) {
	out := new(DataServiceDeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DataServiceDeploymentConfigUpdateService_GetDataServiceDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentConfigUpdateServiceClient) ListDataServiceDeploymentConfigUpdates(ctx context.Context, in *ListDataServiceDeploymentConfigUpdatesRequest, opts ...grpc.CallOption) (*ListDataServiceDeploymentConfigUpdatesResponse, error) {
	out := new(ListDataServiceDeploymentConfigUpdatesResponse)
	err := c.cc.Invoke(ctx, DataServiceDeploymentConfigUpdateService_ListDataServiceDeploymentConfigUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentConfigUpdateServiceClient) RetryDataServiceDeploymentConfigUpdate(ctx context.Context, in *RetryDataServiceDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DataServiceDeploymentConfigUpdate, error) {
	out := new(DataServiceDeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DataServiceDeploymentConfigUpdateService_RetryDataServiceDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceDeploymentConfigUpdateServiceServer is the server API for DataServiceDeploymentConfigUpdateService service.
// All implementations must embed UnimplementedDataServiceDeploymentConfigUpdateServiceServer
// for forward compatibility
type DataServiceDeploymentConfigUpdateServiceServer interface {
	// CreateDataServiceDeploymentConfigUpdate API creates config update for deployment.
	// (-- api-linter: core::0133::http-method=disabled
	//
	//	aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)
	CreateDataServiceDeploymentConfigUpdate(context.Context, *CreateDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error)
	// GetDataServiceDeploymentConfigUpdate API returns a DataService deployment config update by id.
	GetDataServiceDeploymentConfigUpdate(context.Context, *GetDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error)
	// ListDataServiceDeploymentConfigUpdates API returns a list of data service deployment config updates.
	ListDataServiceDeploymentConfigUpdates(context.Context, *ListDataServiceDeploymentConfigUpdatesRequest) (*ListDataServiceDeploymentConfigUpdatesResponse, error)
	// RetryDataServiceDeploymentConfigUpdate API retries a data service deployment config update.
	RetryDataServiceDeploymentConfigUpdate(context.Context, *RetryDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error)
	mustEmbedUnimplementedDataServiceDeploymentConfigUpdateServiceServer()
}

// UnimplementedDataServiceDeploymentConfigUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceDeploymentConfigUpdateServiceServer struct {
}

func (UnimplementedDataServiceDeploymentConfigUpdateServiceServer) CreateDataServiceDeploymentConfigUpdate(context.Context, *CreateDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataServiceDeploymentConfigUpdate not implemented")
}
func (UnimplementedDataServiceDeploymentConfigUpdateServiceServer) GetDataServiceDeploymentConfigUpdate(context.Context, *GetDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServiceDeploymentConfigUpdate not implemented")
}
func (UnimplementedDataServiceDeploymentConfigUpdateServiceServer) ListDataServiceDeploymentConfigUpdates(context.Context, *ListDataServiceDeploymentConfigUpdatesRequest) (*ListDataServiceDeploymentConfigUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServiceDeploymentConfigUpdates not implemented")
}
func (UnimplementedDataServiceDeploymentConfigUpdateServiceServer) RetryDataServiceDeploymentConfigUpdate(context.Context, *RetryDataServiceDeploymentConfigUpdateRequest) (*DataServiceDeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryDataServiceDeploymentConfigUpdate not implemented")
}
func (UnimplementedDataServiceDeploymentConfigUpdateServiceServer) mustEmbedUnimplementedDataServiceDeploymentConfigUpdateServiceServer() {
}

// UnsafeDataServiceDeploymentConfigUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceDeploymentConfigUpdateServiceServer will
// result in compilation errors.
type UnsafeDataServiceDeploymentConfigUpdateServiceServer interface {
	mustEmbedUnimplementedDataServiceDeploymentConfigUpdateServiceServer()
}

func RegisterDataServiceDeploymentConfigUpdateServiceServer(s grpc.ServiceRegistrar, srv DataServiceDeploymentConfigUpdateServiceServer) {
	s.RegisterService(&DataServiceDeploymentConfigUpdateService_ServiceDesc, srv)
}

func _DataServiceDeploymentConfigUpdateService_CreateDataServiceDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataServiceDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).CreateDataServiceDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentConfigUpdateService_CreateDataServiceDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).CreateDataServiceDeploymentConfigUpdate(ctx, req.(*CreateDataServiceDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentConfigUpdateService_GetDataServiceDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).GetDataServiceDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentConfigUpdateService_GetDataServiceDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).GetDataServiceDeploymentConfigUpdate(ctx, req.(*GetDataServiceDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentConfigUpdateService_ListDataServiceDeploymentConfigUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataServiceDeploymentConfigUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).ListDataServiceDeploymentConfigUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentConfigUpdateService_ListDataServiceDeploymentConfigUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).ListDataServiceDeploymentConfigUpdates(ctx, req.(*ListDataServiceDeploymentConfigUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentConfigUpdateService_RetryDataServiceDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryDataServiceDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).RetryDataServiceDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentConfigUpdateService_RetryDataServiceDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentConfigUpdateServiceServer).RetryDataServiceDeploymentConfigUpdate(ctx, req.(*RetryDataServiceDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServiceDeploymentConfigUpdateService_ServiceDesc is the grpc.ServiceDesc for DataServiceDeploymentConfigUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServiceDeploymentConfigUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.dataservicedeploymentconfigupdate.v1.DataServiceDeploymentConfigUpdateService",
	HandlerType: (*DataServiceDeploymentConfigUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataServiceDeploymentConfigUpdate",
			Handler:    _DataServiceDeploymentConfigUpdateService_CreateDataServiceDeploymentConfigUpdate_Handler,
		},
		{
			MethodName: "GetDataServiceDeploymentConfigUpdate",
			Handler:    _DataServiceDeploymentConfigUpdateService_GetDataServiceDeploymentConfigUpdate_Handler,
		},
		{
			MethodName: "ListDataServiceDeploymentConfigUpdates",
			Handler:    _DataServiceDeploymentConfigUpdateService_ListDataServiceDeploymentConfigUpdates_Handler,
		},
		{
			MethodName: "RetryDataServiceDeploymentConfigUpdate",
			Handler:    _DataServiceDeploymentConfigUpdateService_RetryDataServiceDeploymentConfigUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/dataservicedeploymentconfigupdate/apiv1/dataservicedeploymentconfigupdate.proto",
}
