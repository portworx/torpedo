// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/deploymentconfigupdate/apiv1/deploymentconfigupdate.proto

package deploymentconfigupdate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeploymentConfigUpdateService_CreateDeploymentConfigUpdate_FullMethodName = "/public.portworx.pds.deploymentconfigupdate.v1.DeploymentConfigUpdateService/CreateDeploymentConfigUpdate"
	DeploymentConfigUpdateService_GetDeploymentConfigUpdate_FullMethodName    = "/public.portworx.pds.deploymentconfigupdate.v1.DeploymentConfigUpdateService/GetDeploymentConfigUpdate"
	DeploymentConfigUpdateService_ListDeploymentConfigUpdates_FullMethodName  = "/public.portworx.pds.deploymentconfigupdate.v1.DeploymentConfigUpdateService/ListDeploymentConfigUpdates"
	DeploymentConfigUpdateService_RetryDeploymentConfigUpdate_FullMethodName  = "/public.portworx.pds.deploymentconfigupdate.v1.DeploymentConfigUpdateService/RetryDeploymentConfigUpdate"
)

// DeploymentConfigUpdateServiceClient is the client API for DeploymentConfigUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentConfigUpdateServiceClient interface {
	// CreateDeploymentConfigUpdate API creates a deployment config update.
	// (-- api-linter: core::0133::http-method=disabled
	//
	//	aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)
	CreateDeploymentConfigUpdate(ctx context.Context, in *CreateDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error)
	// GetDeploymentConfigUpdate API returns a deployment config update by id.
	GetDeploymentConfigUpdate(ctx context.Context, in *GetDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error)
	// ListDeploymentConfigUpdates API returns a list of deployment config updates.
	ListDeploymentConfigUpdates(ctx context.Context, in *ListDeploymentConfigUpdatesRequest, opts ...grpc.CallOption) (*ListDeploymentConfigUpdatesResponse, error)
	// RetryDeploymentConfigUpdate API retries a deployment config update.
	RetryDeploymentConfigUpdate(ctx context.Context, in *RetryDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error)
}

type deploymentConfigUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentConfigUpdateServiceClient(cc grpc.ClientConnInterface) DeploymentConfigUpdateServiceClient {
	return &deploymentConfigUpdateServiceClient{cc}
}

func (c *deploymentConfigUpdateServiceClient) CreateDeploymentConfigUpdate(ctx context.Context, in *CreateDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error) {
	out := new(DeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DeploymentConfigUpdateService_CreateDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentConfigUpdateServiceClient) GetDeploymentConfigUpdate(ctx context.Context, in *GetDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error) {
	out := new(DeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DeploymentConfigUpdateService_GetDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentConfigUpdateServiceClient) ListDeploymentConfigUpdates(ctx context.Context, in *ListDeploymentConfigUpdatesRequest, opts ...grpc.CallOption) (*ListDeploymentConfigUpdatesResponse, error) {
	out := new(ListDeploymentConfigUpdatesResponse)
	err := c.cc.Invoke(ctx, DeploymentConfigUpdateService_ListDeploymentConfigUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentConfigUpdateServiceClient) RetryDeploymentConfigUpdate(ctx context.Context, in *RetryDeploymentConfigUpdateRequest, opts ...grpc.CallOption) (*DeploymentConfigUpdate, error) {
	out := new(DeploymentConfigUpdate)
	err := c.cc.Invoke(ctx, DeploymentConfigUpdateService_RetryDeploymentConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentConfigUpdateServiceServer is the server API for DeploymentConfigUpdateService service.
// All implementations must embed UnimplementedDeploymentConfigUpdateServiceServer
// for forward compatibility
type DeploymentConfigUpdateServiceServer interface {
	// CreateDeploymentConfigUpdate API creates a deployment config update.
	// (-- api-linter: core::0133::http-method=disabled
	//
	//	aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)
	CreateDeploymentConfigUpdate(context.Context, *CreateDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error)
	// GetDeploymentConfigUpdate API returns a deployment config update by id.
	GetDeploymentConfigUpdate(context.Context, *GetDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error)
	// ListDeploymentConfigUpdates API returns a list of deployment config updates.
	ListDeploymentConfigUpdates(context.Context, *ListDeploymentConfigUpdatesRequest) (*ListDeploymentConfigUpdatesResponse, error)
	// RetryDeploymentConfigUpdate API retries a deployment config update.
	RetryDeploymentConfigUpdate(context.Context, *RetryDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error)
	mustEmbedUnimplementedDeploymentConfigUpdateServiceServer()
}

// UnimplementedDeploymentConfigUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentConfigUpdateServiceServer struct {
}

func (UnimplementedDeploymentConfigUpdateServiceServer) CreateDeploymentConfigUpdate(context.Context, *CreateDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploymentConfigUpdate not implemented")
}
func (UnimplementedDeploymentConfigUpdateServiceServer) GetDeploymentConfigUpdate(context.Context, *GetDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentConfigUpdate not implemented")
}
func (UnimplementedDeploymentConfigUpdateServiceServer) ListDeploymentConfigUpdates(context.Context, *ListDeploymentConfigUpdatesRequest) (*ListDeploymentConfigUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentConfigUpdates not implemented")
}
func (UnimplementedDeploymentConfigUpdateServiceServer) RetryDeploymentConfigUpdate(context.Context, *RetryDeploymentConfigUpdateRequest) (*DeploymentConfigUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryDeploymentConfigUpdate not implemented")
}
func (UnimplementedDeploymentConfigUpdateServiceServer) mustEmbedUnimplementedDeploymentConfigUpdateServiceServer() {
}

// UnsafeDeploymentConfigUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentConfigUpdateServiceServer will
// result in compilation errors.
type UnsafeDeploymentConfigUpdateServiceServer interface {
	mustEmbedUnimplementedDeploymentConfigUpdateServiceServer()
}

func RegisterDeploymentConfigUpdateServiceServer(s grpc.ServiceRegistrar, srv DeploymentConfigUpdateServiceServer) {
	s.RegisterService(&DeploymentConfigUpdateService_ServiceDesc, srv)
}

func _DeploymentConfigUpdateService_CreateDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentConfigUpdateServiceServer).CreateDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentConfigUpdateService_CreateDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentConfigUpdateServiceServer).CreateDeploymentConfigUpdate(ctx, req.(*CreateDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentConfigUpdateService_GetDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentConfigUpdateServiceServer).GetDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentConfigUpdateService_GetDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentConfigUpdateServiceServer).GetDeploymentConfigUpdate(ctx, req.(*GetDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentConfigUpdateService_ListDeploymentConfigUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentConfigUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentConfigUpdateServiceServer).ListDeploymentConfigUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentConfigUpdateService_ListDeploymentConfigUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentConfigUpdateServiceServer).ListDeploymentConfigUpdates(ctx, req.(*ListDeploymentConfigUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentConfigUpdateService_RetryDeploymentConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryDeploymentConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentConfigUpdateServiceServer).RetryDeploymentConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentConfigUpdateService_RetryDeploymentConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentConfigUpdateServiceServer).RetryDeploymentConfigUpdate(ctx, req.(*RetryDeploymentConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentConfigUpdateService_ServiceDesc is the grpc.ServiceDesc for DeploymentConfigUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentConfigUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.deploymentconfigupdate.v1.DeploymentConfigUpdateService",
	HandlerType: (*DeploymentConfigUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeploymentConfigUpdate",
			Handler:    _DeploymentConfigUpdateService_CreateDeploymentConfigUpdate_Handler,
		},
		{
			MethodName: "GetDeploymentConfigUpdate",
			Handler:    _DeploymentConfigUpdateService_GetDeploymentConfigUpdate_Handler,
		},
		{
			MethodName: "ListDeploymentConfigUpdates",
			Handler:    _DeploymentConfigUpdateService_ListDeploymentConfigUpdates_Handler,
		},
		{
			MethodName: "RetryDeploymentConfigUpdate",
			Handler:    _DeploymentConfigUpdateService_RetryDeploymentConfigUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/deploymentconfigupdate/apiv1/deploymentconfigupdate.proto",
}
