// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//
syntax = "proto3";

package public.portworx.pds.deploymentconfigupdate.v1;

import "public/portworx/common/apiv1/meta.proto";
import "public/portworx/common/apiv1/pagination.proto";
import "google/api/annotations.proto";
import "public/portworx/common/apiv1/sort.proto";
import "google/api/field_behavior.proto";
import "public/portworx/pds/deployment/apiv1/deployment.proto";

option go_package = "github.com/pure-px/apis/public/portworx/pds/deploymentconfigupdate/apiv1;deploymentconfigupdate";
option java_multiple_files = true;
option java_package = "com.public.portworx.pds.deploymentconfigupdate.v1";
option java_outer_classname = "DeploymentConfigUpdateProto";

// DeploymentConfigUpdateService provides APIs to interact with the data service deployment config update.
service DeploymentConfigUpdateService {
  // CreateDeploymentConfigUpdate API creates a deployment config update.
  // (-- api-linter: core::0133::http-method=disabled
  //     aip.dev/not-precedent: We need to do this because here we are actually updating deployment config. --)
  rpc CreateDeploymentConfigUpdate(CreateDeploymentConfigUpdateRequest)
    returns (DeploymentConfigUpdate) {
    option (google.api.http) = {
      put: "/pds/v1/deployments/{deployment_config_update.config.deployment_meta.uid}/deploymentConfigUpdates"
      body: "deployment_config_update"
    };
  }

  // GetDeploymentConfigUpdate API returns a deployment config update by id.
  rpc GetDeploymentConfigUpdate(GetDeploymentConfigUpdateRequest) 
    returns (DeploymentConfigUpdate) {
    option (google.api.http) = {
      get: "/pds/v1/deploymentConfigUpdates/{id}"
    };
  }

  // ListDeploymentConfigUpdates API returns a list of deployment config updates.
  rpc ListDeploymentConfigUpdates(ListDeploymentConfigUpdatesRequest) 
    returns (ListDeploymentConfigUpdatesResponse) {
    option (google.api.http) = {
      get: "/pds/v1/deploymentConfigUpdates"
    };
  }

  // RetryDeploymentConfigUpdate API retries a deployment config update.
  rpc RetryDeploymentConfigUpdate(RetryDeploymentConfigUpdateRequest) 
    returns (DeploymentConfigUpdate) {
    option (google.api.http) = {
      post: "/pds/v1/deploymentConfigUpdates/{id}:retry"
      body: "*"
    };
  }
}

// CreateDeploymentConfigUpdateRequest is the request for CreateDeploymentConfigUpdate.
message CreateDeploymentConfigUpdateRequest {
  // DeploymentConfigUpdate of the deployment update request.
  DeploymentConfigUpdate deployment_config_update = 1;
}

// GetDeploymentConfigUpdateRequest is the request for GetDeploymentConfigUpdate.
message GetDeploymentConfigUpdateRequest {
  // UID of the deployment config update.
  string id = 1;
}

// ListDeploymentConfigUpdatesRequest is the request for ListDeploymentConfigUpdates.
message ListDeploymentConfigUpdatesRequest {
  // UID of the deployment.
  string deployment_id = 1 [(google.api.field_behavior) = OPTIONAL];
  // Sorting details using which requested list to be sorted.
  public.portworx.common.v1.Sort sort = 2;
  // Pagination parameters for listing deployment config updates.
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 3 [(google.api.field_behavior) = OPTIONAL];
}

// ListDeploymentConfigUpdatesResponse is the response for ListDeploymentConfigUpdates.
message ListDeploymentConfigUpdatesResponse {
  // List of deployment config updates.
  repeated DeploymentConfigUpdate deployment_config_updates = 1;
  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;
}

// RetryDeploymentConfigUpdateRequest is the request for RetryDeploymentConfigUpdate.
message RetryDeploymentConfigUpdateRequest {
  // UID of the deployment config update.
  string id = 1;
}

// DeploymentConfigUpdate represents a deployment config update resource.
message DeploymentConfigUpdate {
  // Metadata of the deployment config update request.
  portworx.common.v1.Meta meta = 1;
  // Config of the deployment for which config update is requested.
  Config config = 2;
  // Status of the deployment config update.
  Status status = 3;
}

// Config of the desired deployment configuration.
message Config {
  // Metadata of the deployment resource.
  portworx.common.v1.Meta deployment_meta = 1;
  // Deployment config represents desired Deployment Configuration.
  public.portworx.pds.deployment.v1.Config deployment_config = 2;
}

// Status of the deployment config update.
message Status {
  // Error Code is a short string that represents the error.
  string error_code = 1;
  // Error Message is a description of the error.
  string error_message = 2;
  // Number of times the deployment config update has been retried.
  int32 retry_count = 3;

  // Enum for Phase of the Deployment config update.
  enum Phase {
    // Phase is unspecified.
    PHASE_UNSPECIFIED = 0;
    // Deployment config update failed.
    FAILED = 1;
    // Deployment config update is queued.
    QUEUED = 2;
    // Deployment config update is in progress.
    IN_PROGRESS = 3;
    // Deployment config update is completed.
    COMPLETED = 4;
    // Deployment config update is requeued.
    REQUEUED  = 5;
  }

  // Phase of the deployment config update.
  Phase phase = 4;
}

