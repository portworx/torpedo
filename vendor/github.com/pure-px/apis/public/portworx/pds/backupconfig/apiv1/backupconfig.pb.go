// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: public/portworx/pds/backupconfig/apiv1/backupconfig.proto

package backupconfig

import (
	apiv1 "github.com/pure-px/apis/public/portworx/common/apiv1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BackupConfigSuspended to accept value for suspended flag.
type BackupConfigSuspended int32

const (
	// List all backup configs.
	BackupConfigSuspended_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED BackupConfigSuspended = 0
	// List only suspended backup configs.
	BackupConfigSuspended_TRUE BackupConfigSuspended = 1
	// List only disabled backup configs.
	BackupConfigSuspended_FALSE BackupConfigSuspended = 2
)

// Enum value maps for BackupConfigSuspended.
var (
	BackupConfigSuspended_name = map[int32]string{
		0: "BACKUP_CONFIG_SUSPENDED_UNSPECIFIED",
		1: "TRUE",
		2: "FALSE",
	}
	BackupConfigSuspended_value = map[string]int32{
		"BACKUP_CONFIG_SUSPENDED_UNSPECIFIED": 0,
		"TRUE":                                1,
		"FALSE":                               2,
	}
)

func (x BackupConfigSuspended) Enum() *BackupConfigSuspended {
	p := new(BackupConfigSuspended)
	*p = x
	return p
}

func (x BackupConfigSuspended) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupConfigSuspended) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[0].Descriptor()
}

func (BackupConfigSuspended) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[0]
}

func (x BackupConfigSuspended) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupConfigSuspended.Descriptor instead.
func (BackupConfigSuspended) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{0}
}

// Enum for Phases of the backup configuration.
type Phase int32

const (
	// Unspecified state.
	Phase_PHASE_UNSPECIFIED Phase = 0
	// Preparing state before creation is successful.
	Phase_PREPARING Phase = 1
	// Applied state when create/update is successful.
	Phase_APPLIED Phase = 2
	// Updating state.
	Phase_UPDATING Phase = 3
	// Failed state.
	Phase_FAILED Phase = 4
	// Suspended state.
	Phase_SUSPENDED Phase = 5
	// Deleting state.
	Phase_DELETING Phase = 6
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "PREPARING",
		2: "APPLIED",
		3: "UPDATING",
		4: "FAILED",
		5: "SUSPENDED",
		6: "DELETING",
	}
	Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"PREPARING":         1,
		"APPLIED":           2,
		"UPDATING":          3,
		"FAILED":            4,
		"SUSPENDED":         5,
		"DELETING":          6,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[1].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[1]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{1}
}

// Enum for Backup Type of the backup configuration.
type Config_BackupType int32

const (
	// Unspecified type.
	Config_BACKUP_TYPE_UNSPECIFIED Config_BackupType = 0
	// Adhoc Backup.
	Config_ADHOC Config_BackupType = 1
	// Scheduled Backup.
	Config_SCHEDULED Config_BackupType = 2
)

// Enum value maps for Config_BackupType.
var (
	Config_BackupType_name = map[int32]string{
		0: "BACKUP_TYPE_UNSPECIFIED",
		1: "ADHOC",
		2: "SCHEDULED",
	}
	Config_BackupType_value = map[string]int32{
		"BACKUP_TYPE_UNSPECIFIED": 0,
		"ADHOC":                   1,
		"SCHEDULED":               2,
	}
)

func (x Config_BackupType) Enum() *Config_BackupType {
	p := new(Config_BackupType)
	*p = x
	return p
}

func (x Config_BackupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_BackupType) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[2].Descriptor()
}

func (Config_BackupType) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[2]
}

func (x Config_BackupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_BackupType.Descriptor instead.
func (Config_BackupType) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{7, 0}
}

// Enum for Backup Level of the backup configuration.
type Config_BackupLevel int32

const (
	// Unspecified level.
	Config_BACKUP_LEVEL_UNSPECIFIED Config_BackupLevel = 0
	// Snapshot.
	Config_SNAPSHOT Config_BackupLevel = 1
	// Incremental.
	Config_INCREMENTAL Config_BackupLevel = 2
)

// Enum value maps for Config_BackupLevel.
var (
	Config_BackupLevel_name = map[int32]string{
		0: "BACKUP_LEVEL_UNSPECIFIED",
		1: "SNAPSHOT",
		2: "INCREMENTAL",
	}
	Config_BackupLevel_value = map[string]int32{
		"BACKUP_LEVEL_UNSPECIFIED": 0,
		"SNAPSHOT":                 1,
		"INCREMENTAL":              2,
	}
)

func (x Config_BackupLevel) Enum() *Config_BackupLevel {
	p := new(Config_BackupLevel)
	*p = x
	return p
}

func (x Config_BackupLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_BackupLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[3].Descriptor()
}

func (Config_BackupLevel) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[3]
}

func (x Config_BackupLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_BackupLevel.Descriptor instead.
func (Config_BackupLevel) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{7, 1}
}

// Enum for Reclaim Policy for the backup configuration.
type Config_ReclaimPolicyType int32

const (
	// Unspecified.
	Config_RECLAIM_POLICY_TYPE_UNSPECIFIED Config_ReclaimPolicyType = 0
	// Delete snapshot.
	Config_DELETE Config_ReclaimPolicyType = 1
	// Retain snapshot.
	Config_RETAIN Config_ReclaimPolicyType = 2
)

// Enum value maps for Config_ReclaimPolicyType.
var (
	Config_ReclaimPolicyType_name = map[int32]string{
		0: "RECLAIM_POLICY_TYPE_UNSPECIFIED",
		1: "DELETE",
		2: "RETAIN",
	}
	Config_ReclaimPolicyType_value = map[string]int32{
		"RECLAIM_POLICY_TYPE_UNSPECIFIED": 0,
		"DELETE":                          1,
		"RETAIN":                          2,
	}
)

func (x Config_ReclaimPolicyType) Enum() *Config_ReclaimPolicyType {
	p := new(Config_ReclaimPolicyType)
	*p = x
	return p
}

func (x Config_ReclaimPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_ReclaimPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[4].Descriptor()
}

func (Config_ReclaimPolicyType) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes[4]
}

func (x Config_ReclaimPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_ReclaimPolicyType.Descriptor instead.
func (Config_ReclaimPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{7, 2}
}

// Request to get the backup configuration of the specified backup.
type GetBackupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup configuration.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBackupConfigRequest) Reset() {
	*x = GetBackupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupConfigRequest) ProtoMessage() {}

func (x *GetBackupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupConfigRequest.ProtoReflect.Descriptor instead.
func (*GetBackupConfigRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{0}
}

func (x *GetBackupConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to list all the backup configurations.
type ListBackupConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies a filter to list the backup configurations.
	//
	// Types that are assignable to ListBy:
	//
	//	*ListBackupConfigsRequest_TenantId
	//	*ListBackupConfigsRequest_ProjectId
	//	*ListBackupConfigsRequest_TargetClusterId
	//	*ListBackupConfigsRequest_NamespaceId
	//	*ListBackupConfigsRequest_DataServiceDeploymentId
	ListBy isListBackupConfigsRequest_ListBy `protobuf_oneof:"list_by"`
	// Pagination metadata for listing backup configuration.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Sorting details using which requested list of backup configurations to be sorted.
	Sort *apiv1.Sort `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
	// Filter backup configs based on suspended flag.
	Suspended BackupConfigSuspended `protobuf:"varint,8,opt,name=suspended,proto3,enum=public.portworx.pds.backupconfig.v1.BackupConfigSuspended" json:"suspended,omitempty"`
}

func (x *ListBackupConfigsRequest) Reset() {
	*x = ListBackupConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupConfigsRequest) ProtoMessage() {}

func (x *ListBackupConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListBackupConfigsRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{1}
}

func (m *ListBackupConfigsRequest) GetListBy() isListBackupConfigsRequest_ListBy {
	if m != nil {
		return m.ListBy
	}
	return nil
}

func (x *ListBackupConfigsRequest) GetTenantId() string {
	if x, ok := x.GetListBy().(*ListBackupConfigsRequest_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (x *ListBackupConfigsRequest) GetProjectId() string {
	if x, ok := x.GetListBy().(*ListBackupConfigsRequest_ProjectId); ok {
		return x.ProjectId
	}
	return ""
}

func (x *ListBackupConfigsRequest) GetTargetClusterId() string {
	if x, ok := x.GetListBy().(*ListBackupConfigsRequest_TargetClusterId); ok {
		return x.TargetClusterId
	}
	return ""
}

func (x *ListBackupConfigsRequest) GetNamespaceId() string {
	if x, ok := x.GetListBy().(*ListBackupConfigsRequest_NamespaceId); ok {
		return x.NamespaceId
	}
	return ""
}

func (x *ListBackupConfigsRequest) GetDataServiceDeploymentId() string {
	if x, ok := x.GetListBy().(*ListBackupConfigsRequest_DataServiceDeploymentId); ok {
		return x.DataServiceDeploymentId
	}
	return ""
}

func (x *ListBackupConfigsRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBackupConfigsRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListBackupConfigsRequest) GetSuspended() BackupConfigSuspended {
	if x != nil {
		return x.Suspended
	}
	return BackupConfigSuspended_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED
}

type isListBackupConfigsRequest_ListBy interface {
	isListBackupConfigsRequest_ListBy()
}

type ListBackupConfigsRequest_TenantId struct {
	// Tenant ID for which the backup configurations will be listed.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof"`
}

type ListBackupConfigsRequest_ProjectId struct {
	// Project ID for which the backup configurations will be listed.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3,oneof"`
}

type ListBackupConfigsRequest_TargetClusterId struct {
	// Cluster ID for which the backup configurations will be listed.
	TargetClusterId string `protobuf:"bytes,3,opt,name=target_cluster_id,json=targetClusterId,proto3,oneof"`
}

type ListBackupConfigsRequest_NamespaceId struct {
	// Namespace ID for which the backup configurations will be listed.
	NamespaceId string `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId,proto3,oneof"`
}

type ListBackupConfigsRequest_DataServiceDeploymentId struct {
	// Data service Deployment ID for which the backup configurations will be listed.
	DataServiceDeploymentId string `protobuf:"bytes,5,opt,name=data_service_deployment_id,json=dataServiceDeploymentId,proto3,oneof"`
}

func (*ListBackupConfigsRequest_TenantId) isListBackupConfigsRequest_ListBy() {}

func (*ListBackupConfigsRequest_ProjectId) isListBackupConfigsRequest_ListBy() {}

func (*ListBackupConfigsRequest_TargetClusterId) isListBackupConfigsRequest_ListBy() {}

func (*ListBackupConfigsRequest_NamespaceId) isListBackupConfigsRequest_ListBy() {}

func (*ListBackupConfigsRequest_DataServiceDeploymentId) isListBackupConfigsRequest_ListBy() {}

// Response of list of backup configurations.
type ListBackupConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of backup configurations.
	BackupConfigs []*BackupConfig `protobuf:"bytes,1,rep,name=backup_configs,json=backupConfigs,proto3" json:"backup_configs,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListBackupConfigsResponse) Reset() {
	*x = ListBackupConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupConfigsResponse) ProtoMessage() {}

func (x *ListBackupConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListBackupConfigsResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{2}
}

func (x *ListBackupConfigsResponse) GetBackupConfigs() []*BackupConfig {
	if x != nil {
		return x.BackupConfigs
	}
	return nil
}

func (x *ListBackupConfigsResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Request to create a backup configuration.
type CreateBackupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0133::request-required-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field to be required to support creation of
	//	the resource in the project context. --)
	//
	// (-- api-linter: core::0133::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field to be required to support creation of
	//	the resource in the project context. --)
	//
	// The parent project id under which backup configuration will be created.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// (-- api-linter: core::0133::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field to be required
	//	to support creation of the resource in the deployment context.. --)
	//
	// (-- api-linter: core::0133::request-required-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field to be required
	//	to support creation of the resource in the deployment context.. --)
	//
	// Data service Deployment id associated with the backup configuration.
	DataServiceDeploymentId string `protobuf:"bytes,2,opt,name=data_service_deployment_id,json=dataServiceDeploymentId,proto3" json:"data_service_deployment_id,omitempty"`
	// Backup configuration for the backup.
	BackupConfig *BackupConfig `protobuf:"bytes,3,opt,name=backup_config,json=backupConfig,proto3" json:"backup_config,omitempty"`
}

func (x *CreateBackupConfigRequest) Reset() {
	*x = CreateBackupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupConfigRequest) ProtoMessage() {}

func (x *CreateBackupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateBackupConfigRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBackupConfigRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateBackupConfigRequest) GetDataServiceDeploymentId() string {
	if x != nil {
		return x.DataServiceDeploymentId
	}
	return ""
}

func (x *CreateBackupConfigRequest) GetBackupConfig() *BackupConfig {
	if x != nil {
		return x.BackupConfig
	}
	return nil
}

// Request to update a backup configuration.
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: We need to do this because we don't need the full backup config object for update. --)
type UpdateBackupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup configuration.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Suspend flag is used to suspend or resume a scheduled backup.
	Suspend BackupConfigSuspended `protobuf:"varint,2,opt,name=suspend,proto3,enum=public.portworx.pds.backupconfig.v1.BackupConfigSuspended" json:"suspend,omitempty"`
	// Labels to apply to the Backup Config object.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations for the Backup Config object.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateBackupConfigRequest) Reset() {
	*x = UpdateBackupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBackupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBackupConfigRequest) ProtoMessage() {}

func (x *UpdateBackupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBackupConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateBackupConfigRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBackupConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBackupConfigRequest) GetSuspend() BackupConfigSuspended {
	if x != nil {
		return x.Suspend
	}
	return BackupConfigSuspended_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED
}

func (x *UpdateBackupConfigRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateBackupConfigRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Request to delete a backup configuration.
type DeleteBackupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup configuration.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Force flag to delete backup configuration from control plane only.
	Force bool `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteBackupConfigRequest) Reset() {
	*x = DeleteBackupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupConfigRequest) ProtoMessage() {}

func (x *DeleteBackupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupConfigRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBackupConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBackupConfigRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Resource representing the backup configuration for a backup.
type BackupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the backup configuration.
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Desired config of the backup configuration.
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Current Status of the backup configuration.
	Status *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BackupConfig) Reset() {
	*x = BackupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupConfig) ProtoMessage() {}

func (x *BackupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupConfig.ProtoReflect.Descriptor instead.
func (*BackupConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{6}
}

func (x *BackupConfig) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BackupConfig) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BackupConfig) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Desired config of the backup configuration.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// References to the associated objects for backup configuration.
	References *References `protobuf:"bytes,1,opt,name=references,proto3" json:"references,omitempty"`
	// BackupPolicy associated with the backup config.
	BackupPolicy *BackupPolicy `protobuf:"bytes,2,opt,name=backup_policy,json=backupPolicy,proto3" json:"backup_policy,omitempty"`
	// Suspend flag is used to suspend a scheduled backup from creating new backups.
	Suspend bool `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Backup Type for the backup configuration.
	BackupType Config_BackupType `protobuf:"varint,4,opt,name=backup_type,json=backupType,proto3,enum=public.portworx.pds.backupconfig.v1.Config_BackupType" json:"backup_type,omitempty"`
	// Backup Level for the backup configuration.
	BackupLevel Config_BackupLevel `protobuf:"varint,5,opt,name=backup_level,json=backupLevel,proto3,enum=public.portworx.pds.backupconfig.v1.Config_BackupLevel" json:"backup_level,omitempty"`
	// Reclaim Policy decides if the volume snapshots should get deleted when a Backup CR gets deleted.
	ReclaimPolicy Config_ReclaimPolicyType `protobuf:"varint,6,opt,name=reclaim_policy,json=reclaimPolicy,proto3,enum=public.portworx.pds.backupconfig.v1.Config_ReclaimPolicyType" json:"reclaim_policy,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetReferences() *References {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Config) GetBackupPolicy() *BackupPolicy {
	if x != nil {
		return x.BackupPolicy
	}
	return nil
}

func (x *Config) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *Config) GetBackupType() Config_BackupType {
	if x != nil {
		return x.BackupType
	}
	return Config_BACKUP_TYPE_UNSPECIFIED
}

func (x *Config) GetBackupLevel() Config_BackupLevel {
	if x != nil {
		return x.BackupLevel
	}
	return Config_BACKUP_LEVEL_UNSPECIFIED
}

func (x *Config) GetReclaimPolicy() Config_ReclaimPolicyType {
	if x != nil {
		return x.ReclaimPolicy
	}
	return Config_RECLAIM_POLICY_TYPE_UNSPECIFIED
}

// References to the associated resources for backup configuration.
type References struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID of the data service deployment to which the backup configuration belong.
	DataServiceDeploymentId string `protobuf:"bytes,1,opt,name=data_service_deployment_id,json=dataServiceDeploymentId,proto3" json:"data_service_deployment_id,omitempty"`
	// UID of the backup target to which the backup configuration belong.
	BackupLocationId string `protobuf:"bytes,2,opt,name=backup_location_id,json=backupLocationId,proto3" json:"backup_location_id,omitempty"`
	// UID of the data service to which the backup configuration belong.
	DataServiceId string `protobuf:"bytes,3,opt,name=data_service_id,json=dataServiceId,proto3" json:"data_service_id,omitempty"`
}

func (x *References) Reset() {
	*x = References{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *References) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*References) ProtoMessage() {}

func (x *References) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use References.ProtoReflect.Descriptor instead.
func (*References) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{8}
}

func (x *References) GetDataServiceDeploymentId() string {
	if x != nil {
		return x.DataServiceDeploymentId
	}
	return ""
}

func (x *References) GetBackupLocationId() string {
	if x != nil {
		return x.BackupLocationId
	}
	return ""
}

func (x *References) GetDataServiceId() string {
	if x != nil {
		return x.DataServiceId
	}
	return ""
}

// BackupPolicy associated with the backup config.
type BackupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID of the backup policy associated with the backup configuration.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resource version of the backup policy.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
}

func (x *BackupPolicy) Reset() {
	*x = BackupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPolicy) ProtoMessage() {}

func (x *BackupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPolicy.ProtoReflect.Descriptor instead.
func (*BackupPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{9}
}

func (x *BackupPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BackupPolicy) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

// Status for backup configuration.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase specifies the phase of backup CR in target cluster.
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=public.portworx.pds.backupconfig.v1.Phase" json:"phase,omitempty"`
	// Custom Resource Name is the kubernetes resource name for the backup that is built from ID.
	CustomResourceName string `protobuf:"bytes,2,opt,name=custom_resource_name,json=customResourceName,proto3" json:"custom_resource_name,omitempty"`
	// Flag to check if the backup policy is synchronized or not.
	IsBackupPolicySynchronized bool `protobuf:"varint,3,opt,name=is_backup_policy_synchronized,json=isBackupPolicySynchronized,proto3" json:"is_backup_policy_synchronized,omitempty"`
	// DataService Deployment Meta Data.
	DataServiceDeploymentMetaData *DataServiceDeploymentMetaData `protobuf:"bytes,4,opt,name=data_service_deployment_meta_data,json=dataServiceDeploymentMetaData,proto3" json:"data_service_deployment_meta_data,omitempty"`
	// Error code.
	ErrorCode string `protobuf:"bytes,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Error message.
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{10}
}

func (x *Status) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *Status) GetCustomResourceName() string {
	if x != nil {
		return x.CustomResourceName
	}
	return ""
}

func (x *Status) GetIsBackupPolicySynchronized() bool {
	if x != nil {
		return x.IsBackupPolicySynchronized
	}
	return false
}

func (x *Status) GetDataServiceDeploymentMetaData() *DataServiceDeploymentMetaData {
	if x != nil {
		return x.DataServiceDeploymentMetaData
	}
	return nil
}

func (x *Status) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// DataServiceDeployment Meta Data contains the details of the DataService deployment associated with the backup configuration.
type DataServiceDeploymentMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the DataService deployment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Custom Resource Name is the kubernetes resource name for the deployment meta data.
	CustomResourceName string `protobuf:"bytes,2,opt,name=custom_resource_name,json=customResourceName,proto3" json:"custom_resource_name,omitempty"`
	// Target cluster Name associated with the backup configuration.
	TargetClusterName string `protobuf:"bytes,3,opt,name=target_cluster_name,json=targetClusterName,proto3" json:"target_cluster_name,omitempty"`
	// Namespace name to which the backup configuration is associated.
	NamespaceName string `protobuf:"bytes,4,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	// Flag to check whether Transport Layer Security support is enabled or not.
	TlsEnabled bool `protobuf:"varint,5,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
}

func (x *DataServiceDeploymentMetaData) Reset() {
	*x = DataServiceDeploymentMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataServiceDeploymentMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataServiceDeploymentMetaData) ProtoMessage() {}

func (x *DataServiceDeploymentMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataServiceDeploymentMetaData.ProtoReflect.Descriptor instead.
func (*DataServiceDeploymentMetaData) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP(), []int{11}
}

func (x *DataServiceDeploymentMetaData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataServiceDeploymentMetaData) GetCustomResourceName() string {
	if x != nil {
		return x.CustomResourceName
	}
	return ""
}

func (x *DataServiceDeploymentMetaData) GetTargetClusterName() string {
	if x != nil {
		return x.TargetClusterName
	}
	return ""
}

func (x *DataServiceDeploymentMetaData) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *DataServiceDeploymentMetaData) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

var File_public_portworx_pds_backupconfig_apiv1_backupconfig_proto protoreflect.FileDescriptor

var file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x22, 0xcd, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x5b, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x03,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x62, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x71, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xce, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0c,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x64, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x43,
	0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x48,
	0x4f, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x22,
	0x50, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4e, 0x10,
	0x02, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x03,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x8c, 0x01, 0x0a, 0x21, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64,
	0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x1d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2a, 0x55, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x71,
	0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x32, 0xf7, 0x06, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x70, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x70, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x70,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a,
	0x1a, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x8b, 0x01, 0x0a, 0x27,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescOnce sync.Once
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescData = file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDesc
)

func file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescGZIP() []byte {
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescOnce.Do(func() {
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescData)
	})
	return file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDescData
}

var file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_goTypes = []interface{}{
	(BackupConfigSuspended)(0),                // 0: public.portworx.pds.backupconfig.v1.BackupConfigSuspended
	(Phase)(0),                                // 1: public.portworx.pds.backupconfig.v1.Phase
	(Config_BackupType)(0),                    // 2: public.portworx.pds.backupconfig.v1.Config.BackupType
	(Config_BackupLevel)(0),                   // 3: public.portworx.pds.backupconfig.v1.Config.BackupLevel
	(Config_ReclaimPolicyType)(0),             // 4: public.portworx.pds.backupconfig.v1.Config.ReclaimPolicyType
	(*GetBackupConfigRequest)(nil),            // 5: public.portworx.pds.backupconfig.v1.GetBackupConfigRequest
	(*ListBackupConfigsRequest)(nil),          // 6: public.portworx.pds.backupconfig.v1.ListBackupConfigsRequest
	(*ListBackupConfigsResponse)(nil),         // 7: public.portworx.pds.backupconfig.v1.ListBackupConfigsResponse
	(*CreateBackupConfigRequest)(nil),         // 8: public.portworx.pds.backupconfig.v1.CreateBackupConfigRequest
	(*UpdateBackupConfigRequest)(nil),         // 9: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest
	(*DeleteBackupConfigRequest)(nil),         // 10: public.portworx.pds.backupconfig.v1.DeleteBackupConfigRequest
	(*BackupConfig)(nil),                      // 11: public.portworx.pds.backupconfig.v1.BackupConfig
	(*Config)(nil),                            // 12: public.portworx.pds.backupconfig.v1.Config
	(*References)(nil),                        // 13: public.portworx.pds.backupconfig.v1.References
	(*BackupPolicy)(nil),                      // 14: public.portworx.pds.backupconfig.v1.BackupPolicy
	(*Status)(nil),                            // 15: public.portworx.pds.backupconfig.v1.Status
	(*DataServiceDeploymentMetaData)(nil),     // 16: public.portworx.pds.backupconfig.v1.DataServiceDeploymentMetaData
	nil,                                       // 17: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.LabelsEntry
	nil,                                       // 18: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.AnnotationsEntry
	(*apiv1.PageBasedPaginationRequest)(nil),  // 19: public.portworx.common.v1.PageBasedPaginationRequest
	(*apiv1.Sort)(nil),                        // 20: public.portworx.common.v1.Sort
	(*apiv1.PageBasedPaginationResponse)(nil), // 21: public.portworx.common.v1.PageBasedPaginationResponse
	(*apiv1.Meta)(nil),                        // 22: public.portworx.common.v1.Meta
	(*emptypb.Empty)(nil),                     // 23: google.protobuf.Empty
}
var file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_depIdxs = []int32{
	19, // 0: public.portworx.pds.backupconfig.v1.ListBackupConfigsRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	20, // 1: public.portworx.pds.backupconfig.v1.ListBackupConfigsRequest.sort:type_name -> public.portworx.common.v1.Sort
	0,  // 2: public.portworx.pds.backupconfig.v1.ListBackupConfigsRequest.suspended:type_name -> public.portworx.pds.backupconfig.v1.BackupConfigSuspended
	11, // 3: public.portworx.pds.backupconfig.v1.ListBackupConfigsResponse.backup_configs:type_name -> public.portworx.pds.backupconfig.v1.BackupConfig
	21, // 4: public.portworx.pds.backupconfig.v1.ListBackupConfigsResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	11, // 5: public.portworx.pds.backupconfig.v1.CreateBackupConfigRequest.backup_config:type_name -> public.portworx.pds.backupconfig.v1.BackupConfig
	0,  // 6: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.suspend:type_name -> public.portworx.pds.backupconfig.v1.BackupConfigSuspended
	17, // 7: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.labels:type_name -> public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.LabelsEntry
	18, // 8: public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.annotations:type_name -> public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest.AnnotationsEntry
	22, // 9: public.portworx.pds.backupconfig.v1.BackupConfig.meta:type_name -> public.portworx.common.v1.Meta
	12, // 10: public.portworx.pds.backupconfig.v1.BackupConfig.config:type_name -> public.portworx.pds.backupconfig.v1.Config
	15, // 11: public.portworx.pds.backupconfig.v1.BackupConfig.status:type_name -> public.portworx.pds.backupconfig.v1.Status
	13, // 12: public.portworx.pds.backupconfig.v1.Config.references:type_name -> public.portworx.pds.backupconfig.v1.References
	14, // 13: public.portworx.pds.backupconfig.v1.Config.backup_policy:type_name -> public.portworx.pds.backupconfig.v1.BackupPolicy
	2,  // 14: public.portworx.pds.backupconfig.v1.Config.backup_type:type_name -> public.portworx.pds.backupconfig.v1.Config.BackupType
	3,  // 15: public.portworx.pds.backupconfig.v1.Config.backup_level:type_name -> public.portworx.pds.backupconfig.v1.Config.BackupLevel
	4,  // 16: public.portworx.pds.backupconfig.v1.Config.reclaim_policy:type_name -> public.portworx.pds.backupconfig.v1.Config.ReclaimPolicyType
	1,  // 17: public.portworx.pds.backupconfig.v1.Status.phase:type_name -> public.portworx.pds.backupconfig.v1.Phase
	16, // 18: public.portworx.pds.backupconfig.v1.Status.data_service_deployment_meta_data:type_name -> public.portworx.pds.backupconfig.v1.DataServiceDeploymentMetaData
	5,  // 19: public.portworx.pds.backupconfig.v1.BackupConfigService.GetBackupConfig:input_type -> public.portworx.pds.backupconfig.v1.GetBackupConfigRequest
	6,  // 20: public.portworx.pds.backupconfig.v1.BackupConfigService.ListBackupConfigs:input_type -> public.portworx.pds.backupconfig.v1.ListBackupConfigsRequest
	8,  // 21: public.portworx.pds.backupconfig.v1.BackupConfigService.CreateBackupConfig:input_type -> public.portworx.pds.backupconfig.v1.CreateBackupConfigRequest
	9,  // 22: public.portworx.pds.backupconfig.v1.BackupConfigService.UpdateBackupConfig:input_type -> public.portworx.pds.backupconfig.v1.UpdateBackupConfigRequest
	10, // 23: public.portworx.pds.backupconfig.v1.BackupConfigService.DeleteBackupConfig:input_type -> public.portworx.pds.backupconfig.v1.DeleteBackupConfigRequest
	11, // 24: public.portworx.pds.backupconfig.v1.BackupConfigService.GetBackupConfig:output_type -> public.portworx.pds.backupconfig.v1.BackupConfig
	7,  // 25: public.portworx.pds.backupconfig.v1.BackupConfigService.ListBackupConfigs:output_type -> public.portworx.pds.backupconfig.v1.ListBackupConfigsResponse
	11, // 26: public.portworx.pds.backupconfig.v1.BackupConfigService.CreateBackupConfig:output_type -> public.portworx.pds.backupconfig.v1.BackupConfig
	11, // 27: public.portworx.pds.backupconfig.v1.BackupConfigService.UpdateBackupConfig:output_type -> public.portworx.pds.backupconfig.v1.BackupConfig
	23, // 28: public.portworx.pds.backupconfig.v1.BackupConfigService.DeleteBackupConfig:output_type -> google.protobuf.Empty
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_init() }
func file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_init() {
	if File_public_portworx_pds_backupconfig_apiv1_backupconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBackupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*References); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataServiceDeploymentMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListBackupConfigsRequest_TenantId)(nil),
		(*ListBackupConfigsRequest_ProjectId)(nil),
		(*ListBackupConfigsRequest_TargetClusterId)(nil),
		(*ListBackupConfigsRequest_NamespaceId)(nil),
		(*ListBackupConfigsRequest_DataServiceDeploymentId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_goTypes,
		DependencyIndexes: file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_depIdxs,
		EnumInfos:         file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_enumTypes,
		MessageInfos:      file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_msgTypes,
	}.Build()
	File_public_portworx_pds_backupconfig_apiv1_backupconfig_proto = out.File
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_rawDesc = nil
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_goTypes = nil
	file_public_portworx_pds_backupconfig_apiv1_backupconfig_proto_depIdxs = nil
}
