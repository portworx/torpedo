// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/backupconfig/apiv1/backupconfig.proto

package backupconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackupConfigService_GetBackupConfig_FullMethodName    = "/public.portworx.pds.backupconfig.v1.BackupConfigService/GetBackupConfig"
	BackupConfigService_ListBackupConfigs_FullMethodName  = "/public.portworx.pds.backupconfig.v1.BackupConfigService/ListBackupConfigs"
	BackupConfigService_CreateBackupConfig_FullMethodName = "/public.portworx.pds.backupconfig.v1.BackupConfigService/CreateBackupConfig"
	BackupConfigService_UpdateBackupConfig_FullMethodName = "/public.portworx.pds.backupconfig.v1.BackupConfigService/UpdateBackupConfig"
	BackupConfigService_DeleteBackupConfig_FullMethodName = "/public.portworx.pds.backupconfig.v1.BackupConfigService/DeleteBackupConfig"
)

// BackupConfigServiceClient is the client API for BackupConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupConfigServiceClient interface {
	// GetBackupConfig API returns the the backup configuration resource.
	GetBackupConfig(ctx context.Context, in *GetBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error)
	// ListBackupConfigs API lists all the backup configuration for a data service deployment.
	ListBackupConfigs(ctx context.Context, in *ListBackupConfigsRequest, opts ...grpc.CallOption) (*ListBackupConfigsResponse, error)
	// CreateBackupConfig API creates the backup configuration of the backup.
	CreateBackupConfig(ctx context.Context, in *CreateBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error)
	// UpdateBackupConfig API updates the backup configuration of the backup.
	UpdateBackupConfig(ctx context.Context, in *UpdateBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error)
	// DeleteBackupConfig API deletes the backup configuration.
	DeleteBackupConfig(ctx context.Context, in *DeleteBackupConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backupConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupConfigServiceClient(cc grpc.ClientConnInterface) BackupConfigServiceClient {
	return &backupConfigServiceClient{cc}
}

func (c *backupConfigServiceClient) GetBackupConfig(ctx context.Context, in *GetBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error) {
	out := new(BackupConfig)
	err := c.cc.Invoke(ctx, BackupConfigService_GetBackupConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupConfigServiceClient) ListBackupConfigs(ctx context.Context, in *ListBackupConfigsRequest, opts ...grpc.CallOption) (*ListBackupConfigsResponse, error) {
	out := new(ListBackupConfigsResponse)
	err := c.cc.Invoke(ctx, BackupConfigService_ListBackupConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupConfigServiceClient) CreateBackupConfig(ctx context.Context, in *CreateBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error) {
	out := new(BackupConfig)
	err := c.cc.Invoke(ctx, BackupConfigService_CreateBackupConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupConfigServiceClient) UpdateBackupConfig(ctx context.Context, in *UpdateBackupConfigRequest, opts ...grpc.CallOption) (*BackupConfig, error) {
	out := new(BackupConfig)
	err := c.cc.Invoke(ctx, BackupConfigService_UpdateBackupConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupConfigServiceClient) DeleteBackupConfig(ctx context.Context, in *DeleteBackupConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BackupConfigService_DeleteBackupConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupConfigServiceServer is the server API for BackupConfigService service.
// All implementations must embed UnimplementedBackupConfigServiceServer
// for forward compatibility
type BackupConfigServiceServer interface {
	// GetBackupConfig API returns the the backup configuration resource.
	GetBackupConfig(context.Context, *GetBackupConfigRequest) (*BackupConfig, error)
	// ListBackupConfigs API lists all the backup configuration for a data service deployment.
	ListBackupConfigs(context.Context, *ListBackupConfigsRequest) (*ListBackupConfigsResponse, error)
	// CreateBackupConfig API creates the backup configuration of the backup.
	CreateBackupConfig(context.Context, *CreateBackupConfigRequest) (*BackupConfig, error)
	// UpdateBackupConfig API updates the backup configuration of the backup.
	UpdateBackupConfig(context.Context, *UpdateBackupConfigRequest) (*BackupConfig, error)
	// DeleteBackupConfig API deletes the backup configuration.
	DeleteBackupConfig(context.Context, *DeleteBackupConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBackupConfigServiceServer()
}

// UnimplementedBackupConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackupConfigServiceServer struct {
}

func (UnimplementedBackupConfigServiceServer) GetBackupConfig(context.Context, *GetBackupConfigRequest) (*BackupConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupConfig not implemented")
}
func (UnimplementedBackupConfigServiceServer) ListBackupConfigs(context.Context, *ListBackupConfigsRequest) (*ListBackupConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupConfigs not implemented")
}
func (UnimplementedBackupConfigServiceServer) CreateBackupConfig(context.Context, *CreateBackupConfigRequest) (*BackupConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupConfig not implemented")
}
func (UnimplementedBackupConfigServiceServer) UpdateBackupConfig(context.Context, *UpdateBackupConfigRequest) (*BackupConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupConfig not implemented")
}
func (UnimplementedBackupConfigServiceServer) DeleteBackupConfig(context.Context, *DeleteBackupConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupConfig not implemented")
}
func (UnimplementedBackupConfigServiceServer) mustEmbedUnimplementedBackupConfigServiceServer() {}

// UnsafeBackupConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupConfigServiceServer will
// result in compilation errors.
type UnsafeBackupConfigServiceServer interface {
	mustEmbedUnimplementedBackupConfigServiceServer()
}

func RegisterBackupConfigServiceServer(s grpc.ServiceRegistrar, srv BackupConfigServiceServer) {
	s.RegisterService(&BackupConfigService_ServiceDesc, srv)
}

func _BackupConfigService_GetBackupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupConfigServiceServer).GetBackupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupConfigService_GetBackupConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupConfigServiceServer).GetBackupConfig(ctx, req.(*GetBackupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupConfigService_ListBackupConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupConfigServiceServer).ListBackupConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupConfigService_ListBackupConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupConfigServiceServer).ListBackupConfigs(ctx, req.(*ListBackupConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupConfigService_CreateBackupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupConfigServiceServer).CreateBackupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupConfigService_CreateBackupConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupConfigServiceServer).CreateBackupConfig(ctx, req.(*CreateBackupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupConfigService_UpdateBackupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupConfigServiceServer).UpdateBackupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupConfigService_UpdateBackupConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupConfigServiceServer).UpdateBackupConfig(ctx, req.(*UpdateBackupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupConfigService_DeleteBackupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupConfigServiceServer).DeleteBackupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupConfigService_DeleteBackupConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupConfigServiceServer).DeleteBackupConfig(ctx, req.(*DeleteBackupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackupConfigService_ServiceDesc is the grpc.ServiceDesc for BackupConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.backupconfig.v1.BackupConfigService",
	HandlerType: (*BackupConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBackupConfig",
			Handler:    _BackupConfigService_GetBackupConfig_Handler,
		},
		{
			MethodName: "ListBackupConfigs",
			Handler:    _BackupConfigService_ListBackupConfigs_Handler,
		},
		{
			MethodName: "CreateBackupConfig",
			Handler:    _BackupConfigService_CreateBackupConfig_Handler,
		},
		{
			MethodName: "UpdateBackupConfig",
			Handler:    _BackupConfigService_UpdateBackupConfig_Handler,
		},
		{
			MethodName: "DeleteBackupConfig",
			Handler:    _BackupConfigService_DeleteBackupConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/backupconfig/apiv1/backupconfig.proto",
}
