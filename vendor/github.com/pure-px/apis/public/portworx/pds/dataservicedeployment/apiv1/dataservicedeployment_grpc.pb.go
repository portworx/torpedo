// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

package dataservicedeployment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataServiceDeploymentService_CreateDataServiceDeployment_FullMethodName         = "/public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService/CreateDataServiceDeployment"
	DataServiceDeploymentService_GetDataServiceDeployment_FullMethodName            = "/public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService/GetDataServiceDeployment"
	DataServiceDeploymentService_DeleteDataServiceDeployment_FullMethodName         = "/public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService/DeleteDataServiceDeployment"
	DataServiceDeploymentService_ListDataServiceDeployments_FullMethodName          = "/public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService/ListDataServiceDeployments"
	DataServiceDeploymentService_GetDataServiceDeploymentCredentials_FullMethodName = "/public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService/GetDataServiceDeploymentCredentials"
)

// DataServiceDeploymentServiceClient is the client API for DataServiceDeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceDeploymentServiceClient interface {
	// CreateDataServiceDeployment API creates the Deployment resource.
	CreateDataServiceDeployment(ctx context.Context, in *CreateDataServiceDeploymentRequest, opts ...grpc.CallOption) (*DataServiceDeployment, error)
	// GetDataServiceDeployment API returns the DataService Deployment resource.
	GetDataServiceDeployment(ctx context.Context, in *GetDataServiceDeploymentRequest, opts ...grpc.CallOption) (*DataServiceDeployment, error)
	// DeleteDataServiceDeployment API deletes the DataService Deployment resource.
	DeleteDataServiceDeployment(ctx context.Context, in *DeleteDataServiceDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because we can't have advance filters as query params. --)
	//
	// ListDataServiceDeployments API lists the DataService Deployment resources.
	ListDataServiceDeployments(ctx context.Context, in *ListDataServiceDeploymentsRequest, opts ...grpc.CallOption) (*ListDataServiceDeploymentsResponse, error)
	// GetDataServiceDeploymentCredentials API returns the Credentials to be used to access the DataService Deployment.
	GetDataServiceDeploymentCredentials(ctx context.Context, in *GetDataServiceDeploymentCredentialsRequest, opts ...grpc.CallOption) (*DataServiceDeploymentCredentials, error)
}

type dataServiceDeploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceDeploymentServiceClient(cc grpc.ClientConnInterface) DataServiceDeploymentServiceClient {
	return &dataServiceDeploymentServiceClient{cc}
}

func (c *dataServiceDeploymentServiceClient) CreateDataServiceDeployment(ctx context.Context, in *CreateDataServiceDeploymentRequest, opts ...grpc.CallOption) (*DataServiceDeployment, error) {
	out := new(DataServiceDeployment)
	err := c.cc.Invoke(ctx, DataServiceDeploymentService_CreateDataServiceDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentServiceClient) GetDataServiceDeployment(ctx context.Context, in *GetDataServiceDeploymentRequest, opts ...grpc.CallOption) (*DataServiceDeployment, error) {
	out := new(DataServiceDeployment)
	err := c.cc.Invoke(ctx, DataServiceDeploymentService_GetDataServiceDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentServiceClient) DeleteDataServiceDeployment(ctx context.Context, in *DeleteDataServiceDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataServiceDeploymentService_DeleteDataServiceDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentServiceClient) ListDataServiceDeployments(ctx context.Context, in *ListDataServiceDeploymentsRequest, opts ...grpc.CallOption) (*ListDataServiceDeploymentsResponse, error) {
	out := new(ListDataServiceDeploymentsResponse)
	err := c.cc.Invoke(ctx, DataServiceDeploymentService_ListDataServiceDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceDeploymentServiceClient) GetDataServiceDeploymentCredentials(ctx context.Context, in *GetDataServiceDeploymentCredentialsRequest, opts ...grpc.CallOption) (*DataServiceDeploymentCredentials, error) {
	out := new(DataServiceDeploymentCredentials)
	err := c.cc.Invoke(ctx, DataServiceDeploymentService_GetDataServiceDeploymentCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceDeploymentServiceServer is the server API for DataServiceDeploymentService service.
// All implementations must embed UnimplementedDataServiceDeploymentServiceServer
// for forward compatibility
type DataServiceDeploymentServiceServer interface {
	// CreateDataServiceDeployment API creates the Deployment resource.
	CreateDataServiceDeployment(context.Context, *CreateDataServiceDeploymentRequest) (*DataServiceDeployment, error)
	// GetDataServiceDeployment API returns the DataService Deployment resource.
	GetDataServiceDeployment(context.Context, *GetDataServiceDeploymentRequest) (*DataServiceDeployment, error)
	// DeleteDataServiceDeployment API deletes the DataService Deployment resource.
	DeleteDataServiceDeployment(context.Context, *DeleteDataServiceDeploymentRequest) (*emptypb.Empty, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because we can't have advance filters as query params. --)
	//
	// ListDataServiceDeployments API lists the DataService Deployment resources.
	ListDataServiceDeployments(context.Context, *ListDataServiceDeploymentsRequest) (*ListDataServiceDeploymentsResponse, error)
	// GetDataServiceDeploymentCredentials API returns the Credentials to be used to access the DataService Deployment.
	GetDataServiceDeploymentCredentials(context.Context, *GetDataServiceDeploymentCredentialsRequest) (*DataServiceDeploymentCredentials, error)
	mustEmbedUnimplementedDataServiceDeploymentServiceServer()
}

// UnimplementedDataServiceDeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceDeploymentServiceServer struct {
}

func (UnimplementedDataServiceDeploymentServiceServer) CreateDataServiceDeployment(context.Context, *CreateDataServiceDeploymentRequest) (*DataServiceDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataServiceDeployment not implemented")
}
func (UnimplementedDataServiceDeploymentServiceServer) GetDataServiceDeployment(context.Context, *GetDataServiceDeploymentRequest) (*DataServiceDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServiceDeployment not implemented")
}
func (UnimplementedDataServiceDeploymentServiceServer) DeleteDataServiceDeployment(context.Context, *DeleteDataServiceDeploymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataServiceDeployment not implemented")
}
func (UnimplementedDataServiceDeploymentServiceServer) ListDataServiceDeployments(context.Context, *ListDataServiceDeploymentsRequest) (*ListDataServiceDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServiceDeployments not implemented")
}
func (UnimplementedDataServiceDeploymentServiceServer) GetDataServiceDeploymentCredentials(context.Context, *GetDataServiceDeploymentCredentialsRequest) (*DataServiceDeploymentCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServiceDeploymentCredentials not implemented")
}
func (UnimplementedDataServiceDeploymentServiceServer) mustEmbedUnimplementedDataServiceDeploymentServiceServer() {
}

// UnsafeDataServiceDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceDeploymentServiceServer will
// result in compilation errors.
type UnsafeDataServiceDeploymentServiceServer interface {
	mustEmbedUnimplementedDataServiceDeploymentServiceServer()
}

func RegisterDataServiceDeploymentServiceServer(s grpc.ServiceRegistrar, srv DataServiceDeploymentServiceServer) {
	s.RegisterService(&DataServiceDeploymentService_ServiceDesc, srv)
}

func _DataServiceDeploymentService_CreateDataServiceDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataServiceDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentServiceServer).CreateDataServiceDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentService_CreateDataServiceDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentServiceServer).CreateDataServiceDeployment(ctx, req.(*CreateDataServiceDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentService_GetDataServiceDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentServiceServer).GetDataServiceDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentService_GetDataServiceDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentServiceServer).GetDataServiceDeployment(ctx, req.(*GetDataServiceDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentService_DeleteDataServiceDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataServiceDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentServiceServer).DeleteDataServiceDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentService_DeleteDataServiceDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentServiceServer).DeleteDataServiceDeployment(ctx, req.(*DeleteDataServiceDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentService_ListDataServiceDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataServiceDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentServiceServer).ListDataServiceDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentService_ListDataServiceDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentServiceServer).ListDataServiceDeployments(ctx, req.(*ListDataServiceDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceDeploymentService_GetDataServiceDeploymentCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceDeploymentCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceDeploymentServiceServer).GetDataServiceDeploymentCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceDeploymentService_GetDataServiceDeploymentCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceDeploymentServiceServer).GetDataServiceDeploymentCredentials(ctx, req.(*GetDataServiceDeploymentCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServiceDeploymentService_ServiceDesc is the grpc.ServiceDesc for DataServiceDeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServiceDeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.dataservicedeployment.v1.DataServiceDeploymentService",
	HandlerType: (*DataServiceDeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataServiceDeployment",
			Handler:    _DataServiceDeploymentService_CreateDataServiceDeployment_Handler,
		},
		{
			MethodName: "GetDataServiceDeployment",
			Handler:    _DataServiceDeploymentService_GetDataServiceDeployment_Handler,
		},
		{
			MethodName: "DeleteDataServiceDeployment",
			Handler:    _DataServiceDeploymentService_DeleteDataServiceDeployment_Handler,
		},
		{
			MethodName: "ListDataServiceDeployments",
			Handler:    _DataServiceDeploymentService_ListDataServiceDeployments_Handler,
		},
		{
			MethodName: "GetDataServiceDeploymentCredentials",
			Handler:    _DataServiceDeploymentService_GetDataServiceDeploymentCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto",
}
