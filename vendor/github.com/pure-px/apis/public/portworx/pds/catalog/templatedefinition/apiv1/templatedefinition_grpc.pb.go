// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/catalog/templatedefinition/apiv1/templatedefinition.proto

package templatedefinition

import (
	context "context"
	apiv1 "github.com/pure-px/apis/public/portworx/common/apiv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateDefinitionService_GetRevision_FullMethodName         = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/GetRevision"
	TemplateDefinitionService_ListRevisions_FullMethodName       = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/ListRevisions"
	TemplateDefinitionService_ListTemplateKinds_FullMethodName   = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/ListTemplateKinds"
	TemplateDefinitionService_ListTemplateTypes_FullMethodName   = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/ListTemplateTypes"
	TemplateDefinitionService_GetTemplateType_FullMethodName     = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/GetTemplateType"
	TemplateDefinitionService_ListTemplateSamples_FullMethodName = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/ListTemplateSamples"
	TemplateDefinitionService_GetTemplateSample_FullMethodName   = "/public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService/GetTemplateSample"
)

// TemplateDefinitionServiceClient is the client API for TemplateDefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateDefinitionServiceClient interface {
	// GetRevision gets the revision details, containing the actual schema.
	GetRevision(ctx context.Context, in *apiv1.GetRevisionRequest, opts ...grpc.CallOption) (*apiv1.Revision, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// ListRevisions list the revisions.
	ListRevisions(ctx context.Context, in *apiv1.ListRevisionsRequest, opts ...grpc.CallOption) (*apiv1.ListRevisionsResponse, error)
	// ListTemplateKindRequest: Used to list unique template kind(names).
	ListTemplateKinds(ctx context.Context, in *ListTemplateKindsRequest, opts ...grpc.CallOption) (*ListTemplateKindsResponse, error)
	// ListTemplateTypes API returns the list of all supported template types.
	ListTemplateTypes(ctx context.Context, in *ListTemplateTypesRequest, opts ...grpc.CallOption) (*ListTemplateTypesResponse, error)
	// GetTemplateType API returns the template type by id.
	GetTemplateType(ctx context.Context, in *GetTemplateTypeRequest, opts ...grpc.CallOption) (*TemplateType, error)
	// ListTemplateSamples: Used to list template sample schema.
	ListTemplateSamples(ctx context.Context, in *ListTemplateSamplesRequest, opts ...grpc.CallOption) (*ListTemplateSamplesResponse, error)
	// GetTemplateSample API returns the template sample for a given template id.
	GetTemplateSample(ctx context.Context, in *GetTemplateSampleRequest, opts ...grpc.CallOption) (*TemplateSample, error)
}

type templateDefinitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateDefinitionServiceClient(cc grpc.ClientConnInterface) TemplateDefinitionServiceClient {
	return &templateDefinitionServiceClient{cc}
}

func (c *templateDefinitionServiceClient) GetRevision(ctx context.Context, in *apiv1.GetRevisionRequest, opts ...grpc.CallOption) (*apiv1.Revision, error) {
	out := new(apiv1.Revision)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_GetRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) ListRevisions(ctx context.Context, in *apiv1.ListRevisionsRequest, opts ...grpc.CallOption) (*apiv1.ListRevisionsResponse, error) {
	out := new(apiv1.ListRevisionsResponse)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_ListRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) ListTemplateKinds(ctx context.Context, in *ListTemplateKindsRequest, opts ...grpc.CallOption) (*ListTemplateKindsResponse, error) {
	out := new(ListTemplateKindsResponse)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_ListTemplateKinds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) ListTemplateTypes(ctx context.Context, in *ListTemplateTypesRequest, opts ...grpc.CallOption) (*ListTemplateTypesResponse, error) {
	out := new(ListTemplateTypesResponse)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_ListTemplateTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) GetTemplateType(ctx context.Context, in *GetTemplateTypeRequest, opts ...grpc.CallOption) (*TemplateType, error) {
	out := new(TemplateType)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_GetTemplateType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) ListTemplateSamples(ctx context.Context, in *ListTemplateSamplesRequest, opts ...grpc.CallOption) (*ListTemplateSamplesResponse, error) {
	out := new(ListTemplateSamplesResponse)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_ListTemplateSamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateDefinitionServiceClient) GetTemplateSample(ctx context.Context, in *GetTemplateSampleRequest, opts ...grpc.CallOption) (*TemplateSample, error) {
	out := new(TemplateSample)
	err := c.cc.Invoke(ctx, TemplateDefinitionService_GetTemplateSample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateDefinitionServiceServer is the server API for TemplateDefinitionService service.
// All implementations must embed UnimplementedTemplateDefinitionServiceServer
// for forward compatibility
type TemplateDefinitionServiceServer interface {
	// GetRevision gets the revision details, containing the actual schema.
	GetRevision(context.Context, *apiv1.GetRevisionRequest) (*apiv1.Revision, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// ListRevisions list the revisions.
	ListRevisions(context.Context, *apiv1.ListRevisionsRequest) (*apiv1.ListRevisionsResponse, error)
	// ListTemplateKindRequest: Used to list unique template kind(names).
	ListTemplateKinds(context.Context, *ListTemplateKindsRequest) (*ListTemplateKindsResponse, error)
	// ListTemplateTypes API returns the list of all supported template types.
	ListTemplateTypes(context.Context, *ListTemplateTypesRequest) (*ListTemplateTypesResponse, error)
	// GetTemplateType API returns the template type by id.
	GetTemplateType(context.Context, *GetTemplateTypeRequest) (*TemplateType, error)
	// ListTemplateSamples: Used to list template sample schema.
	ListTemplateSamples(context.Context, *ListTemplateSamplesRequest) (*ListTemplateSamplesResponse, error)
	// GetTemplateSample API returns the template sample for a given template id.
	GetTemplateSample(context.Context, *GetTemplateSampleRequest) (*TemplateSample, error)
	mustEmbedUnimplementedTemplateDefinitionServiceServer()
}

// UnimplementedTemplateDefinitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateDefinitionServiceServer struct {
}

func (UnimplementedTemplateDefinitionServiceServer) GetRevision(context.Context, *apiv1.GetRevisionRequest) (*apiv1.Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) ListRevisions(context.Context, *apiv1.ListRevisionsRequest) (*apiv1.ListRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRevisions not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) ListTemplateKinds(context.Context, *ListTemplateKindsRequest) (*ListTemplateKindsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateKinds not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) ListTemplateTypes(context.Context, *ListTemplateTypesRequest) (*ListTemplateTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateTypes not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) GetTemplateType(context.Context, *GetTemplateTypeRequest) (*TemplateType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateType not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) ListTemplateSamples(context.Context, *ListTemplateSamplesRequest) (*ListTemplateSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSamples not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) GetTemplateSample(context.Context, *GetTemplateSampleRequest) (*TemplateSample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateSample not implemented")
}
func (UnimplementedTemplateDefinitionServiceServer) mustEmbedUnimplementedTemplateDefinitionServiceServer() {
}

// UnsafeTemplateDefinitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateDefinitionServiceServer will
// result in compilation errors.
type UnsafeTemplateDefinitionServiceServer interface {
	mustEmbedUnimplementedTemplateDefinitionServiceServer()
}

func RegisterTemplateDefinitionServiceServer(s grpc.ServiceRegistrar, srv TemplateDefinitionServiceServer) {
	s.RegisterService(&TemplateDefinitionService_ServiceDesc, srv)
}

func _TemplateDefinitionService_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiv1.GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_GetRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).GetRevision(ctx, req.(*apiv1.GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_ListRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiv1.ListRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).ListRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_ListRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).ListRevisions(ctx, req.(*apiv1.ListRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_ListTemplateKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateKindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).ListTemplateKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_ListTemplateKinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).ListTemplateKinds(ctx, req.(*ListTemplateKindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_ListTemplateTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).ListTemplateTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_ListTemplateTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).ListTemplateTypes(ctx, req.(*ListTemplateTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_GetTemplateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).GetTemplateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_GetTemplateType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).GetTemplateType(ctx, req.(*GetTemplateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_ListTemplateSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).ListTemplateSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_ListTemplateSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).ListTemplateSamples(ctx, req.(*ListTemplateSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateDefinitionService_GetTemplateSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateDefinitionServiceServer).GetTemplateSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateDefinitionService_GetTemplateSample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateDefinitionServiceServer).GetTemplateSample(ctx, req.(*GetTemplateSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateDefinitionService_ServiceDesc is the grpc.ServiceDesc for TemplateDefinitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateDefinitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.catalog.templatedefinition.v1.TemplateDefinitionService",
	HandlerType: (*TemplateDefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRevision",
			Handler:    _TemplateDefinitionService_GetRevision_Handler,
		},
		{
			MethodName: "ListRevisions",
			Handler:    _TemplateDefinitionService_ListRevisions_Handler,
		},
		{
			MethodName: "ListTemplateKinds",
			Handler:    _TemplateDefinitionService_ListTemplateKinds_Handler,
		},
		{
			MethodName: "ListTemplateTypes",
			Handler:    _TemplateDefinitionService_ListTemplateTypes_Handler,
		},
		{
			MethodName: "GetTemplateType",
			Handler:    _TemplateDefinitionService_GetTemplateType_Handler,
		},
		{
			MethodName: "ListTemplateSamples",
			Handler:    _TemplateDefinitionService_ListTemplateSamples_Handler,
		},
		{
			MethodName: "GetTemplateSample",
			Handler:    _TemplateDefinitionService_GetTemplateSample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/catalog/templatedefinition/apiv1/templatedefinition.proto",
}
