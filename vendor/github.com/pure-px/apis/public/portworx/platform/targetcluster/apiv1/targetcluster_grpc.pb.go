// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/targetcluster/apiv1/targetcluster.proto

package targetcluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TargetClusterService_ListTargetClusters_FullMethodName  = "/public.portworx.platform.TargetCluster.v1.TargetClusterService/ListTargetClusters"
	TargetClusterService_GetTargetCluster_FullMethodName    = "/public.portworx.platform.TargetCluster.v1.TargetClusterService/GetTargetCluster"
	TargetClusterService_DeleteTargetCluster_FullMethodName = "/public.portworx.platform.TargetCluster.v1.TargetClusterService/DeleteTargetCluster"
	TargetClusterService_UpdateTargetCluster_FullMethodName = "/public.portworx.platform.TargetCluster.v1.TargetClusterService/UpdateTargetCluster"
)

// TargetClusterServiceClient is the client API for TargetClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TargetClusterServiceClient interface {
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// ListTargetCluster API lists the TargetClusters visible to the caller.
	ListTargetClusters(ctx context.Context, in *ListTargetClustersRequest, opts ...grpc.CallOption) (*ListTargetClustersResponse, error)
	// GetTargetCluster API returns the info about the TargetCluster for given name.
	GetTargetCluster(ctx context.Context, in *GetTargetClusterRequest, opts ...grpc.CallOption) (*TargetCluster, error)
	// DeleteTargetCluster API deletes the specified TargetCluster.
	DeleteTargetCluster(ctx context.Context, in *DeleteTargetClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateTargetCluster API updates the metadata(e.g name/labels/annotations and desc) of the specified TargetCluster.
	UpdateTargetCluster(ctx context.Context, in *UpdateTargetClusterRequest, opts ...grpc.CallOption) (*TargetCluster, error)
}

type targetClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetClusterServiceClient(cc grpc.ClientConnInterface) TargetClusterServiceClient {
	return &targetClusterServiceClient{cc}
}

func (c *targetClusterServiceClient) ListTargetClusters(ctx context.Context, in *ListTargetClustersRequest, opts ...grpc.CallOption) (*ListTargetClustersResponse, error) {
	out := new(ListTargetClustersResponse)
	err := c.cc.Invoke(ctx, TargetClusterService_ListTargetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetClusterServiceClient) GetTargetCluster(ctx context.Context, in *GetTargetClusterRequest, opts ...grpc.CallOption) (*TargetCluster, error) {
	out := new(TargetCluster)
	err := c.cc.Invoke(ctx, TargetClusterService_GetTargetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetClusterServiceClient) DeleteTargetCluster(ctx context.Context, in *DeleteTargetClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TargetClusterService_DeleteTargetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *targetClusterServiceClient) UpdateTargetCluster(ctx context.Context, in *UpdateTargetClusterRequest, opts ...grpc.CallOption) (*TargetCluster, error) {
	out := new(TargetCluster)
	err := c.cc.Invoke(ctx, TargetClusterService_UpdateTargetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TargetClusterServiceServer is the server API for TargetClusterService service.
// All implementations must embed UnimplementedTargetClusterServiceServer
// for forward compatibility
type TargetClusterServiceServer interface {
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// ListTargetCluster API lists the TargetClusters visible to the caller.
	ListTargetClusters(context.Context, *ListTargetClustersRequest) (*ListTargetClustersResponse, error)
	// GetTargetCluster API returns the info about the TargetCluster for given name.
	GetTargetCluster(context.Context, *GetTargetClusterRequest) (*TargetCluster, error)
	// DeleteTargetCluster API deletes the specified TargetCluster.
	DeleteTargetCluster(context.Context, *DeleteTargetClusterRequest) (*emptypb.Empty, error)
	// UpdateTargetCluster API updates the metadata(e.g name/labels/annotations and desc) of the specified TargetCluster.
	UpdateTargetCluster(context.Context, *UpdateTargetClusterRequest) (*TargetCluster, error)
	mustEmbedUnimplementedTargetClusterServiceServer()
}

// UnimplementedTargetClusterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTargetClusterServiceServer struct {
}

func (UnimplementedTargetClusterServiceServer) ListTargetClusters(context.Context, *ListTargetClustersRequest) (*ListTargetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetClusters not implemented")
}
func (UnimplementedTargetClusterServiceServer) GetTargetCluster(context.Context, *GetTargetClusterRequest) (*TargetCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetCluster not implemented")
}
func (UnimplementedTargetClusterServiceServer) DeleteTargetCluster(context.Context, *DeleteTargetClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetCluster not implemented")
}
func (UnimplementedTargetClusterServiceServer) UpdateTargetCluster(context.Context, *UpdateTargetClusterRequest) (*TargetCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetCluster not implemented")
}
func (UnimplementedTargetClusterServiceServer) mustEmbedUnimplementedTargetClusterServiceServer() {}

// UnsafeTargetClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TargetClusterServiceServer will
// result in compilation errors.
type UnsafeTargetClusterServiceServer interface {
	mustEmbedUnimplementedTargetClusterServiceServer()
}

func RegisterTargetClusterServiceServer(s grpc.ServiceRegistrar, srv TargetClusterServiceServer) {
	s.RegisterService(&TargetClusterService_ServiceDesc, srv)
}

func _TargetClusterService_ListTargetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetClusterServiceServer).ListTargetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TargetClusterService_ListTargetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetClusterServiceServer).ListTargetClusters(ctx, req.(*ListTargetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetClusterService_GetTargetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetClusterServiceServer).GetTargetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TargetClusterService_GetTargetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetClusterServiceServer).GetTargetCluster(ctx, req.(*GetTargetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetClusterService_DeleteTargetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetClusterServiceServer).DeleteTargetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TargetClusterService_DeleteTargetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetClusterServiceServer).DeleteTargetCluster(ctx, req.(*DeleteTargetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TargetClusterService_UpdateTargetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetClusterServiceServer).UpdateTargetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TargetClusterService_UpdateTargetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetClusterServiceServer).UpdateTargetCluster(ctx, req.(*UpdateTargetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TargetClusterService_ServiceDesc is the grpc.ServiceDesc for TargetClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TargetClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.TargetCluster.v1.TargetClusterService",
	HandlerType: (*TargetClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTargetClusters",
			Handler:    _TargetClusterService_ListTargetClusters_Handler,
		},
		{
			MethodName: "GetTargetCluster",
			Handler:    _TargetClusterService_GetTargetCluster_Handler,
		},
		{
			MethodName: "DeleteTargetCluster",
			Handler:    _TargetClusterService_DeleteTargetCluster_Handler,
		},
		{
			MethodName: "UpdateTargetCluster",
			Handler:    _TargetClusterService_UpdateTargetCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/targetcluster/apiv1/targetcluster.proto",
}
