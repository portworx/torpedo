// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: public/portworx/platform/targetcluster/apiv1/targetcluster.proto

package targetcluster

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	apiv1 "github.com/pure-px/apis/public/portworx/common/apiv1"
	apiv11 "github.com/pure-px/apis/public/portworx/platform/targetcluster/application/apiv1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported values of phase of target cluster
type TargetClusterPhase_Phase int32

const (
	// Must be set in the proto file; ignore.
	TargetClusterPhase_PHASE_UNSPECIFIED TargetClusterPhase_Phase = 0
	// Represents target cluster is connected to control plane
	TargetClusterPhase_CONNECTED TargetClusterPhase_Phase = 1
	// Represents target cluster is disconnected from control plane if
	// heartbeat is not received for three consecutive cycles
	TargetClusterPhase_DISCONNECTED TargetClusterPhase_Phase = 2
	// Represents target cluster failed to setup agent
	TargetClusterPhase_FAILED TargetClusterPhase_Phase = 3
	// Represents target cluster deletion in progress
	TargetClusterPhase_DELETING TargetClusterPhase_Phase = 4
)

// Enum value maps for TargetClusterPhase_Phase.
var (
	TargetClusterPhase_Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "CONNECTED",
		2: "DISCONNECTED",
		3: "FAILED",
		4: "DELETING",
	}
	TargetClusterPhase_Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"CONNECTED":         1,
		"DISCONNECTED":      2,
		"FAILED":            3,
		"DELETING":          4,
	}
)

func (x TargetClusterPhase_Phase) Enum() *TargetClusterPhase_Phase {
	p := new(TargetClusterPhase_Phase)
	*p = x
	return p
}

func (x TargetClusterPhase_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetClusterPhase_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes[0].Descriptor()
}

func (TargetClusterPhase_Phase) Type() protoreflect.EnumType {
	return &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes[0]
}

func (x TargetClusterPhase_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetClusterPhase_Phase.Descriptor instead.
func (TargetClusterPhase_Phase) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{8, 0}
}

// kubeplatform values
type KubePlatform_Type int32

const (
	// Unsepecified
	KubePlatform_TYPE_UNSPECIFIED KubePlatform_Type = 0
	// Aws platform
	KubePlatform_AWS KubePlatform_Type = 1
	// Azure platform
	KubePlatform_AZURE KubePlatform_Type = 2
	// Openshift cloud platform
	KubePlatform_OCP KubePlatform_Type = 3
	// Google cloud platform
	KubePlatform_GCP KubePlatform_Type = 4
	// VMware vSphere
	KubePlatform_VSPHERE KubePlatform_Type = 5
	// Unknown platform
	KubePlatform_UNKNOWN KubePlatform_Type = 6
)

// Enum value maps for KubePlatform_Type.
var (
	KubePlatform_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "AWS",
		2: "AZURE",
		3: "OCP",
		4: "GCP",
		5: "VSPHERE",
		6: "UNKNOWN",
	}
	KubePlatform_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"AWS":              1,
		"AZURE":            2,
		"OCP":              3,
		"GCP":              4,
		"VSPHERE":          5,
		"UNKNOWN":          6,
	}
)

func (x KubePlatform_Type) Enum() *KubePlatform_Type {
	p := new(KubePlatform_Type)
	*p = x
	return p
}

func (x KubePlatform_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubePlatform_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes[1].Descriptor()
}

func (KubePlatform_Type) Type() protoreflect.EnumType {
	return &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes[1]
}

func (x KubePlatform_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubePlatform_Type.Descriptor instead.
func (KubePlatform_Type) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{10, 0}
}

// ListTargetClusterRequest is a request message to the List TargetCluster API.
type ListTargetClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List target clusters associated with a tenant
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Pagination parameters for listing target clusters.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Provides the key in labels and associated values for which target cluster need to be listed
	LabelSelector *apiv1.Selector `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Field selector is used to filter target clusters based on the fields in target cluster proto message
	FieldSelector *apiv1.Selector `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3" json:"field_selector,omitempty"`
	// Infra_resource_selector is used to filter target cluster based on the infra resources associated with the target cluster
	// Supported infra resource filters: PROJECT, APPLICATION
	InfraResourceSelector *apiv1.ResourceSelector `protobuf:"bytes,5,opt,name=infra_resource_selector,json=infraResourceSelector,proto3" json:"infra_resource_selector,omitempty"`
	// Sorting details using which the target cluster list to be sorted
	Sort *apiv1.Sort `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListTargetClustersRequest) Reset() {
	*x = ListTargetClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetClustersRequest) ProtoMessage() {}

func (x *ListTargetClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetClustersRequest.ProtoReflect.Descriptor instead.
func (*ListTargetClustersRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{0}
}

func (x *ListTargetClustersRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListTargetClustersRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTargetClustersRequest) GetLabelSelector() *apiv1.Selector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *ListTargetClustersRequest) GetFieldSelector() *apiv1.Selector {
	if x != nil {
		return x.FieldSelector
	}
	return nil
}

func (x *ListTargetClustersRequest) GetInfraResourceSelector() *apiv1.ResourceSelector {
	if x != nil {
		return x.InfraResourceSelector
	}
	return nil
}

func (x *ListTargetClustersRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// ListTargetClusterResponse is the response message to the List TargetCluster API
type ListTargetClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field because cluster details are required in the response --)
	//
	// The list of TargetClusters visible to the caller
	Clusters []*TargetCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListTargetClustersResponse) Reset() {
	*x = ListTargetClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetClustersResponse) ProtoMessage() {}

func (x *ListTargetClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetClustersResponse.ProtoReflect.Descriptor instead.
func (*ListTargetClustersResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{1}
}

func (x *ListTargetClustersResponse) GetClusters() []*TargetCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListTargetClustersResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetTargetClusterRequest is the request message to the Get TargetCluster API
type GetTargetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the cluster whose details needs to be fetched
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTargetClusterRequest) Reset() {
	*x = GetTargetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetClusterRequest) ProtoMessage() {}

func (x *GetTargetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetTargetClusterRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{2}
}

func (x *GetTargetClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteTargetClusterRequest is the request message to DeleteTargetCluster API
type DeleteTargetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the cluster whose details needs to be fetched
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flag to indicate force delete
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteTargetClusterRequest) Reset() {
	*x = DeleteTargetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetClusterRequest) ProtoMessage() {}

func (x *DeleteTargetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteTargetClusterRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTargetClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteTargetClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// UpdateTargetClusterRequest is the request message to the Update TargetCluster API
type UpdateTargetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target cluster details
	TargetCluster *TargetCluster `protobuf:"bytes,1,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
}

func (x *UpdateTargetClusterRequest) Reset() {
	*x = UpdateTargetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTargetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTargetClusterRequest) ProtoMessage() {}

func (x *UpdateTargetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTargetClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateTargetClusterRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTargetClusterRequest) GetTargetCluster() *TargetCluster {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

// TargetCluster is a high level entity that represents one large company(e.g. a Pure).
type TargetCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the target cluster(Resource Meta)
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Desired configuration of the Target Cluster
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Current status of the Target Cluster
	Status *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TargetCluster) Reset() {
	*x = TargetCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCluster) ProtoMessage() {}

func (x *TargetCluster) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCluster.ProtoReflect.Descriptor instead.
func (*TargetCluster) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{5}
}

func (x *TargetCluster) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TargetCluster) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TargetCluster) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Desired configuration of the Target Cluster
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{6}
}

// Status of the Target Cluster
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target Cluster Metadata
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Phase of target cluster
	Phase TargetClusterPhase_Phase `protobuf:"varint,2,opt,name=phase,proto3,enum=public.portworx.platform.TargetCluster.v1.TargetClusterPhase_Phase" json:"phase,omitempty"`
	// Timestamp of cluster's last status update to control plane
	LastStatusUpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_status_update_time,json=lastStatusUpdateTime,proto3" json:"last_status_update_time,omitempty"`
	// Status of the platform agent running in the target cluster
	PlatformAgent apiv11.ApplicationPhase_Phase `protobuf:"varint,4,opt,name=platform_agent,json=platformAgent,proto3,enum=public.portworx.platform.targetcluster.application.v1.ApplicationPhase_Phase" json:"platform_agent,omitempty"`
	// Status of applications running in the target cluster eg: BAAS, PDS, MPXE
	Applications map[string]apiv11.ApplicationPhase_Phase `protobuf:"bytes,5,rep,name=applications,proto3" json:"applications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=public.portworx.platform.targetcluster.application.v1.ApplicationPhase_Phase"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{7}
}

func (x *Status) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Status) GetPhase() TargetClusterPhase_Phase {
	if x != nil {
		return x.Phase
	}
	return TargetClusterPhase_PHASE_UNSPECIFIED
}

func (x *Status) GetLastStatusUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStatusUpdateTime
	}
	return nil
}

func (x *Status) GetPlatformAgent() apiv11.ApplicationPhase_Phase {
	if x != nil {
		return x.PlatformAgent
	}
	return apiv11.ApplicationPhase_Phase(0)
}

func (x *Status) GetApplications() map[string]apiv11.ApplicationPhase_Phase {
	if x != nil {
		return x.Applications
	}
	return nil
}

// TargetClusterPhase represents the phase of target cluster
type TargetClusterPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TargetClusterPhase) Reset() {
	*x = TargetClusterPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetClusterPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetClusterPhase) ProtoMessage() {}

func (x *TargetClusterPhase) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetClusterPhase.ProtoReflect.Descriptor instead.
func (*TargetClusterPhase) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{8}
}

// TargetClusterMetadata represents the metadata of a cluster
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of kubernetes api server
	KubeServerVersion string `protobuf:"bytes,1,opt,name=kube_server_version,json=kubeServerVersion,proto3" json:"kube_server_version,omitempty"`
	// Platform of the kubernetes eg: aws, ocp, etc
	KubePlatform KubePlatform_Type `protobuf:"varint,2,opt,name=kube_platform,json=kubePlatform,proto3,enum=public.portworx.platform.TargetCluster.v1.KubePlatform_Type" json:"kube_platform,omitempty"`
	// Metadata of portworx enterprise on the target cluster
	PxeMetadata *PXEMetadata `protobuf:"bytes,3,opt,name=pxe_metadata,json=pxeMetadata,proto3" json:"pxe_metadata,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{9}
}

func (x *Metadata) GetKubeServerVersion() string {
	if x != nil {
		return x.KubeServerVersion
	}
	return ""
}

func (x *Metadata) GetKubePlatform() KubePlatform_Type {
	if x != nil {
		return x.KubePlatform
	}
	return KubePlatform_TYPE_UNSPECIFIED
}

func (x *Metadata) GetPxeMetadata() *PXEMetadata {
	if x != nil {
		return x.PxeMetadata
	}
	return nil
}

// KubePlatform represents the k8s platform of the target cluster
type KubePlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KubePlatform) Reset() {
	*x = KubePlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubePlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePlatform) ProtoMessage() {}

func (x *KubePlatform) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePlatform.ProtoReflect.Descriptor instead.
func (*KubePlatform) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{10}
}

// PX Enterprise metadata on the target cluster.
type PXEMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CSIEnabled flag depicts if csi is supported on the target cluster.
	CsiEnabled bool `protobuf:"varint,1,opt,name=csi_enabled,json=csiEnabled,proto3" json:"csi_enabled,omitempty"`
	// Name of portworx api service on the target cluster.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Namespace of portworx api service on the target cluster.
	ServiceNamespace string `protobuf:"bytes,3,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	// Version of PXE installed on the target cluster.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PXEMetadata) Reset() {
	*x = PXEMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXEMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXEMetadata) ProtoMessage() {}

func (x *PXEMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXEMetadata.ProtoReflect.Descriptor instead.
func (*PXEMetadata) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP(), []int{11}
}

func (x *PXEMetadata) GetCsiEnabled() bool {
	if x != nil {
		return x.CsiEnabled
	}
	return false
}

func (x *PXEMetadata) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PXEMetadata) GetServiceNamespace() string {
	if x != nil {
		return x.ServiceNamespace
	}
	return ""
}

func (x *PXEMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_public_portworx_platform_targetcluster_apiv1_targetcluster_proto protoreflect.FileDescriptor

var file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDesc = []byte{
	0x0a, 0x40, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x68, 0x0a,
	0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x15, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x7d, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xda, 0x01, 0x0a,
	0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xf7, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x59, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x74, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8e, 0x01, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a,
	0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0xf8,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0d, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x59,
	0x0a, 0x0c, 0x70, 0x78, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x58, 0x45, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x78,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x0c, 0x4b, 0x75, 0x62,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x43, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x50, 0x58, 0x45, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x73, 0x69, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x73,
	0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0xbb, 0x06, 0x0a, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x02, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x44, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x66, 0x92, 0x41, 0x35, 0x12, 0x33, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x5a,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd6, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x45, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x75, 0x69, 0x64, 0x7d,
	0x42, 0x99, 0x01, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x42, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescOnce sync.Once
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescData = file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDesc
)

func file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescGZIP() []byte {
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescOnce.Do(func() {
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescData)
	})
	return file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDescData
}

var file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_goTypes = []interface{}{
	(TargetClusterPhase_Phase)(0),             // 0: public.portworx.platform.TargetCluster.v1.TargetClusterPhase.Phase
	(KubePlatform_Type)(0),                    // 1: public.portworx.platform.TargetCluster.v1.KubePlatform.Type
	(*ListTargetClustersRequest)(nil),         // 2: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest
	(*ListTargetClustersResponse)(nil),        // 3: public.portworx.platform.TargetCluster.v1.ListTargetClustersResponse
	(*GetTargetClusterRequest)(nil),           // 4: public.portworx.platform.TargetCluster.v1.GetTargetClusterRequest
	(*DeleteTargetClusterRequest)(nil),        // 5: public.portworx.platform.TargetCluster.v1.DeleteTargetClusterRequest
	(*UpdateTargetClusterRequest)(nil),        // 6: public.portworx.platform.TargetCluster.v1.UpdateTargetClusterRequest
	(*TargetCluster)(nil),                     // 7: public.portworx.platform.TargetCluster.v1.TargetCluster
	(*Config)(nil),                            // 8: public.portworx.platform.TargetCluster.v1.Config
	(*Status)(nil),                            // 9: public.portworx.platform.TargetCluster.v1.Status
	(*TargetClusterPhase)(nil),                // 10: public.portworx.platform.TargetCluster.v1.TargetClusterPhase
	(*Metadata)(nil),                          // 11: public.portworx.platform.TargetCluster.v1.Metadata
	(*KubePlatform)(nil),                      // 12: public.portworx.platform.TargetCluster.v1.KubePlatform
	(*PXEMetadata)(nil),                       // 13: public.portworx.platform.TargetCluster.v1.PXEMetadata
	nil,                                       // 14: public.portworx.platform.TargetCluster.v1.Status.ApplicationsEntry
	(*apiv1.PageBasedPaginationRequest)(nil),  // 15: public.portworx.common.v1.PageBasedPaginationRequest
	(*apiv1.Selector)(nil),                    // 16: public.portworx.common.v1.Selector
	(*apiv1.ResourceSelector)(nil),            // 17: public.portworx.common.v1.ResourceSelector
	(*apiv1.Sort)(nil),                        // 18: public.portworx.common.v1.Sort
	(*apiv1.PageBasedPaginationResponse)(nil), // 19: public.portworx.common.v1.PageBasedPaginationResponse
	(*apiv1.Meta)(nil),                        // 20: public.portworx.common.v1.Meta
	(*timestamppb.Timestamp)(nil),             // 21: google.protobuf.Timestamp
	(apiv11.ApplicationPhase_Phase)(0),        // 22: public.portworx.platform.targetcluster.application.v1.ApplicationPhase.Phase
	(*emptypb.Empty)(nil),                     // 23: google.protobuf.Empty
}
var file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_depIdxs = []int32{
	15, // 0: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	16, // 1: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest.label_selector:type_name -> public.portworx.common.v1.Selector
	16, // 2: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest.field_selector:type_name -> public.portworx.common.v1.Selector
	17, // 3: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest.infra_resource_selector:type_name -> public.portworx.common.v1.ResourceSelector
	18, // 4: public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest.sort:type_name -> public.portworx.common.v1.Sort
	7,  // 5: public.portworx.platform.TargetCluster.v1.ListTargetClustersResponse.clusters:type_name -> public.portworx.platform.TargetCluster.v1.TargetCluster
	19, // 6: public.portworx.platform.TargetCluster.v1.ListTargetClustersResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	7,  // 7: public.portworx.platform.TargetCluster.v1.UpdateTargetClusterRequest.target_cluster:type_name -> public.portworx.platform.TargetCluster.v1.TargetCluster
	20, // 8: public.portworx.platform.TargetCluster.v1.TargetCluster.meta:type_name -> public.portworx.common.v1.Meta
	8,  // 9: public.portworx.platform.TargetCluster.v1.TargetCluster.config:type_name -> public.portworx.platform.TargetCluster.v1.Config
	9,  // 10: public.portworx.platform.TargetCluster.v1.TargetCluster.status:type_name -> public.portworx.platform.TargetCluster.v1.Status
	11, // 11: public.portworx.platform.TargetCluster.v1.Status.metadata:type_name -> public.portworx.platform.TargetCluster.v1.Metadata
	0,  // 12: public.portworx.platform.TargetCluster.v1.Status.phase:type_name -> public.portworx.platform.TargetCluster.v1.TargetClusterPhase.Phase
	21, // 13: public.portworx.platform.TargetCluster.v1.Status.last_status_update_time:type_name -> google.protobuf.Timestamp
	22, // 14: public.portworx.platform.TargetCluster.v1.Status.platform_agent:type_name -> public.portworx.platform.targetcluster.application.v1.ApplicationPhase.Phase
	14, // 15: public.portworx.platform.TargetCluster.v1.Status.applications:type_name -> public.portworx.platform.TargetCluster.v1.Status.ApplicationsEntry
	1,  // 16: public.portworx.platform.TargetCluster.v1.Metadata.kube_platform:type_name -> public.portworx.platform.TargetCluster.v1.KubePlatform.Type
	13, // 17: public.portworx.platform.TargetCluster.v1.Metadata.pxe_metadata:type_name -> public.portworx.platform.TargetCluster.v1.PXEMetadata
	22, // 18: public.portworx.platform.TargetCluster.v1.Status.ApplicationsEntry.value:type_name -> public.portworx.platform.targetcluster.application.v1.ApplicationPhase.Phase
	2,  // 19: public.portworx.platform.TargetCluster.v1.TargetClusterService.ListTargetClusters:input_type -> public.portworx.platform.TargetCluster.v1.ListTargetClustersRequest
	4,  // 20: public.portworx.platform.TargetCluster.v1.TargetClusterService.GetTargetCluster:input_type -> public.portworx.platform.TargetCluster.v1.GetTargetClusterRequest
	5,  // 21: public.portworx.platform.TargetCluster.v1.TargetClusterService.DeleteTargetCluster:input_type -> public.portworx.platform.TargetCluster.v1.DeleteTargetClusterRequest
	6,  // 22: public.portworx.platform.TargetCluster.v1.TargetClusterService.UpdateTargetCluster:input_type -> public.portworx.platform.TargetCluster.v1.UpdateTargetClusterRequest
	3,  // 23: public.portworx.platform.TargetCluster.v1.TargetClusterService.ListTargetClusters:output_type -> public.portworx.platform.TargetCluster.v1.ListTargetClustersResponse
	7,  // 24: public.portworx.platform.TargetCluster.v1.TargetClusterService.GetTargetCluster:output_type -> public.portworx.platform.TargetCluster.v1.TargetCluster
	23, // 25: public.portworx.platform.TargetCluster.v1.TargetClusterService.DeleteTargetCluster:output_type -> google.protobuf.Empty
	7,  // 26: public.portworx.platform.TargetCluster.v1.TargetClusterService.UpdateTargetCluster:output_type -> public.portworx.platform.TargetCluster.v1.TargetCluster
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_init() }
func file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_init() {
	if File_public_portworx_platform_targetcluster_apiv1_targetcluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTargetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetClusterPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubePlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXEMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_goTypes,
		DependencyIndexes: file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_depIdxs,
		EnumInfos:         file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_enumTypes,
		MessageInfos:      file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_msgTypes,
	}.Build()
	File_public_portworx_platform_targetcluster_apiv1_targetcluster_proto = out.File
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_rawDesc = nil
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_goTypes = nil
	file_public_portworx_platform_targetcluster_apiv1_targetcluster_proto_depIdxs = nil
}
