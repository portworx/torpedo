// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.platform.tenant.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "public/portworx/common/apiv1/meta.proto";
import "public/portworx/common/apiv1/pagination.proto";

option go_package = "github.com/pure-px/apis/public/portworx/platform/tenant/apiv1;tenant";
option java_multiple_files = true;
option java_package = "com.public.portworx.platform.tenant.v1";
option java_outer_classname = "TenantProto";


// Tenant service provides APIs to interact with the Tenant entity.
service TenantService {

  // GetTenant API returns the info about  for given tenant id.
  rpc GetTenant(GetTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      get: "/core/v1/tenants/{tenant_id}"
    };
  }

  // CreateTenant API creates a new Tenant.
  rpc CreateTenant(CreateTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      post: "/core/v1/tenants"
      body: "tenant"
    };
  }

  // UpdateTenant API updates tenant.
  rpc UpdateTenant(UpdateTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      put: "/core/v1/tenants/{tenant.meta.uid}"
      body: "tenant"
    };
  }

  // Delete tenant removes a tenant record.
  rpc DeleteTenant(DeleteTenantRequest)
      returns (google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/core/v1/tenants/{tenant_id}"
    };
  }

  // ListTenants API lists the tenants visible to the caller for the current account.
  rpc ListTenants(ListTenantsRequest)
      returns (ListTenantsResponse) {
    option(google.api.http) = {
      get: "/core/v1/tenants"
    };
  }
}

// ListTenantsRequest  is the request message to the ListTenants API.
message ListTenantsRequest {
  // Pagination parameters for listing tenants.
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 1;
}

// ListTenantsResponse is the response message to the ListTenants API and contains
// the list of tenants visible to the caller.
message ListTenantsResponse {
  // list of tenant response.
  repeated Tenant tenants = 1;
  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;

}

// Request for getting  a tenant.
message GetTenantRequest {
  // ID of the tenant which needs to get info.
  string tenant_id = 1;
}

// Request for updating a tenant.
message UpdateTenantRequest {
  //tenant which  needs to be updated.
  Tenant tenant = 1;
}

// Request for creating a tenant.
message CreateTenantRequest {
  // tenant to be created.
  Tenant tenant = 1;
}

// Request for deleting a tenant.
message DeleteTenantRequest {
  // ID of the tenant which needs to be deleted.
  string tenant_id = 1;
}

// Tenant is an organizational subunit of an account that represents an org or a unit of a large company.
// A tenant comprises multiple projects.
message Tenant {
  // Metadata of the tenant.
  public.portworx.common.v1.Meta meta = 1;
  // status of the tenant.
  Status status = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Status represents the current state of the tenant.
message Status {
  // Textual information for the current state of the tenant.
  string reason = 1;
  // Current phase of the project.
  Phase.Type phase = 2;
}

// Phase represents the current status of the tenant.
message Phase {
  // Type of phase the tenant is in currently should be one of the below.
  enum Type {
    // Unspecified, do not use.
    TYPE_UNSPECIFIED = 0;
    // The tenant is in use and active.
    ACTIVE = 1;
    // Deletion of tenant has not started.
    DELETE_PENDING = 2;
    // Deletion of the tenant is scheduled and in progress.
    DELETE_IN_PROGRESS = 3;
    // Deletion is failed
    DELETE_FAILED=4;
  }
}