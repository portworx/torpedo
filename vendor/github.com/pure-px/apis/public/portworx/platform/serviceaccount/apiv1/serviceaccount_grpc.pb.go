// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/serviceaccount/apiv1/serviceaccount.proto

package serviceaccount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceAccountService_CreateServiceAccount_FullMethodName           = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/CreateServiceAccount"
	ServiceAccountService_GetServiceAccount_FullMethodName              = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/GetServiceAccount"
	ServiceAccountService_ListServiceAccount_FullMethodName             = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/ListServiceAccount"
	ServiceAccountService_UpdateServiceAccount_FullMethodName           = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/UpdateServiceAccount"
	ServiceAccountService_RegenerateServiceAccountSecret_FullMethodName = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/RegenerateServiceAccountSecret"
	ServiceAccountService_GetAccessToken_FullMethodName                 = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/GetAccessToken"
	ServiceAccountService_DeleteServiceAccount_FullMethodName           = "/public.portworx.platform.serviceaccount.v1.ServiceAccountService/DeleteServiceAccount"
)

// ServiceAccountServiceClient is the client API for ServiceAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAccountServiceClient interface {
	// Create a requested service account.
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Returns a requested service account.
	GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Returns a requested list of service accounts.
	ListServiceAccount(ctx context.Context, in *ListServiceAccountRequest, opts ...grpc.CallOption) (*ListServiceAccountResponse, error)
	// Updates a service account.
	UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Regenerate access token for a service account.
	RegenerateServiceAccountSecret(ctx context.Context, in *RegenerateServiceAccountSecretRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Get access token for a service account.
	// (-- api-linter: core::0131::http-body=disabled
	//
	//	api-linter: core::0131::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because reasons API needs input from request body. --)
	GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*AccessToken, error)
	// Initiates deletion of a service account.
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountServiceClient(cc grpc.ClientConnInterface) ServiceAccountServiceClient {
	return &serviceAccountServiceClient{cc}
}

func (c *serviceAccountServiceClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := c.cc.Invoke(ctx, ServiceAccountService_CreateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := c.cc.Invoke(ctx, ServiceAccountService_GetServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) ListServiceAccount(ctx context.Context, in *ListServiceAccountRequest, opts ...grpc.CallOption) (*ListServiceAccountResponse, error) {
	out := new(ListServiceAccountResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_ListServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := c.cc.Invoke(ctx, ServiceAccountService_UpdateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) RegenerateServiceAccountSecret(ctx context.Context, in *RegenerateServiceAccountSecretRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := c.cc.Invoke(ctx, ServiceAccountService_RegenerateServiceAccountSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, ServiceAccountService_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServiceAccountService_DeleteServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAccountServiceServer is the server API for ServiceAccountService service.
// All implementations must embed UnimplementedServiceAccountServiceServer
// for forward compatibility
type ServiceAccountServiceServer interface {
	// Create a requested service account.
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*ServiceAccount, error)
	// Returns a requested service account.
	GetServiceAccount(context.Context, *GetServiceAccountRequest) (*ServiceAccount, error)
	// Returns a requested list of service accounts.
	ListServiceAccount(context.Context, *ListServiceAccountRequest) (*ListServiceAccountResponse, error)
	// Updates a service account.
	UpdateServiceAccount(context.Context, *UpdateServiceAccountRequest) (*ServiceAccount, error)
	// Regenerate access token for a service account.
	RegenerateServiceAccountSecret(context.Context, *RegenerateServiceAccountSecretRequest) (*ServiceAccount, error)
	// Get access token for a service account.
	// (-- api-linter: core::0131::http-body=disabled
	//
	//	api-linter: core::0131::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because reasons API needs input from request body. --)
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*AccessToken, error)
	// Initiates deletion of a service account.
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceAccountServiceServer()
}

// UnimplementedServiceAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAccountServiceServer struct {
}

func (UnimplementedServiceAccountServiceServer) CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) GetServiceAccount(context.Context, *GetServiceAccountRequest) (*ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) ListServiceAccount(context.Context, *ListServiceAccountRequest) (*ListServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) UpdateServiceAccount(context.Context, *UpdateServiceAccountRequest) (*ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) RegenerateServiceAccountSecret(context.Context, *RegenerateServiceAccountSecretRequest) (*ServiceAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateServiceAccountSecret not implemented")
}
func (UnimplementedServiceAccountServiceServer) GetAccessToken(context.Context, *GetAccessTokenRequest) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedServiceAccountServiceServer) DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) mustEmbedUnimplementedServiceAccountServiceServer() {}

// UnsafeServiceAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAccountServiceServer will
// result in compilation errors.
type UnsafeServiceAccountServiceServer interface {
	mustEmbedUnimplementedServiceAccountServiceServer()
}

func RegisterServiceAccountServiceServer(s grpc.ServiceRegistrar, srv ServiceAccountServiceServer) {
	s.RegisterService(&ServiceAccountService_ServiceDesc, srv)
}

func _ServiceAccountService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_CreateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_GetServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GetServiceAccount(ctx, req.(*GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_ListServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).ListServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_ListServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).ListServiceAccount(ctx, req.(*ListServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_UpdateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).UpdateServiceAccount(ctx, req.(*UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_RegenerateServiceAccountSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateServiceAccountSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).RegenerateServiceAccountSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_RegenerateServiceAccountSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).RegenerateServiceAccountSecret(ctx, req.(*RegenerateServiceAccountSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GetAccessToken(ctx, req.(*GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_DeleteServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccount(ctx, req.(*DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAccountService_ServiceDesc is the grpc.ServiceDesc for ServiceAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.serviceaccount.v1.ServiceAccountService",
	HandlerType: (*ServiceAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceAccount",
			Handler:    _ServiceAccountService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _ServiceAccountService_GetServiceAccount_Handler,
		},
		{
			MethodName: "ListServiceAccount",
			Handler:    _ServiceAccountService_ListServiceAccount_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _ServiceAccountService_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "RegenerateServiceAccountSecret",
			Handler:    _ServiceAccountService_RegenerateServiceAccountSecret_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _ServiceAccountService_GetAccessToken_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _ServiceAccountService_DeleteServiceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/serviceaccount/apiv1/serviceaccount.proto",
}
