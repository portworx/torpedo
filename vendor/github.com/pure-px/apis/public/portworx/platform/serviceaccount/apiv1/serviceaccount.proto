// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.platform.serviceaccount.v1;

import "google/protobuf/empty.proto";
import "public/portworx/common/apiv1/meta.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "public/portworx/common/apiv1/sort.proto";
import "public/portworx/common/apiv1/pagination.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/pure-px/apis/public/portworx/platform/serviceaccount/apiv1;serviceaccount";
option java_multiple_files = true;
option java_package = "com.public.portworx.platform.serviceaccount.v1";
option java_outer_classname = "ServiceAccountProto";

// Service account service provides APIs to interact with the platform services resource.
service ServiceAccountService {
  // Create a requested service account.
  rpc CreateServiceAccount(CreateServiceAccountRequest)
    returns (ServiceAccount){
      option(google.api.http) = {
        post: "/core/v1/tenants/{tenant_id}/serviceAccounts"
        body: "service_account"
     };
  };

  // Returns a requested service account.
  rpc GetServiceAccount(GetServiceAccountRequest)
    returns (ServiceAccount){
      option(google.api.http) = {
        get: "/core/v1/serviceAccounts/{id}"
     };
  };

  // Returns a requested list of service accounts.
  rpc ListServiceAccount(ListServiceAccountRequest)
    returns (ListServiceAccountResponse){
      option(google.api.http) = {
        get: "/core/v1/serviceAccounts"
     };
  };

  // Updates a service account.
  rpc UpdateServiceAccount(UpdateServiceAccountRequest)
    returns (ServiceAccount){
      option(google.api.http) = {
        put: "/core/v1/serviceAccounts/{id}"
        body: "service_account"
     };
  };

  // Regenerate access token for a service account.
  rpc RegenerateServiceAccountSecret(RegenerateServiceAccountSecretRequest)
    returns (ServiceAccount){
      option(google.api.http) = {
        get: "/core/v1/serviceAccounts/{id}:regenerate"
     };
  };

  // Get access token for a service account.
  // (-- api-linter: core::0131::http-body=disabled
  //     api-linter: core::0131::http-method=disabled
  //     aip.dev/not-precedent: We need to do this because reasons API needs input from request body. --)
  rpc GetAccessToken(GetAccessTokenRequest)
    returns (AccessToken){
      option(google.api.http) = {
        post: "/core/v1/tenants/{tenant_id}:getToken"
        body:"*"
     };
  };

  // Initiates deletion of a service account.
  rpc DeleteServiceAccount(DeleteServiceAccountRequest)
    returns (google.protobuf.Empty){
      option(google.api.http) = {
        delete: "/core/v1/serviceAccounts/{id}"
     };
  };
}

// Service account represents a group of attributes using which a service can consume platform apis.
message ServiceAccount {
  // Metadata of the service account.
  public.portworx.common.v1.Meta meta = 1;
  // Configuration details of service account.
  Config config = 2;
  // Status of service account.
  Status status = 3;
}

// Config clubs attributes represents in detail view for service account.
message Config {
  // Client id.
  string client_id  = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Client secret.
  string client_secret  = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If sets to true then service account will be inactive, false by default.
  bool disabled = 3;
}

// Status of the service account.
message Status {
  // Represents how many times the service account secret has been rotated.
  int32 secret_generation_count = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // When last time the secrets of the service account has been updated.
  google.protobuf.Timestamp last_secret_update_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Attributes required to create a service account record.
message CreateServiceAccountRequest {
  // The parent tenant under which the service account will be created
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for to support creation of
  //     the resource in the tenant context. --)
  string tenant_id = 1;
  // Service account details.
  ServiceAccount service_account = 2;
}

// Attributes required to list service account records.
message ListServiceAccountRequest {
  // id of tenant on which service account should be listed. If not provided,
  // then list will filtered on account id present in the context.
  string tenant_id = 1;
  // Sorting details using which requested list of service account to be sorted.
  public.portworx.common.v1.Sort sort = 2;
  // Pagination parameters for listing service accounts.
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 3;
}

// Response of requested list of service accounts.
message ListServiceAccountResponse {
  // Requested list of service accounts.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We really need this field because reasons. --)
  repeated ServiceAccount service_accounts = 1;

  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;
}

// Updated attributes of a service account.
message UpdateServiceAccountRequest {
  // Unique identifier for the service account.
  string id = 1;
  // Service account to be updated.
  ServiceAccount service_account = 2;
}

// Attributes required to rotate secrets for a service account.
message RegenerateServiceAccountSecretRequest {
  // Unique identifier for the service account.
  string id = 1;
}

// Request to fetch a service account details.
message GetServiceAccountRequest {
  // Tenant id to which a service account is associated.
  string tenant_id = 1;
  // Unique identifier for the service account to be fetched.
  string id = 2;
}

// Request to fetch the access token of a service account.
message GetAccessTokenRequest {
  // ID of the tenant under which the service account was created.
  string tenant_id = 1;
  // Unique identifier generated at the time of service account creation.
  string client_id = 2;
  // Secret key generated at the time of service account creation.
  string client_secret = 3;
}

// The response contains access token for the service account.
message AccessToken {
  // Access token for a service account.
  string token = 1;
}

// Attributes required to process deletion of service account.
message DeleteServiceAccountRequest {
  // Unique identifier for the service account to be deleted.
  string id = 1;
}

