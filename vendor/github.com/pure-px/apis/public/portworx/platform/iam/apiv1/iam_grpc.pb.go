// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/iam/apiv1/iam.proto

package iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IAMService_CreateIAM_FullMethodName          = "/public.portworx.platform.iam.v1.IAMService/CreateIAM"
	IAMService_GrantIAM_FullMethodName           = "/public.portworx.platform.iam.v1.IAMService/GrantIAM"
	IAMService_RevokeIAM_FullMethodName          = "/public.portworx.platform.iam.v1.IAMService/RevokeIAM"
	IAMService_GetIAM_FullMethodName             = "/public.portworx.platform.iam.v1.IAMService/GetIAM"
	IAMService_ListIAMPermissions_FullMethodName = "/public.portworx.platform.iam.v1.IAMService/ListIAMPermissions"
	IAMService_UpdateIAM_FullMethodName          = "/public.portworx.platform.iam.v1.IAMService/UpdateIAM"
	IAMService_DeleteIAM_FullMethodName          = "/public.portworx.platform.iam.v1.IAMService/DeleteIAM"
	IAMService_ListIAM_FullMethodName            = "/public.portworx.platform.iam.v1.IAMService/ListIAM"
)

// IAMServiceClient is the client API for IAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMServiceClient interface {
	// CreateIAM API creates a new IAM role-binding.
	CreateIAM(ctx context.Context, in *CreateIAMRequest, opts ...grpc.CallOption) (*IAM, error)
	// GrantIAM API creates new IAM role-binding at tenant, project and account level.
	GrantIAM(ctx context.Context, in *GrantIAMRequest, opts ...grpc.CallOption) (*GrantIAMResponse, error)
	// RevokeIAM API delete IAM role-binding at tenant, project and account level.
	RevokeIAM(ctx context.Context, in *RevokeIAMRequest, opts ...grpc.CallOption) (*RevokeIAMResponse, error)
	// GetIAM API returns the info about IAM for given IAM id.
	GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*IAM, error)
	// ListIAMPermissions API list permissions for Roles in IAM.
	// (-- api-linter: core::0132::request-message-name=disabled
	//
	//	aip.dev/not-precedent: We need to do this because reasons. we don't need any parameter in request --)
	ListIAMPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListIAMPermissionsResponse, error)
	// UpdateIAM API updates IAM with the new set of role bindings. The request replaces the existing set of bindings.
	UpdateIAM(ctx context.Context, in *UpdateIAMRequest, opts ...grpc.CallOption) (*IAM, error)
	// DeleteIAM API delete IAM, currently required only for name.
	DeleteIAM(ctx context.Context, in *DeleteIAMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListIAM API lists the role bindings.
	ListIAM(ctx context.Context, in *ListIAMRequest, opts ...grpc.CallOption) (*ListIAMResponse, error)
}

type iAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMServiceClient(cc grpc.ClientConnInterface) IAMServiceClient {
	return &iAMServiceClient{cc}
}

func (c *iAMServiceClient) CreateIAM(ctx context.Context, in *CreateIAMRequest, opts ...grpc.CallOption) (*IAM, error) {
	out := new(IAM)
	err := c.cc.Invoke(ctx, IAMService_CreateIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GrantIAM(ctx context.Context, in *GrantIAMRequest, opts ...grpc.CallOption) (*GrantIAMResponse, error) {
	out := new(GrantIAMResponse)
	err := c.cc.Invoke(ctx, IAMService_GrantIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) RevokeIAM(ctx context.Context, in *RevokeIAMRequest, opts ...grpc.CallOption) (*RevokeIAMResponse, error) {
	out := new(RevokeIAMResponse)
	err := c.cc.Invoke(ctx, IAMService_RevokeIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetIAM(ctx context.Context, in *GetIAMRequest, opts ...grpc.CallOption) (*IAM, error) {
	out := new(IAM)
	err := c.cc.Invoke(ctx, IAMService_GetIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListIAMPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListIAMPermissionsResponse, error) {
	out := new(ListIAMPermissionsResponse)
	err := c.cc.Invoke(ctx, IAMService_ListIAMPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateIAM(ctx context.Context, in *UpdateIAMRequest, opts ...grpc.CallOption) (*IAM, error) {
	out := new(IAM)
	err := c.cc.Invoke(ctx, IAMService_UpdateIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteIAM(ctx context.Context, in *DeleteIAMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IAMService_DeleteIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListIAM(ctx context.Context, in *ListIAMRequest, opts ...grpc.CallOption) (*ListIAMResponse, error) {
	out := new(ListIAMResponse)
	err := c.cc.Invoke(ctx, IAMService_ListIAM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMServiceServer is the server API for IAMService service.
// All implementations must embed UnimplementedIAMServiceServer
// for forward compatibility
type IAMServiceServer interface {
	// CreateIAM API creates a new IAM role-binding.
	CreateIAM(context.Context, *CreateIAMRequest) (*IAM, error)
	// GrantIAM API creates new IAM role-binding at tenant, project and account level.
	GrantIAM(context.Context, *GrantIAMRequest) (*GrantIAMResponse, error)
	// RevokeIAM API delete IAM role-binding at tenant, project and account level.
	RevokeIAM(context.Context, *RevokeIAMRequest) (*RevokeIAMResponse, error)
	// GetIAM API returns the info about IAM for given IAM id.
	GetIAM(context.Context, *GetIAMRequest) (*IAM, error)
	// ListIAMPermissions API list permissions for Roles in IAM.
	// (-- api-linter: core::0132::request-message-name=disabled
	//
	//	aip.dev/not-precedent: We need to do this because reasons. we don't need any parameter in request --)
	ListIAMPermissions(context.Context, *emptypb.Empty) (*ListIAMPermissionsResponse, error)
	// UpdateIAM API updates IAM with the new set of role bindings. The request replaces the existing set of bindings.
	UpdateIAM(context.Context, *UpdateIAMRequest) (*IAM, error)
	// DeleteIAM API delete IAM, currently required only for name.
	DeleteIAM(context.Context, *DeleteIAMRequest) (*emptypb.Empty, error)
	// ListIAM API lists the role bindings.
	ListIAM(context.Context, *ListIAMRequest) (*ListIAMResponse, error)
	mustEmbedUnimplementedIAMServiceServer()
}

// UnimplementedIAMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMServiceServer struct {
}

func (UnimplementedIAMServiceServer) CreateIAM(context.Context, *CreateIAMRequest) (*IAM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIAM not implemented")
}
func (UnimplementedIAMServiceServer) GrantIAM(context.Context, *GrantIAMRequest) (*GrantIAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantIAM not implemented")
}
func (UnimplementedIAMServiceServer) RevokeIAM(context.Context, *RevokeIAMRequest) (*RevokeIAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeIAM not implemented")
}
func (UnimplementedIAMServiceServer) GetIAM(context.Context, *GetIAMRequest) (*IAM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIAM not implemented")
}
func (UnimplementedIAMServiceServer) ListIAMPermissions(context.Context, *emptypb.Empty) (*ListIAMPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMPermissions not implemented")
}
func (UnimplementedIAMServiceServer) UpdateIAM(context.Context, *UpdateIAMRequest) (*IAM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIAM not implemented")
}
func (UnimplementedIAMServiceServer) DeleteIAM(context.Context, *DeleteIAMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIAM not implemented")
}
func (UnimplementedIAMServiceServer) ListIAM(context.Context, *ListIAMRequest) (*ListIAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAM not implemented")
}
func (UnimplementedIAMServiceServer) mustEmbedUnimplementedIAMServiceServer() {}

// UnsafeIAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMServiceServer will
// result in compilation errors.
type UnsafeIAMServiceServer interface {
	mustEmbedUnimplementedIAMServiceServer()
}

func RegisterIAMServiceServer(s grpc.ServiceRegistrar, srv IAMServiceServer) {
	s.RegisterService(&IAMService_ServiceDesc, srv)
}

func _IAMService_CreateIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_CreateIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateIAM(ctx, req.(*CreateIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GrantIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GrantIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GrantIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GrantIAM(ctx, req.(*GrantIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_RevokeIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).RevokeIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_RevokeIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).RevokeIAM(ctx, req.(*RevokeIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_GetIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetIAM(ctx, req.(*GetIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListIAMPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListIAMPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListIAMPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListIAMPermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_UpdateIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateIAM(ctx, req.(*UpdateIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_DeleteIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteIAM(ctx, req.(*DeleteIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListIAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListIAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IAMService_ListIAM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListIAM(ctx, req.(*ListIAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMService_ServiceDesc is the grpc.ServiceDesc for IAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.iam.v1.IAMService",
	HandlerType: (*IAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIAM",
			Handler:    _IAMService_CreateIAM_Handler,
		},
		{
			MethodName: "GrantIAM",
			Handler:    _IAMService_GrantIAM_Handler,
		},
		{
			MethodName: "RevokeIAM",
			Handler:    _IAMService_RevokeIAM_Handler,
		},
		{
			MethodName: "GetIAM",
			Handler:    _IAMService_GetIAM_Handler,
		},
		{
			MethodName: "ListIAMPermissions",
			Handler:    _IAMService_ListIAMPermissions_Handler,
		},
		{
			MethodName: "UpdateIAM",
			Handler:    _IAMService_UpdateIAM_Handler,
		},
		{
			MethodName: "DeleteIAM",
			Handler:    _IAMService_DeleteIAM_Handler,
		},
		{
			MethodName: "ListIAM",
			Handler:    _IAMService_ListIAM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/iam/apiv1/iam.proto",
}
