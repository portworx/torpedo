// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/backuplocation/apiv1/backuplocation.proto

package backuplocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackupLocationService_GetBackupLocation_FullMethodName    = "/public.portworx.platform.backuplocation.v1.BackupLocationService/GetBackupLocation"
	BackupLocationService_CreateBackupLocation_FullMethodName = "/public.portworx.platform.backuplocation.v1.BackupLocationService/CreateBackupLocation"
	BackupLocationService_UpdateBackupLocation_FullMethodName = "/public.portworx.platform.backuplocation.v1.BackupLocationService/UpdateBackupLocation"
	BackupLocationService_ListBackupLocations_FullMethodName  = "/public.portworx.platform.backuplocation.v1.BackupLocationService/ListBackupLocations"
	BackupLocationService_DeleteBackupLocation_FullMethodName = "/public.portworx.platform.backuplocation.v1.BackupLocationService/DeleteBackupLocation"
)

// BackupLocationServiceClient is the client API for BackupLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupLocationServiceClient interface {
	// Get API returns the backup location.
	GetBackupLocation(ctx context.Context, in *GetBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error)
	// Create API creates a backup location for a tenant.
	CreateBackupLocation(ctx context.Context, in *CreateBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error)
	// Update API updates a backup location.
	UpdateBackupLocation(ctx context.Context, in *UpdateBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// List API lists all the backup locations for a tenant.
	ListBackupLocations(ctx context.Context, in *ListBackupLocationsRequest, opts ...grpc.CallOption) (*ListBackupLocationsResponse, error)
	// Delete API deletes a backup location.
	DeleteBackupLocation(ctx context.Context, in *DeleteBackupLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backupLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupLocationServiceClient(cc grpc.ClientConnInterface) BackupLocationServiceClient {
	return &backupLocationServiceClient{cc}
}

func (c *backupLocationServiceClient) GetBackupLocation(ctx context.Context, in *GetBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error) {
	out := new(BackupLocation)
	err := c.cc.Invoke(ctx, BackupLocationService_GetBackupLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationServiceClient) CreateBackupLocation(ctx context.Context, in *CreateBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error) {
	out := new(BackupLocation)
	err := c.cc.Invoke(ctx, BackupLocationService_CreateBackupLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationServiceClient) UpdateBackupLocation(ctx context.Context, in *UpdateBackupLocationRequest, opts ...grpc.CallOption) (*BackupLocation, error) {
	out := new(BackupLocation)
	err := c.cc.Invoke(ctx, BackupLocationService_UpdateBackupLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationServiceClient) ListBackupLocations(ctx context.Context, in *ListBackupLocationsRequest, opts ...grpc.CallOption) (*ListBackupLocationsResponse, error) {
	out := new(ListBackupLocationsResponse)
	err := c.cc.Invoke(ctx, BackupLocationService_ListBackupLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupLocationServiceClient) DeleteBackupLocation(ctx context.Context, in *DeleteBackupLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BackupLocationService_DeleteBackupLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupLocationServiceServer is the server API for BackupLocationService service.
// All implementations must embed UnimplementedBackupLocationServiceServer
// for forward compatibility
type BackupLocationServiceServer interface {
	// Get API returns the backup location.
	GetBackupLocation(context.Context, *GetBackupLocationRequest) (*BackupLocation, error)
	// Create API creates a backup location for a tenant.
	CreateBackupLocation(context.Context, *CreateBackupLocationRequest) (*BackupLocation, error)
	// Update API updates a backup location.
	UpdateBackupLocation(context.Context, *UpdateBackupLocationRequest) (*BackupLocation, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because
	//
	// we can't have advance filters as query params.
	// --)
	// List API lists all the backup locations for a tenant.
	ListBackupLocations(context.Context, *ListBackupLocationsRequest) (*ListBackupLocationsResponse, error)
	// Delete API deletes a backup location.
	DeleteBackupLocation(context.Context, *DeleteBackupLocationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBackupLocationServiceServer()
}

// UnimplementedBackupLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackupLocationServiceServer struct {
}

func (UnimplementedBackupLocationServiceServer) GetBackupLocation(context.Context, *GetBackupLocationRequest) (*BackupLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupLocation not implemented")
}
func (UnimplementedBackupLocationServiceServer) CreateBackupLocation(context.Context, *CreateBackupLocationRequest) (*BackupLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupLocation not implemented")
}
func (UnimplementedBackupLocationServiceServer) UpdateBackupLocation(context.Context, *UpdateBackupLocationRequest) (*BackupLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupLocation not implemented")
}
func (UnimplementedBackupLocationServiceServer) ListBackupLocations(context.Context, *ListBackupLocationsRequest) (*ListBackupLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupLocations not implemented")
}
func (UnimplementedBackupLocationServiceServer) DeleteBackupLocation(context.Context, *DeleteBackupLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupLocation not implemented")
}
func (UnimplementedBackupLocationServiceServer) mustEmbedUnimplementedBackupLocationServiceServer() {}

// UnsafeBackupLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupLocationServiceServer will
// result in compilation errors.
type UnsafeBackupLocationServiceServer interface {
	mustEmbedUnimplementedBackupLocationServiceServer()
}

func RegisterBackupLocationServiceServer(s grpc.ServiceRegistrar, srv BackupLocationServiceServer) {
	s.RegisterService(&BackupLocationService_ServiceDesc, srv)
}

func _BackupLocationService_GetBackupLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServiceServer).GetBackupLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupLocationService_GetBackupLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServiceServer).GetBackupLocation(ctx, req.(*GetBackupLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocationService_CreateBackupLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServiceServer).CreateBackupLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupLocationService_CreateBackupLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServiceServer).CreateBackupLocation(ctx, req.(*CreateBackupLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocationService_UpdateBackupLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServiceServer).UpdateBackupLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupLocationService_UpdateBackupLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServiceServer).UpdateBackupLocation(ctx, req.(*UpdateBackupLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocationService_ListBackupLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServiceServer).ListBackupLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupLocationService_ListBackupLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServiceServer).ListBackupLocations(ctx, req.(*ListBackupLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupLocationService_DeleteBackupLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupLocationServiceServer).DeleteBackupLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupLocationService_DeleteBackupLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupLocationServiceServer).DeleteBackupLocation(ctx, req.(*DeleteBackupLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackupLocationService_ServiceDesc is the grpc.ServiceDesc for BackupLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.backuplocation.v1.BackupLocationService",
	HandlerType: (*BackupLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBackupLocation",
			Handler:    _BackupLocationService_GetBackupLocation_Handler,
		},
		{
			MethodName: "CreateBackupLocation",
			Handler:    _BackupLocationService_CreateBackupLocation_Handler,
		},
		{
			MethodName: "UpdateBackupLocation",
			Handler:    _BackupLocationService_UpdateBackupLocation_Handler,
		},
		{
			MethodName: "ListBackupLocations",
			Handler:    _BackupLocationService_ListBackupLocations_Handler,
		},
		{
			MethodName: "DeleteBackupLocation",
			Handler:    _BackupLocationService_DeleteBackupLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/backuplocation/apiv1/backuplocation.proto",
}
