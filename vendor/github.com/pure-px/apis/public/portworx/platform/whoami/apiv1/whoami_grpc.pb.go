// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/whoami/apiv1/whoami.proto

package whoami

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WhoAmIService_WhoAmI_FullMethodName            = "/public.portworx.platform.whoami.v1.WhoAmIService/WhoAmI"
	WhoAmIService_InvitationsWhoAmI_FullMethodName = "/public.portworx.platform.whoami.v1.WhoAmIService/InvitationsWhoAmI"
)

// WhoAmIServiceClient is the client API for WhoAmIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhoAmIServiceClient interface {
	// WhoAmI API returns the current actor accounts.
	WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	// InvitationsWhoAmI API returns the current actor pending invitations cross accounts.
	InvitationsWhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoAmIResponse, error)
}

type whoAmIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhoAmIServiceClient(cc grpc.ClientConnInterface) WhoAmIServiceClient {
	return &whoAmIServiceClient{cc}
}

func (c *whoAmIServiceClient) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, WhoAmIService_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whoAmIServiceClient) InvitationsWhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, WhoAmIService_InvitationsWhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhoAmIServiceServer is the server API for WhoAmIService service.
// All implementations must embed UnimplementedWhoAmIServiceServer
// for forward compatibility
type WhoAmIServiceServer interface {
	// WhoAmI API returns the current actor accounts.
	WhoAmI(context.Context, *emptypb.Empty) (*WhoAmIResponse, error)
	// InvitationsWhoAmI API returns the current actor pending invitations cross accounts.
	InvitationsWhoAmI(context.Context, *emptypb.Empty) (*WhoAmIResponse, error)
	mustEmbedUnimplementedWhoAmIServiceServer()
}

// UnimplementedWhoAmIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhoAmIServiceServer struct {
}

func (UnimplementedWhoAmIServiceServer) WhoAmI(context.Context, *emptypb.Empty) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedWhoAmIServiceServer) InvitationsWhoAmI(context.Context, *emptypb.Empty) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvitationsWhoAmI not implemented")
}
func (UnimplementedWhoAmIServiceServer) mustEmbedUnimplementedWhoAmIServiceServer() {}

// UnsafeWhoAmIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhoAmIServiceServer will
// result in compilation errors.
type UnsafeWhoAmIServiceServer interface {
	mustEmbedUnimplementedWhoAmIServiceServer()
}

func RegisterWhoAmIServiceServer(s grpc.ServiceRegistrar, srv WhoAmIServiceServer) {
	s.RegisterService(&WhoAmIService_ServiceDesc, srv)
}

func _WhoAmIService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhoAmIServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhoAmIService_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhoAmIServiceServer).WhoAmI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhoAmIService_InvitationsWhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhoAmIServiceServer).InvitationsWhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhoAmIService_InvitationsWhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhoAmIServiceServer).InvitationsWhoAmI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WhoAmIService_ServiceDesc is the grpc.ServiceDesc for WhoAmIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhoAmIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.whoami.v1.WhoAmIService",
	HandlerType: (*WhoAmIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _WhoAmIService_WhoAmI_Handler,
		},
		{
			MethodName: "InvitationsWhoAmI",
			Handler:    _WhoAmIService_InvitationsWhoAmI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/whoami/apiv1/whoami.proto",
}
