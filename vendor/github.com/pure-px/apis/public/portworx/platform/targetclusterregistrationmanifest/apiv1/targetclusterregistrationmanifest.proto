// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.platform.targetclusterregistrationmanifest.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

option go_package = "github.com/pure-px/apis/public/portworx/platform/targetclusterregistrationmanifest/apiv1;targetclusterregistrationmanifest";
option java_multiple_files = true;
option java_package = "com.public.portworx.platform.targetclusterregistrationmanifest.v1";
option java_outer_classname = "TargetClusterRegistrationManifestProto";

// TargetClusterRegistrationManifestService provides API to generate registration manifest
service TargetClusterRegistrationManifestService {
  // GetTargetClusterRegistrationManifest fetches registration manifest for the given request
  rpc GenerateTargetClusterRegistrationManifest(GenerateTargetClusterRegistrationManifestRequest)
      returns (TargetClusterRegistrationManifest) {
    option(google.api.http) = {
      post: "/v1/tenants/{tenant_id}:registrationManifests"
      body: "*"
    };
  }
}

// GetTargetClusterRegistrationManifestRequest is the request message to the GetTargetClusterRegistrationManifest API
message GenerateTargetClusterRegistrationManifestRequest {
  // tenanat_id is the id of the tenant for which manifest is requested
  string tenant_id = 1;
  // cluster_name which the user wants to use
  string cluster_name = 2 [(google.api.field_behavior) = OPTIONAL];
  // Config for generating the manifest
  Config config = 3;
}

// TargetClusterRegistrationManifest is the response message of the GetTargetClusterRegistrationManifest API
message TargetClusterRegistrationManifest {
  // manifest contains the yaml string of the registration manifest
  string manifest = 1;
}

// Configuration of the target cluster registration manifest
message Config {
  // custom image registry credential configs
  CustomImageRegistryConfig custom_image_registry_config = 1;
  // custom proxy configs
  ProxyConfig proxy_config = 2;
}

// CustomImageRegistryConfig holds image registry credential configs
message CustomImageRegistryConfig {
  // registry url/domain, e.g. - in org.example.com/namespace/sub-namespace/repo:tag, here `org.example.com` is
  // the registry url
  string registry_url = 1;
  // registry namespace, e.g. - in org.example.com/namespace/sub-namespace/repo:tag, here `namespace/sub-namespace` is
  // the registry namespace
  string registry_namespace = 2;
  // username for authenticating to a private registry
  string username = 3;
  // password for authenticating to a private registry
  string password = 4;
  // ca cert of the registry server
  string ca_cert = 5;
}

// ProxyConfig holds proxy configs
message ProxyConfig {
  // http proxy url with port, e.g. - http://192.168.0.1:1234
  string http_url = 1;
  // https proxy url with port, e.g. - https://192.168.0.1:4567
  string https_url = 2;
  // username for authenticating to the proxy server
  string username = 3;
  // password for authenticating to the proxy server
  string password = 4;
  // comma separated no proxy urls list, e.g. - 127.0.0.1,localhost,.svc,192.168.0.1/16,github.com,KUBERNETES_SERVICE_HOST
  string no_proxy = 5;
  // ca cert of the proxy server
  string ca_cert = 6;
}
