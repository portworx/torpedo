// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: public/portworx/platform/targetclusterregistrationmanifest/apiv1/targetclusterregistrationmanifest.proto

package targetclusterregistrationmanifest

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetTargetClusterRegistrationManifestRequest is the request message to the GetTargetClusterRegistrationManifest API.
type GenerateTargetClusterRegistrationManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tenanat_id is the id of the tenant for which manifest is requested.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// cluster_name which the user wants to use.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Config for generating the manifest.
	Config *Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GenerateTargetClusterRegistrationManifestRequest) Reset() {
	*x = GenerateTargetClusterRegistrationManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTargetClusterRegistrationManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTargetClusterRegistrationManifestRequest) ProtoMessage() {}

func (x *GenerateTargetClusterRegistrationManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTargetClusterRegistrationManifestRequest.ProtoReflect.Descriptor instead.
func (*GenerateTargetClusterRegistrationManifestRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateTargetClusterRegistrationManifestRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GenerateTargetClusterRegistrationManifestRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GenerateTargetClusterRegistrationManifestRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// TargetClusterRegistrationManifest is the response message of the GetTargetClusterRegistrationManifest API.
type TargetClusterRegistrationManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// manifest contains the yaml string of the registration manifest.
	Manifest string `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
}

func (x *TargetClusterRegistrationManifest) Reset() {
	*x = TargetClusterRegistrationManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetClusterRegistrationManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetClusterRegistrationManifest) ProtoMessage() {}

func (x *TargetClusterRegistrationManifest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetClusterRegistrationManifest.ProtoReflect.Descriptor instead.
func (*TargetClusterRegistrationManifest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP(), []int{1}
}

func (x *TargetClusterRegistrationManifest) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

// Configuration of the target cluster registration manifest.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// custom image registry credential configs.
	CustomImageRegistryConfig *CustomImageRegistryConfig `protobuf:"bytes,1,opt,name=custom_image_registry_config,json=customImageRegistryConfig,proto3" json:"custom_image_registry_config,omitempty"`
	// custom proxy configs.
	ProxyConfig *ProxyConfig `protobuf:"bytes,2,opt,name=proxy_config,json=proxyConfig,proto3" json:"proxy_config,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetCustomImageRegistryConfig() *CustomImageRegistryConfig {
	if x != nil {
		return x.CustomImageRegistryConfig
	}
	return nil
}

func (x *Config) GetProxyConfig() *ProxyConfig {
	if x != nil {
		return x.ProxyConfig
	}
	return nil
}

// CustomImageRegistryConfig holds image registry credential configs.
type CustomImageRegistryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// registry url/domain, e.g. - in org.example.com/namespace/sub-namespace/repo:tag, here `org.example.com` is
	// the registry url.
	RegistryUrl string `protobuf:"bytes,1,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"`
	// registry namespace, e.g. - in org.example.com/namespace/sub-namespace/repo:tag, here `namespace/sub-namespace` is
	// the registry namespace.
	RegistryNamespace string `protobuf:"bytes,2,opt,name=registry_namespace,json=registryNamespace,proto3" json:"registry_namespace,omitempty"`
	// username for authenticating to a private registry.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// password for authenticating to a private registry.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// ca cert of the registry server.
	CaCert string `protobuf:"bytes,5,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
}

func (x *CustomImageRegistryConfig) Reset() {
	*x = CustomImageRegistryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomImageRegistryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomImageRegistryConfig) ProtoMessage() {}

func (x *CustomImageRegistryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomImageRegistryConfig.ProtoReflect.Descriptor instead.
func (*CustomImageRegistryConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP(), []int{3}
}

func (x *CustomImageRegistryConfig) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *CustomImageRegistryConfig) GetRegistryNamespace() string {
	if x != nil {
		return x.RegistryNamespace
	}
	return ""
}

func (x *CustomImageRegistryConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CustomImageRegistryConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CustomImageRegistryConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

// ProxyConfig holds proxy configs.
type ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http proxy url with port, e.g. - http://192.168.0.1:1234.
	HttpUrl string `protobuf:"bytes,1,opt,name=http_url,json=httpUrl,proto3" json:"http_url,omitempty"`
	// https proxy url with port, e.g. - https://192.168.0.1:4567.
	HttpsUrl string `protobuf:"bytes,2,opt,name=https_url,json=httpsUrl,proto3" json:"https_url,omitempty"`
	// username for authenticating to the proxy server.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// password for authenticating to the proxy server.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// comma separated no proxy urls list, e.g. - 127.0.0.1,localhost,.svc,192.168.0.1/16,github.com,KUBERNETES_SERVICE_HOST.
	NoProxy string `protobuf:"bytes,5,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty"`
	// ca cert of the proxy server.
	CaCert string `protobuf:"bytes,6,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
}

func (x *ProxyConfig) Reset() {
	*x = ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfig) ProtoMessage() {}

func (x *ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfig.ProtoReflect.Descriptor instead.
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP(), []int{4}
}

func (x *ProxyConfig) GetHttpUrl() string {
	if x != nil {
		return x.HttpUrl
	}
	return ""
}

func (x *ProxyConfig) GetHttpsUrl() string {
	if x != nil {
		return x.HttpsUrl
	}
	return ""
}

func (x *ProxyConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ProxyConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ProxyConfig) GetNoProxy() string {
	if x != nil {
		return x.NoProxy
	}
	return ""
}

func (x *ProxyConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

var File_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto protoreflect.FileDescriptor

var file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDesc = []byte{
	0x0a, 0x68, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x30, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x3f, 0x0a, 0x21, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01,
	0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x32, 0xea, 0x02,
	0x0a, 0x28, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbd, 0x02, 0x0a, 0x29, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x60, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x42, 0xe9, 0x01, 0x0a, 0x41, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x26, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x3b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescOnce sync.Once
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescData = file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDesc
)

func file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescGZIP() []byte {
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescOnce.Do(func() {
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescData)
	})
	return file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDescData
}

var file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_goTypes = []interface{}{
	(*GenerateTargetClusterRegistrationManifestRequest)(nil), // 0: public.portworx.platform.targetclusterregistrationmanifest.v1.GenerateTargetClusterRegistrationManifestRequest
	(*TargetClusterRegistrationManifest)(nil),                // 1: public.portworx.platform.targetclusterregistrationmanifest.v1.TargetClusterRegistrationManifest
	(*Config)(nil),                    // 2: public.portworx.platform.targetclusterregistrationmanifest.v1.Config
	(*CustomImageRegistryConfig)(nil), // 3: public.portworx.platform.targetclusterregistrationmanifest.v1.CustomImageRegistryConfig
	(*ProxyConfig)(nil),               // 4: public.portworx.platform.targetclusterregistrationmanifest.v1.ProxyConfig
}
var file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_depIdxs = []int32{
	2, // 0: public.portworx.platform.targetclusterregistrationmanifest.v1.GenerateTargetClusterRegistrationManifestRequest.config:type_name -> public.portworx.platform.targetclusterregistrationmanifest.v1.Config
	3, // 1: public.portworx.platform.targetclusterregistrationmanifest.v1.Config.custom_image_registry_config:type_name -> public.portworx.platform.targetclusterregistrationmanifest.v1.CustomImageRegistryConfig
	4, // 2: public.portworx.platform.targetclusterregistrationmanifest.v1.Config.proxy_config:type_name -> public.portworx.platform.targetclusterregistrationmanifest.v1.ProxyConfig
	0, // 3: public.portworx.platform.targetclusterregistrationmanifest.v1.TargetClusterRegistrationManifestService.GenerateTargetClusterRegistrationManifest:input_type -> public.portworx.platform.targetclusterregistrationmanifest.v1.GenerateTargetClusterRegistrationManifestRequest
	1, // 4: public.portworx.platform.targetclusterregistrationmanifest.v1.TargetClusterRegistrationManifestService.GenerateTargetClusterRegistrationManifest:output_type -> public.portworx.platform.targetclusterregistrationmanifest.v1.TargetClusterRegistrationManifest
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_init()
}
func file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_init() {
	if File_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTargetClusterRegistrationManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetClusterRegistrationManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomImageRegistryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_goTypes,
		DependencyIndexes: file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_depIdxs,
		MessageInfos:      file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_msgTypes,
	}.Build()
	File_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto = out.File
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_rawDesc = nil
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_goTypes = nil
	file_public_portworx_platform_targetclusterregistrationmanifest_apiv1_targetclusterregistrationmanifest_proto_depIdxs = nil
}
