// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/platform/cloudcredential/apiv1/cloudcredential.proto

package cloudcredential

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudCredentialService_GetCloudCredential_FullMethodName    = "/public.portworx.platform.cloudcredential.v1.CloudCredentialService/GetCloudCredential"
	CloudCredentialService_CreateCloudCredential_FullMethodName = "/public.portworx.platform.cloudcredential.v1.CloudCredentialService/CreateCloudCredential"
	CloudCredentialService_UpdateCloudCredential_FullMethodName = "/public.portworx.platform.cloudcredential.v1.CloudCredentialService/UpdateCloudCredential"
	CloudCredentialService_ListCloudCredentials_FullMethodName  = "/public.portworx.platform.cloudcredential.v1.CloudCredentialService/ListCloudCredentials"
	CloudCredentialService_DeleteCloudCredential_FullMethodName = "/public.portworx.platform.cloudcredential.v1.CloudCredentialService/DeleteCloudCredential"
)

// CloudCredentialServiceClient is the client API for CloudCredentialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudCredentialServiceClient interface {
	// Get API returns the cloud credential details sans the actual credentials.
	GetCloudCredential(ctx context.Context, in *GetCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error)
	// Create API creates a set of cloud credentials for a tenant.
	CreateCloudCredential(ctx context.Context, in *CreateCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error)
	// Update API updates a cloud credential.
	UpdateCloudCredential(ctx context.Context, in *UpdateCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because we can't have advance filters as query params. --)
	//
	// List API lists all the cloud credentials for a tenant.
	ListCloudCredentials(ctx context.Context, in *ListCloudCredentialsRequest, opts ...grpc.CallOption) (*ListCloudCredentialsResponse, error)
	// Delete API deletes the cloud credentials.
	DeleteCloudCredential(ctx context.Context, in *DeleteCloudCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudCredentialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudCredentialServiceClient(cc grpc.ClientConnInterface) CloudCredentialServiceClient {
	return &cloudCredentialServiceClient{cc}
}

func (c *cloudCredentialServiceClient) GetCloudCredential(ctx context.Context, in *GetCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error) {
	out := new(CloudCredential)
	err := c.cc.Invoke(ctx, CloudCredentialService_GetCloudCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialServiceClient) CreateCloudCredential(ctx context.Context, in *CreateCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error) {
	out := new(CloudCredential)
	err := c.cc.Invoke(ctx, CloudCredentialService_CreateCloudCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialServiceClient) UpdateCloudCredential(ctx context.Context, in *UpdateCloudCredentialRequest, opts ...grpc.CallOption) (*CloudCredential, error) {
	out := new(CloudCredential)
	err := c.cc.Invoke(ctx, CloudCredentialService_UpdateCloudCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialServiceClient) ListCloudCredentials(ctx context.Context, in *ListCloudCredentialsRequest, opts ...grpc.CallOption) (*ListCloudCredentialsResponse, error) {
	out := new(ListCloudCredentialsResponse)
	err := c.cc.Invoke(ctx, CloudCredentialService_ListCloudCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCredentialServiceClient) DeleteCloudCredential(ctx context.Context, in *DeleteCloudCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudCredentialService_DeleteCloudCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudCredentialServiceServer is the server API for CloudCredentialService service.
// All implementations must embed UnimplementedCloudCredentialServiceServer
// for forward compatibility
type CloudCredentialServiceServer interface {
	// Get API returns the cloud credential details sans the actual credentials.
	GetCloudCredential(context.Context, *GetCloudCredentialRequest) (*CloudCredential, error)
	// Create API creates a set of cloud credentials for a tenant.
	CreateCloudCredential(context.Context, *CreateCloudCredentialRequest) (*CloudCredential, error)
	// Update API updates a cloud credential.
	UpdateCloudCredential(context.Context, *UpdateCloudCredentialRequest) (*CloudCredential, error)
	// (-- api-linter: core::0132::http-body=disabled
	//
	//	api-linter: core::0132::http-method=disabled
	//	aip.dev/not-precedent: We need to do this because we can't have advance filters as query params. --)
	//
	// List API lists all the cloud credentials for a tenant.
	ListCloudCredentials(context.Context, *ListCloudCredentialsRequest) (*ListCloudCredentialsResponse, error)
	// Delete API deletes the cloud credentials.
	DeleteCloudCredential(context.Context, *DeleteCloudCredentialRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudCredentialServiceServer()
}

// UnimplementedCloudCredentialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudCredentialServiceServer struct {
}

func (UnimplementedCloudCredentialServiceServer) GetCloudCredential(context.Context, *GetCloudCredentialRequest) (*CloudCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudCredential not implemented")
}
func (UnimplementedCloudCredentialServiceServer) CreateCloudCredential(context.Context, *CreateCloudCredentialRequest) (*CloudCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudCredential not implemented")
}
func (UnimplementedCloudCredentialServiceServer) UpdateCloudCredential(context.Context, *UpdateCloudCredentialRequest) (*CloudCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudCredential not implemented")
}
func (UnimplementedCloudCredentialServiceServer) ListCloudCredentials(context.Context, *ListCloudCredentialsRequest) (*ListCloudCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudCredentials not implemented")
}
func (UnimplementedCloudCredentialServiceServer) DeleteCloudCredential(context.Context, *DeleteCloudCredentialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudCredential not implemented")
}
func (UnimplementedCloudCredentialServiceServer) mustEmbedUnimplementedCloudCredentialServiceServer() {
}

// UnsafeCloudCredentialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudCredentialServiceServer will
// result in compilation errors.
type UnsafeCloudCredentialServiceServer interface {
	mustEmbedUnimplementedCloudCredentialServiceServer()
}

func RegisterCloudCredentialServiceServer(s grpc.ServiceRegistrar, srv CloudCredentialServiceServer) {
	s.RegisterService(&CloudCredentialService_ServiceDesc, srv)
}

func _CloudCredentialService_GetCloudCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServiceServer).GetCloudCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCredentialService_GetCloudCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServiceServer).GetCloudCredential(ctx, req.(*GetCloudCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredentialService_CreateCloudCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServiceServer).CreateCloudCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCredentialService_CreateCloudCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServiceServer).CreateCloudCredential(ctx, req.(*CreateCloudCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredentialService_UpdateCloudCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServiceServer).UpdateCloudCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCredentialService_UpdateCloudCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServiceServer).UpdateCloudCredential(ctx, req.(*UpdateCloudCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredentialService_ListCloudCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServiceServer).ListCloudCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCredentialService_ListCloudCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServiceServer).ListCloudCredentials(ctx, req.(*ListCloudCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCredentialService_DeleteCloudCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCredentialServiceServer).DeleteCloudCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCredentialService_DeleteCloudCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCredentialServiceServer).DeleteCloudCredential(ctx, req.(*DeleteCloudCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudCredentialService_ServiceDesc is the grpc.ServiceDesc for CloudCredentialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudCredentialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.platform.cloudcredential.v1.CloudCredentialService",
	HandlerType: (*CloudCredentialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCloudCredential",
			Handler:    _CloudCredentialService_GetCloudCredential_Handler,
		},
		{
			MethodName: "CreateCloudCredential",
			Handler:    _CloudCredentialService_CreateCloudCredential_Handler,
		},
		{
			MethodName: "UpdateCloudCredential",
			Handler:    _CloudCredentialService_UpdateCloudCredential_Handler,
		},
		{
			MethodName: "ListCloudCredentials",
			Handler:    _CloudCredentialService_ListCloudCredentials_Handler,
		},
		{
			MethodName: "DeleteCloudCredential",
			Handler:    _CloudCredentialService_DeleteCloudCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/platform/cloudcredential/apiv1/cloudcredential.proto",
}
