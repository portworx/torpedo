// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//
syntax = "proto3";

package public.portworx.platform.cloudcredential.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "public/portworx/common/apiv1/meta.proto";
import "public/portworx/common/apiv1/pagination.proto";
import "public/portworx/common/apiv1/selector.proto";
import "public/portworx/common/apiv1/sort.proto";

option go_package = "github.com/pure-px/apis/public/portworx/platform/cloudcredential/apiv1;cloudcredential";
option java_multiple_files = true;
option java_package = "com.public.portworx.platform.cloudcredential.v1";
option java_outer_classname = "CloudCredentialProto";

// CloudCredentialService serves and manages cloud credentials
service CloudCredentialService {
  // Get API returns the cloud credential details sans the actual credentials
  rpc GetCloudCredential(GetCloudCredentialRequest)
    returns(CloudCredential) {
    option(google.api.http) = {
      get: "/v1/cloudcredentials/{id}"
    };
  }

  // Create API creates a set of cloud credentials for a tenant
  rpc CreateCloudCredential(CreateCloudCredentialRequest)
    returns(CloudCredential) {
    option(google.api.http) = {
      post: "/v1/tenants/{tenant_id}/cloudCredentials"
      body: "cloud_credential"
    };
  }

  // Update API updates a cloud credential
  rpc UpdateCloudCredential(UpdateCloudCredentialRequest)
    returns(CloudCredential) {
    option(google.api.http) = {
      put: "/v1/cloudCredentials/{id}"
      body: "cloud_credential"
    };
  }

  // (-- api-linter: core::0132::http-body=disabled
  //     api-linter: core::0132::http-method=disabled
  //     aip.dev/not-precedent: We need to do this because we can't have advance filters as query params. --)
  // List API lists all the cloud credentials for a tenant
  rpc ListCloudCredentials(ListCloudCredentialsRequest)
    returns(ListCloudCredentialsResponse) {
    option(google.api.http) = {
      get: "/v1/cloudCredentials"
      additional_bindings: {
        post: "/v1/cloudCredentials:search"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List API lists all the cloud credentials for a tenant"
  };
  }

  // Delete API deletes the cloud credentials
  rpc DeleteCloudCredential(DeleteCloudCredentialRequest)
    returns(google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/v1/cloudCredentials/{id}"
    };
  }
}

// Resource representing a Cloud Credential
message CloudCredential {
  // Metadata of the resource
  portworx.common.v1.Meta meta = 1;

  // Desired configuration of the Cloud Credential.
  Config config = 2;
}

// Desired configuration of the Cloud Credential.
message Config {
  // Type of cloud credential
  Provider provider = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Credential details
  oneof Credentials {
    // Azure Credentials
    AzureCredentials azure_credentials = 2;

    // Google Credentials
    GoogleCredentials google_credentials = 3;

    // S3 or S3 compatible credentials
    S3Credentials s3_credentials = 4;

    // Untructured credentials
    UnstructuredCredentials unstructured_credentials = 5;
  }
}

// Provider associated with created credentials
message Provider {
  // Type of provider
  enum Type {
    // Type unspecified
    TYPE_UNSPECIFIED = 0;

    // Azure Cloud
    AZURE = 1;

    // Google Cloud
    GOOGLE = 2;

    // S3 Compatible
    S3COMPATIBLE = 3;

    // Unstructured credentials
    UNSTRUCTURED  = 4;
  }

  // Type of cloud credential
  Type cloud_provider = 1;
}

// Azure Credentials
message AzureCredentials {
  // Name of account
  string storage_account_name = 1 [json_name = "config/azure/storage_account_name"];

  // Key used to connect
  string storage_account_key = 2 [json_name = "config/azure/storage_account_key"];
}

// Unstructured Credentials
message UnstructuredCredentials {
  // Credentials in key value format
  map<string, string> credential_data = 1 [json_name = "config/unstructured/credential_data"];
}

// Google Credentials
message GoogleCredentials {
  // Project ID
  string project_id = 1 [json_name = "config/google/project_id"];

  // JSON Key used to connect
  string json_key = 2 [json_name = "config/google/json_key"];
}

// S3 or S3 compatible credentials
message S3Credentials {
  // Access key used to connect
  string access_key = 1 [json_name = "config/s3/access_key"];

  // Secret key used to connect
  string secret_key = 2 [json_name = "config/s3/secret_key"];
}

// Request to get a cloud credential
message GetCloudCredentialRequest {
  // ID of the cloud credential
  string id = 1;

  // Specifies option to include configuration details
  // excluding sensitive information
  bool include_config = 2;
}

// Request to create a cloud credential
message CreateCloudCredentialRequest {
  // The parent tenant id under which cloud credential will be created
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for to support creation of
  //     the resource in the tenant context. --)
  string tenant_id = 1;

  // Cloud credential configuration
  CloudCredential cloud_credential = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request to update a cloud credential
message UpdateCloudCredentialRequest {

  // Specifies the field that should be updated to the value specified in
  // cloud_credentials
  google.protobuf.FieldMask update_mask = 1;

  // id of the cloud credential to be updated
  string id = 2;

  // Desired cloud credential configuration
  CloudCredential cloud_credential = 3;

}

// Request to list the cloud credentials for a tenant or a project
message ListCloudCredentialsRequest {
  // Tenant ID for which the credentials will be listed
  string tenant_id = 1;
  // Pagination metadata for this response.
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 2;
  // Provides the key in labels and associated values for which cloud credentials need to be listed
  public.portworx.common.v1.Selector label_selector = 3;
  // Field selector is used to filter cloud credentials based on the fields in the cloud credential's proto message 
  public.portworx.common.v1.Selector field_selector = 4;
  // Infra_resource_selector is used to filter cloud credentials based on the infra resources associated with the cloud credentials
  // Supported infra resource filters: PROJECT
  public.portworx.common.v1.ResourceSelector infra_resource_selector = 5;
  // Sorting details using which requested list of cloud credentials to be sorted.
  public.portworx.common.v1.Sort sort = 6;
}

// Response of list cloud credentials
message ListCloudCredentialsResponse {
  // The list of cloud credentials scoped to a tenant or a project
  repeated CloudCredential cloud_credentials = 1;

  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;
}

// Request to delete a cloud credential
message DeleteCloudCredentialRequest {
  // ID of the cloud credential
  string id = 1;
}
