// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: public/portworx/platform/cloudcredential/apiv1/cloudcredential.proto

package cloudcredential

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	apiv1 "github.com/pure-px/apis/public/portworx/common/apiv1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of provider
type Provider_Type int32

const (
	// Type unspecified
	Provider_TYPE_UNSPECIFIED Provider_Type = 0
	// Azure Cloud
	Provider_AZURE Provider_Type = 1
	// Google Cloud
	Provider_GOOGLE Provider_Type = 2
	// S3 Compatible
	Provider_S3COMPATIBLE Provider_Type = 3
	// Unstructured credentials
	Provider_UNSTRUCTURED Provider_Type = 4
)

// Enum value maps for Provider_Type.
var (
	Provider_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "AZURE",
		2: "GOOGLE",
		3: "S3COMPATIBLE",
		4: "UNSTRUCTURED",
	}
	Provider_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"AZURE":            1,
		"GOOGLE":           2,
		"S3COMPATIBLE":     3,
		"UNSTRUCTURED":     4,
	}
)

func (x Provider_Type) Enum() *Provider_Type {
	p := new(Provider_Type)
	*p = x
	return p
}

func (x Provider_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Provider_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_enumTypes[0].Descriptor()
}

func (Provider_Type) Type() protoreflect.EnumType {
	return &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_enumTypes[0]
}

func (x Provider_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Provider_Type.Descriptor instead.
func (Provider_Type) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{2, 0}
}

// Resource representing a Cloud Credential
type CloudCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the resource
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Desired configuration of the Cloud Credential.
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CloudCredential) Reset() {
	*x = CloudCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCredential) ProtoMessage() {}

func (x *CloudCredential) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCredential.ProtoReflect.Descriptor instead.
func (*CloudCredential) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{0}
}

func (x *CloudCredential) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CloudCredential) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// Desired configuration of the Cloud Credential.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of cloud credential
	Provider *Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// Credential details
	//
	// Types that are assignable to Credentials:
	//
	//	*Config_AzureCredentials
	//	*Config_GoogleCredentials
	//	*Config_S3Credentials
	//	*Config_UnstructuredCredentials
	Credentials isConfig_Credentials `protobuf_oneof:"Credentials"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (m *Config) GetCredentials() isConfig_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *Config) GetAzureCredentials() *AzureCredentials {
	if x, ok := x.GetCredentials().(*Config_AzureCredentials); ok {
		return x.AzureCredentials
	}
	return nil
}

func (x *Config) GetGoogleCredentials() *GoogleCredentials {
	if x, ok := x.GetCredentials().(*Config_GoogleCredentials); ok {
		return x.GoogleCredentials
	}
	return nil
}

func (x *Config) GetS3Credentials() *S3Credentials {
	if x, ok := x.GetCredentials().(*Config_S3Credentials); ok {
		return x.S3Credentials
	}
	return nil
}

func (x *Config) GetUnstructuredCredentials() *UnstructuredCredentials {
	if x, ok := x.GetCredentials().(*Config_UnstructuredCredentials); ok {
		return x.UnstructuredCredentials
	}
	return nil
}

type isConfig_Credentials interface {
	isConfig_Credentials()
}

type Config_AzureCredentials struct {
	// Azure Credentials
	AzureCredentials *AzureCredentials `protobuf:"bytes,2,opt,name=azure_credentials,json=azureCredentials,proto3,oneof"`
}

type Config_GoogleCredentials struct {
	// Google Credentials
	GoogleCredentials *GoogleCredentials `protobuf:"bytes,3,opt,name=google_credentials,json=googleCredentials,proto3,oneof"`
}

type Config_S3Credentials struct {
	// S3 or S3 compatible credentials
	S3Credentials *S3Credentials `protobuf:"bytes,4,opt,name=s3_credentials,json=s3Credentials,proto3,oneof"`
}

type Config_UnstructuredCredentials struct {
	// Untructured credentials
	UnstructuredCredentials *UnstructuredCredentials `protobuf:"bytes,5,opt,name=unstructured_credentials,json=unstructuredCredentials,proto3,oneof"`
}

func (*Config_AzureCredentials) isConfig_Credentials() {}

func (*Config_GoogleCredentials) isConfig_Credentials() {}

func (*Config_S3Credentials) isConfig_Credentials() {}

func (*Config_UnstructuredCredentials) isConfig_Credentials() {}

// Provider associated with created credentials
type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of cloud credential
	CloudProvider Provider_Type `protobuf:"varint,1,opt,name=cloud_provider,json=cloudProvider,proto3,enum=public.portworx.platform.cloudcredential.v1.Provider_Type" json:"cloud_provider,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{2}
}

func (x *Provider) GetCloudProvider() Provider_Type {
	if x != nil {
		return x.CloudProvider
	}
	return Provider_TYPE_UNSPECIFIED
}

// Azure Credentials
type AzureCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of account
	StorageAccountName string `protobuf:"bytes,1,opt,name=storage_account_name,json=config/azure/storage_account_name,proto3" json:"storage_account_name,omitempty"`
	// Key used to connect
	StorageAccountKey string `protobuf:"bytes,2,opt,name=storage_account_key,json=config/azure/storage_account_key,proto3" json:"storage_account_key,omitempty"`
}

func (x *AzureCredentials) Reset() {
	*x = AzureCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureCredentials) ProtoMessage() {}

func (x *AzureCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureCredentials.ProtoReflect.Descriptor instead.
func (*AzureCredentials) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{3}
}

func (x *AzureCredentials) GetStorageAccountName() string {
	if x != nil {
		return x.StorageAccountName
	}
	return ""
}

func (x *AzureCredentials) GetStorageAccountKey() string {
	if x != nil {
		return x.StorageAccountKey
	}
	return ""
}

// Unstructured Credentials
type UnstructuredCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials in key value format
	CredentialData map[string]string `protobuf:"bytes,1,rep,name=credential_data,json=config/unstructured/credential_data,proto3" json:"credential_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnstructuredCredentials) Reset() {
	*x = UnstructuredCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstructuredCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstructuredCredentials) ProtoMessage() {}

func (x *UnstructuredCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstructuredCredentials.ProtoReflect.Descriptor instead.
func (*UnstructuredCredentials) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{4}
}

func (x *UnstructuredCredentials) GetCredentialData() map[string]string {
	if x != nil {
		return x.CredentialData
	}
	return nil
}

// Google Credentials
type GoogleCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project ID
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=config/google/project_id,proto3" json:"project_id,omitempty"`
	// JSON Key used to connect
	JsonKey string `protobuf:"bytes,2,opt,name=json_key,json=config/google/json_key,proto3" json:"json_key,omitempty"`
}

func (x *GoogleCredentials) Reset() {
	*x = GoogleCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCredentials) ProtoMessage() {}

func (x *GoogleCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCredentials.ProtoReflect.Descriptor instead.
func (*GoogleCredentials) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{5}
}

func (x *GoogleCredentials) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GoogleCredentials) GetJsonKey() string {
	if x != nil {
		return x.JsonKey
	}
	return ""
}

// S3 or S3 compatible credentials
type S3Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access key used to connect
	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=config/s3/access_key,proto3" json:"access_key,omitempty"`
	// Secret key used to connect
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=config/s3/secret_key,proto3" json:"secret_key,omitempty"`
}

func (x *S3Credentials) Reset() {
	*x = S3Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Credentials) ProtoMessage() {}

func (x *S3Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Credentials.ProtoReflect.Descriptor instead.
func (*S3Credentials) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{6}
}

func (x *S3Credentials) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Credentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

// Request to get a cloud credential
type GetCloudCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cloud credential
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Specifies option to include configuration details
	// excluding sensitive information
	IncludeConfig bool `protobuf:"varint,2,opt,name=include_config,json=includeConfig,proto3" json:"include_config,omitempty"`
}

func (x *GetCloudCredentialRequest) Reset() {
	*x = GetCloudCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudCredentialRequest) ProtoMessage() {}

func (x *GetCloudCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetCloudCredentialRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{7}
}

func (x *GetCloudCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCloudCredentialRequest) GetIncludeConfig() bool {
	if x != nil {
		return x.IncludeConfig
	}
	return false
}

// Request to create a cloud credential
type CreateCloudCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent tenant id under which cloud credential will be created
	// (-- api-linter: core::0133::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for to support creation of
	//	the resource in the tenant context. --)
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cloud credential configuration
	CloudCredential *CloudCredential `protobuf:"bytes,2,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (x *CreateCloudCredentialRequest) Reset() {
	*x = CreateCloudCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudCredentialRequest) ProtoMessage() {}

func (x *CreateCloudCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudCredentialRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCloudCredentialRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateCloudCredentialRequest) GetCloudCredential() *CloudCredential {
	if x != nil {
		return x.CloudCredential
	}
	return nil
}

// Request to update a cloud credential
type UpdateCloudCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the field that should be updated to the value specified in
	// cloud_credentials
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// id of the cloud credential to be updated
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Desired cloud credential configuration
	CloudCredential *CloudCredential `protobuf:"bytes,3,opt,name=cloud_credential,json=cloudCredential,proto3" json:"cloud_credential,omitempty"`
}

func (x *UpdateCloudCredentialRequest) Reset() {
	*x = UpdateCloudCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudCredentialRequest) ProtoMessage() {}

func (x *UpdateCloudCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudCredentialRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCloudCredentialRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCloudCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCloudCredentialRequest) GetCloudCredential() *CloudCredential {
	if x != nil {
		return x.CloudCredential
	}
	return nil
}

// Request to list the cloud credentials for a tenant or a project
type ListCloudCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID for which the credentials will be listed
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Pagination metadata for this response.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Provides the key in labels and associated values for which cloud credentials need to be listed
	LabelSelector *apiv1.Selector `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Field selector is used to filter cloud credentials based on the fields in the cloud credential's proto message
	FieldSelector *apiv1.Selector `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3" json:"field_selector,omitempty"`
	// Infra_resource_selector is used to filter cloud credentials based on the infra resources associated with the cloud credentials
	// Supported infra resource filters: PROJECT
	InfraResourceSelector *apiv1.ResourceSelector `protobuf:"bytes,5,opt,name=infra_resource_selector,json=infraResourceSelector,proto3" json:"infra_resource_selector,omitempty"`
	// Response data flags for listing cloud credentials
	RespData apiv1.RespData `protobuf:"varint,6,opt,name=resp_data,json=respData,proto3,enum=public.portworx.common.v1.RespData" json:"resp_data,omitempty"`
	// Sorting details using which requested list of cloud credentials to be sorted.
	Sort *apiv1.Sort `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListCloudCredentialsRequest) Reset() {
	*x = ListCloudCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudCredentialsRequest) ProtoMessage() {}

func (x *ListCloudCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{10}
}

func (x *ListCloudCredentialsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListCloudCredentialsRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCloudCredentialsRequest) GetLabelSelector() *apiv1.Selector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *ListCloudCredentialsRequest) GetFieldSelector() *apiv1.Selector {
	if x != nil {
		return x.FieldSelector
	}
	return nil
}

func (x *ListCloudCredentialsRequest) GetInfraResourceSelector() *apiv1.ResourceSelector {
	if x != nil {
		return x.InfraResourceSelector
	}
	return nil
}

func (x *ListCloudCredentialsRequest) GetRespData() apiv1.RespData {
	if x != nil {
		return x.RespData
	}
	return apiv1.RespData(0)
}

func (x *ListCloudCredentialsRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// Response of list cloud credentials
type ListCloudCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of cloud credentials scoped to a tenant or a project
	CloudCredentials []*CloudCredential `protobuf:"bytes,1,rep,name=cloud_credentials,json=cloudCredentials,proto3" json:"cloud_credentials,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCloudCredentialsResponse) Reset() {
	*x = ListCloudCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudCredentialsResponse) ProtoMessage() {}

func (x *ListCloudCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{11}
}

func (x *ListCloudCredentialsResponse) GetCloudCredentials() []*CloudCredential {
	if x != nil {
		return x.CloudCredentials
	}
	return nil
}

func (x *ListCloudCredentialsResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Request to delete a cloud credential
type DeleteCloudCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cloud credential
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudCredentialRequest) Reset() {
	*x = DeleteCloudCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudCredentialRequest) ProtoMessage() {}

func (x *DeleteCloudCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudCredentialRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteCloudCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto protoreflect.FileDescriptor

var file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x93, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb7, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x56, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x6f, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x33, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x18, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x17, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x57, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x33, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54,
	0x49, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a,
	0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xf5, 0x01,
	0x0a, 0x17, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x23, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x63, 0x0a, 0x0d, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x33, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x33, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x10, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x85,
	0x04, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a,
	0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x17, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xdf, 0x08, 0x0a, 0x16, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x49, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x3a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xd5, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x49, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x48, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x37, 0x12, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x5a, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x3a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x9d, 0x01, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x49, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xa1, 0x01, 0x0a,
	0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x42, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescOnce sync.Once
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescData = file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDesc
)

func file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescGZIP() []byte {
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescOnce.Do(func() {
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescData)
	})
	return file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDescData
}

var file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_goTypes = []interface{}{
	(Provider_Type)(0),                        // 0: public.portworx.platform.cloudcredential.v1.Provider.Type
	(*CloudCredential)(nil),                   // 1: public.portworx.platform.cloudcredential.v1.CloudCredential
	(*Config)(nil),                            // 2: public.portworx.platform.cloudcredential.v1.Config
	(*Provider)(nil),                          // 3: public.portworx.platform.cloudcredential.v1.Provider
	(*AzureCredentials)(nil),                  // 4: public.portworx.platform.cloudcredential.v1.AzureCredentials
	(*UnstructuredCredentials)(nil),           // 5: public.portworx.platform.cloudcredential.v1.UnstructuredCredentials
	(*GoogleCredentials)(nil),                 // 6: public.portworx.platform.cloudcredential.v1.GoogleCredentials
	(*S3Credentials)(nil),                     // 7: public.portworx.platform.cloudcredential.v1.S3Credentials
	(*GetCloudCredentialRequest)(nil),         // 8: public.portworx.platform.cloudcredential.v1.GetCloudCredentialRequest
	(*CreateCloudCredentialRequest)(nil),      // 9: public.portworx.platform.cloudcredential.v1.CreateCloudCredentialRequest
	(*UpdateCloudCredentialRequest)(nil),      // 10: public.portworx.platform.cloudcredential.v1.UpdateCloudCredentialRequest
	(*ListCloudCredentialsRequest)(nil),       // 11: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest
	(*ListCloudCredentialsResponse)(nil),      // 12: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsResponse
	(*DeleteCloudCredentialRequest)(nil),      // 13: public.portworx.platform.cloudcredential.v1.DeleteCloudCredentialRequest
	nil,                                       // 14: public.portworx.platform.cloudcredential.v1.UnstructuredCredentials.CredentialDataEntry
	(*apiv1.Meta)(nil),                        // 15: public.portworx.common.v1.Meta
	(*fieldmaskpb.FieldMask)(nil),             // 16: google.protobuf.FieldMask
	(*apiv1.PageBasedPaginationRequest)(nil),  // 17: public.portworx.common.v1.PageBasedPaginationRequest
	(*apiv1.Selector)(nil),                    // 18: public.portworx.common.v1.Selector
	(*apiv1.ResourceSelector)(nil),            // 19: public.portworx.common.v1.ResourceSelector
	(apiv1.RespData)(0),                       // 20: public.portworx.common.v1.RespData
	(*apiv1.Sort)(nil),                        // 21: public.portworx.common.v1.Sort
	(*apiv1.PageBasedPaginationResponse)(nil), // 22: public.portworx.common.v1.PageBasedPaginationResponse
	(*emptypb.Empty)(nil),                     // 23: google.protobuf.Empty
}
var file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_depIdxs = []int32{
	15, // 0: public.portworx.platform.cloudcredential.v1.CloudCredential.meta:type_name -> public.portworx.common.v1.Meta
	2,  // 1: public.portworx.platform.cloudcredential.v1.CloudCredential.config:type_name -> public.portworx.platform.cloudcredential.v1.Config
	3,  // 2: public.portworx.platform.cloudcredential.v1.Config.provider:type_name -> public.portworx.platform.cloudcredential.v1.Provider
	4,  // 3: public.portworx.platform.cloudcredential.v1.Config.azure_credentials:type_name -> public.portworx.platform.cloudcredential.v1.AzureCredentials
	6,  // 4: public.portworx.platform.cloudcredential.v1.Config.google_credentials:type_name -> public.portworx.platform.cloudcredential.v1.GoogleCredentials
	7,  // 5: public.portworx.platform.cloudcredential.v1.Config.s3_credentials:type_name -> public.portworx.platform.cloudcredential.v1.S3Credentials
	5,  // 6: public.portworx.platform.cloudcredential.v1.Config.unstructured_credentials:type_name -> public.portworx.platform.cloudcredential.v1.UnstructuredCredentials
	0,  // 7: public.portworx.platform.cloudcredential.v1.Provider.cloud_provider:type_name -> public.portworx.platform.cloudcredential.v1.Provider.Type
	14, // 8: public.portworx.platform.cloudcredential.v1.UnstructuredCredentials.credential_data:type_name -> public.portworx.platform.cloudcredential.v1.UnstructuredCredentials.CredentialDataEntry
	1,  // 9: public.portworx.platform.cloudcredential.v1.CreateCloudCredentialRequest.cloud_credential:type_name -> public.portworx.platform.cloudcredential.v1.CloudCredential
	16, // 10: public.portworx.platform.cloudcredential.v1.UpdateCloudCredentialRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 11: public.portworx.platform.cloudcredential.v1.UpdateCloudCredentialRequest.cloud_credential:type_name -> public.portworx.platform.cloudcredential.v1.CloudCredential
	17, // 12: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	18, // 13: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.label_selector:type_name -> public.portworx.common.v1.Selector
	18, // 14: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.field_selector:type_name -> public.portworx.common.v1.Selector
	19, // 15: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.infra_resource_selector:type_name -> public.portworx.common.v1.ResourceSelector
	20, // 16: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.resp_data:type_name -> public.portworx.common.v1.RespData
	21, // 17: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest.sort:type_name -> public.portworx.common.v1.Sort
	1,  // 18: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsResponse.cloud_credentials:type_name -> public.portworx.platform.cloudcredential.v1.CloudCredential
	22, // 19: public.portworx.platform.cloudcredential.v1.ListCloudCredentialsResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	8,  // 20: public.portworx.platform.cloudcredential.v1.CloudCredentialService.GetCloudCredential:input_type -> public.portworx.platform.cloudcredential.v1.GetCloudCredentialRequest
	9,  // 21: public.portworx.platform.cloudcredential.v1.CloudCredentialService.CreateCloudCredential:input_type -> public.portworx.platform.cloudcredential.v1.CreateCloudCredentialRequest
	10, // 22: public.portworx.platform.cloudcredential.v1.CloudCredentialService.UpdateCloudCredential:input_type -> public.portworx.platform.cloudcredential.v1.UpdateCloudCredentialRequest
	11, // 23: public.portworx.platform.cloudcredential.v1.CloudCredentialService.ListCloudCredentials:input_type -> public.portworx.platform.cloudcredential.v1.ListCloudCredentialsRequest
	13, // 24: public.portworx.platform.cloudcredential.v1.CloudCredentialService.DeleteCloudCredential:input_type -> public.portworx.platform.cloudcredential.v1.DeleteCloudCredentialRequest
	1,  // 25: public.portworx.platform.cloudcredential.v1.CloudCredentialService.GetCloudCredential:output_type -> public.portworx.platform.cloudcredential.v1.CloudCredential
	1,  // 26: public.portworx.platform.cloudcredential.v1.CloudCredentialService.CreateCloudCredential:output_type -> public.portworx.platform.cloudcredential.v1.CloudCredential
	1,  // 27: public.portworx.platform.cloudcredential.v1.CloudCredentialService.UpdateCloudCredential:output_type -> public.portworx.platform.cloudcredential.v1.CloudCredential
	12, // 28: public.portworx.platform.cloudcredential.v1.CloudCredentialService.ListCloudCredentials:output_type -> public.portworx.platform.cloudcredential.v1.ListCloudCredentialsResponse
	23, // 29: public.portworx.platform.cloudcredential.v1.CloudCredentialService.DeleteCloudCredential:output_type -> google.protobuf.Empty
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_init() }
func file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_init() {
	if File_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstructuredCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Config_AzureCredentials)(nil),
		(*Config_GoogleCredentials)(nil),
		(*Config_S3Credentials)(nil),
		(*Config_UnstructuredCredentials)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_goTypes,
		DependencyIndexes: file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_depIdxs,
		EnumInfos:         file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_enumTypes,
		MessageInfos:      file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_msgTypes,
	}.Build()
	File_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto = out.File
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_rawDesc = nil
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_goTypes = nil
	file_public_portworx_platform_cloudcredential_apiv1_cloudcredential_proto_depIdxs = nil
}
