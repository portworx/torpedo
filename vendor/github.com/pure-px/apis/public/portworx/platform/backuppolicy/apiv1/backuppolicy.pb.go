// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: public/portworx/platform/backuppolicy/apiv1/backuppolicy.proto

package backuppolicy

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	apiv1 "github.com/pure-px/apis/public/portworx/common/apiv1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to get a backup policy.
type GetBackupPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBackupPolicyRequest) Reset() {
	*x = GetBackupPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackupPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackupPolicyRequest) ProtoMessage() {}

func (x *GetBackupPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackupPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetBackupPolicyRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{0}
}

func (x *GetBackupPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to create a backup policy.
type CreateBackupPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent tenant id under which schedule will be created.
	// (-- api-linter: core::0133::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for to support creation of
	//	the resource in the tenant context. --)
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Backup Policy configuration.
	BackupPolicy *BackupPolicy `protobuf:"bytes,2,opt,name=backup_policy,json=backupPolicy,proto3" json:"backup_policy,omitempty"`
}

func (x *CreateBackupPolicyRequest) Reset() {
	*x = CreateBackupPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupPolicyRequest) ProtoMessage() {}

func (x *CreateBackupPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateBackupPolicyRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBackupPolicyRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateBackupPolicyRequest) GetBackupPolicy() *BackupPolicy {
	if x != nil {
		return x.BackupPolicy
	}
	return nil
}

// Request to update the meta of a backup policy.
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: We need to do this because ScheduleMeta is being imported from the common meta. --)
type UpdateBackupPolicyMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the backup policy to be updated.
	// (-- api-linter: core::0134::request-required-fields=disabled
	//
	//	aip.dev/not-precedent: We really need this field to be required because
	//
	// meta data which needs to be updated has to be passed in the request. --)
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *UpdateBackupPolicyMetaRequest) Reset() {
	*x = UpdateBackupPolicyMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBackupPolicyMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBackupPolicyMetaRequest) ProtoMessage() {}

func (x *UpdateBackupPolicyMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBackupPolicyMetaRequest.ProtoReflect.Descriptor instead.
func (*UpdateBackupPolicyMetaRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBackupPolicyMetaRequest) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Request to list the backup policies for a tenant.
type ListBackupPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant ID for which the backup policies will be listed.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Pagination metadata for listing backup policies.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Provides the key in labels and associated values for which backup policy need to be listed.
	LabelSelector *apiv1.Selector `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Field selector is used to filter backup policies based on the fields in the backup policy's proto message.
	FieldSelector *apiv1.Selector `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3" json:"field_selector,omitempty"`
	// Infra_resource_selector is used to filter backup policies based on the infra resources associated with the backup policy.
	// Supported infra resource filters: PROJECT.
	InfraResourceSelector *apiv1.ResourceSelector `protobuf:"bytes,5,opt,name=infra_resource_selector,json=infraResourceSelector,proto3" json:"infra_resource_selector,omitempty"`
	// Sorting details using which requested list of backup policies to be sorted.
	Sort *apiv1.Sort `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	// Response data flags for listing backup policies.
	RespData apiv1.RespData `protobuf:"varint,7,opt,name=resp_data,json=respData,proto3,enum=public.portworx.common.v1.RespData" json:"resp_data,omitempty"`
}

func (x *ListBackupPoliciesRequest) Reset() {
	*x = ListBackupPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupPoliciesRequest) ProtoMessage() {}

func (x *ListBackupPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListBackupPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{3}
}

func (x *ListBackupPoliciesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ListBackupPoliciesRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBackupPoliciesRequest) GetLabelSelector() *apiv1.Selector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *ListBackupPoliciesRequest) GetFieldSelector() *apiv1.Selector {
	if x != nil {
		return x.FieldSelector
	}
	return nil
}

func (x *ListBackupPoliciesRequest) GetInfraResourceSelector() *apiv1.ResourceSelector {
	if x != nil {
		return x.InfraResourceSelector
	}
	return nil
}

func (x *ListBackupPoliciesRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListBackupPoliciesRequest) GetRespData() apiv1.RespData {
	if x != nil {
		return x.RespData
	}
	return apiv1.RespData(0)
}

// Response of list backup policies.
type ListBackupPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of backup policies scoped to a tenant.
	BackupPolicies []*BackupPolicy `protobuf:"bytes,1,rep,name=backup_policies,json=backupPolicies,proto3" json:"backup_policies,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListBackupPoliciesResponse) Reset() {
	*x = ListBackupPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupPoliciesResponse) ProtoMessage() {}

func (x *ListBackupPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListBackupPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{4}
}

func (x *ListBackupPoliciesResponse) GetBackupPolicies() []*BackupPolicy {
	if x != nil {
		return x.BackupPolicies
	}
	return nil
}

func (x *ListBackupPoliciesResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Request to delete a backup policy.
type DeleteBackupPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup policy.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBackupPolicyRequest) Reset() {
	*x = DeleteBackupPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupPolicyRequest) ProtoMessage() {}

func (x *DeleteBackupPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupPolicyRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBackupPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Resource representing a backup policy.
type BackupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the backup policy.
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Desired configuration of the backup policy.
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *BackupPolicy) Reset() {
	*x = BackupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPolicy) ProtoMessage() {}

func (x *BackupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPolicy.ProtoReflect.Descriptor instead.
func (*BackupPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{6}
}

func (x *BackupPolicy) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BackupPolicy) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// Desired configuration of the backup policy.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedules defined for a policy.
	Schedule []*Schedule `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetSchedule() []*Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// A schedule for a backup policy.
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule type.
	//
	// Types that are assignable to Duration:
	//
	//	*Schedule_IntervalPolicy
	//	*Schedule_DailyPolicy
	//	*Schedule_WeeklyPolicy
	//	*Schedule_MonthlyPolicy
	//	*Schedule_CronExpression
	Duration isSchedule_Duration `protobuf_oneof:"Duration"`
	// Number of incremental snapshots to take before taking a full snapshot.
	IncrementalCount int64 `protobuf:"varint,6,opt,name=incremental_count,json=incrementalCount,proto3" json:"incremental_count,omitempty"`
	// Number of objects to retain for the schedule type, default value is 10.
	Retain int64 `protobuf:"varint,7,opt,name=retain,proto3" json:"retain,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{8}
}

func (m *Schedule) GetDuration() isSchedule_Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (x *Schedule) GetIntervalPolicy() *IntervalPolicy {
	if x, ok := x.GetDuration().(*Schedule_IntervalPolicy); ok {
		return x.IntervalPolicy
	}
	return nil
}

func (x *Schedule) GetDailyPolicy() *DailyPolicy {
	if x, ok := x.GetDuration().(*Schedule_DailyPolicy); ok {
		return x.DailyPolicy
	}
	return nil
}

func (x *Schedule) GetWeeklyPolicy() *WeeklyPolicy {
	if x, ok := x.GetDuration().(*Schedule_WeeklyPolicy); ok {
		return x.WeeklyPolicy
	}
	return nil
}

func (x *Schedule) GetMonthlyPolicy() *MonthlyPolicy {
	if x, ok := x.GetDuration().(*Schedule_MonthlyPolicy); ok {
		return x.MonthlyPolicy
	}
	return nil
}

func (x *Schedule) GetCronExpression() string {
	if x, ok := x.GetDuration().(*Schedule_CronExpression); ok {
		return x.CronExpression
	}
	return ""
}

func (x *Schedule) GetIncrementalCount() int64 {
	if x != nil {
		return x.IncrementalCount
	}
	return 0
}

func (x *Schedule) GetRetain() int64 {
	if x != nil {
		return x.Retain
	}
	return 0
}

type isSchedule_Duration interface {
	isSchedule_Duration()
}

type Schedule_IntervalPolicy struct {
	// Interval Policy.
	IntervalPolicy *IntervalPolicy `protobuf:"bytes,1,opt,name=interval_policy,json=intervalPolicy,proto3,oneof"`
}

type Schedule_DailyPolicy struct {
	// Daily Policy.
	DailyPolicy *DailyPolicy `protobuf:"bytes,2,opt,name=daily_policy,json=dailyPolicy,proto3,oneof"`
}

type Schedule_WeeklyPolicy struct {
	// Weekly Policy.
	WeeklyPolicy *WeeklyPolicy `protobuf:"bytes,3,opt,name=weekly_policy,json=weeklyPolicy,proto3,oneof"`
}

type Schedule_MonthlyPolicy struct {
	// Monthly Policy.
	MonthlyPolicy *MonthlyPolicy `protobuf:"bytes,4,opt,name=monthly_policy,json=monthlyPolicy,proto3,oneof"`
}

type Schedule_CronExpression struct {
	// A cron expression is a string consisting of six or seven subexpressions (fields) that describe individual details of the schedule.
	CronExpression string `protobuf:"bytes,5,opt,name=cron_expression,json=cronExpression,proto3,oneof"`
}

func (*Schedule_IntervalPolicy) isSchedule_Duration() {}

func (*Schedule_DailyPolicy) isSchedule_Duration() {}

func (*Schedule_WeeklyPolicy) isSchedule_Duration() {}

func (*Schedule_MonthlyPolicy) isSchedule_Duration() {}

func (*Schedule_CronExpression) isSchedule_Duration() {}

// Interval Policy.
type IntervalPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval in minutes at which an action should be triggered.
	Minutes int64 `protobuf:"varint,1,opt,name=minutes,proto3" json:"minutes,omitempty"`
}

func (x *IntervalPolicy) Reset() {
	*x = IntervalPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalPolicy) ProtoMessage() {}

func (x *IntervalPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalPolicy.ProtoReflect.Descriptor instead.
func (*IntervalPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{9}
}

func (x *IntervalPolicy) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

// Daily Policy.
type DailyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time, when the policy should be triggered. Expected format is time. Eg 12:04PM or 12:04pm.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: We need to do this to take input in string format. --)
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DailyPolicy) Reset() {
	*x = DailyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyPolicy) ProtoMessage() {}

func (x *DailyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyPolicy.ProtoReflect.Descriptor instead.
func (*DailyPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{10}
}

func (x *DailyPolicy) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// Weekly Policy.
type WeeklyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Day of the week when the policy should be triggered.
	// For example, sunday or sun.
	Day string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	// Time, when the policy should be triggered. Expected format is time. Eg 12:04PM or 12:04pm.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: We need to do this to take input in string format. --)
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *WeeklyPolicy) Reset() {
	*x = WeeklyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyPolicy) ProtoMessage() {}

func (x *WeeklyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyPolicy.ProtoReflect.Descriptor instead.
func (*WeeklyPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{11}
}

func (x *WeeklyPolicy) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *WeeklyPolicy) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// Monthly Policy.
type MonthlyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date of the month when the policy should be triggered. If a given date doesn't exist in a month it'll rollover to the next date of the month.
	// For example if 31 is specified, it'll trigger on either 1st or 2nd March depending on if it is a leap year.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: We need to do this to take input in string format. --)
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// Time, when the policy should be triggered. Expected format is time. Eg 12:04PM or 12:04pm.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: We need to do this to take input in string format. --)
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MonthlyPolicy) Reset() {
	*x = MonthlyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyPolicy) ProtoMessage() {}

func (x *MonthlyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyPolicy.ProtoReflect.Descriptor instead.
func (*MonthlyPolicy) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP(), []int{12}
}

func (x *MonthlyPolicy) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *MonthlyPolicy) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

var File_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto protoreflect.FileDescriptor

var file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x28, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x59, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x88, 0x04, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x58, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4e, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x88, 0x04, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x63, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x5a, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5d,
	0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a,
	0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x29, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xb4, 0x08, 0x0a, 0x13, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x3a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x2b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xd6, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x47, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x3a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x2d, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x6d, 0x65, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x9d, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x35, 0x12, 0x33, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x5a, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x42, 0x95, 0x01, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x42, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescOnce sync.Once
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescData = file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDesc
)

func file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescGZIP() []byte {
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescOnce.Do(func() {
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescData)
	})
	return file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDescData
}

var file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_goTypes = []interface{}{
	(*GetBackupPolicyRequest)(nil),            // 0: public.portworx.platform.backuppolicy.v1.GetBackupPolicyRequest
	(*CreateBackupPolicyRequest)(nil),         // 1: public.portworx.platform.backuppolicy.v1.CreateBackupPolicyRequest
	(*UpdateBackupPolicyMetaRequest)(nil),     // 2: public.portworx.platform.backuppolicy.v1.UpdateBackupPolicyMetaRequest
	(*ListBackupPoliciesRequest)(nil),         // 3: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest
	(*ListBackupPoliciesResponse)(nil),        // 4: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesResponse
	(*DeleteBackupPolicyRequest)(nil),         // 5: public.portworx.platform.backuppolicy.v1.DeleteBackupPolicyRequest
	(*BackupPolicy)(nil),                      // 6: public.portworx.platform.backuppolicy.v1.BackupPolicy
	(*Config)(nil),                            // 7: public.portworx.platform.backuppolicy.v1.Config
	(*Schedule)(nil),                          // 8: public.portworx.platform.backuppolicy.v1.Schedule
	(*IntervalPolicy)(nil),                    // 9: public.portworx.platform.backuppolicy.v1.IntervalPolicy
	(*DailyPolicy)(nil),                       // 10: public.portworx.platform.backuppolicy.v1.DailyPolicy
	(*WeeklyPolicy)(nil),                      // 11: public.portworx.platform.backuppolicy.v1.WeeklyPolicy
	(*MonthlyPolicy)(nil),                     // 12: public.portworx.platform.backuppolicy.v1.MonthlyPolicy
	(*apiv1.Meta)(nil),                        // 13: public.portworx.common.v1.Meta
	(*apiv1.PageBasedPaginationRequest)(nil),  // 14: public.portworx.common.v1.PageBasedPaginationRequest
	(*apiv1.Selector)(nil),                    // 15: public.portworx.common.v1.Selector
	(*apiv1.ResourceSelector)(nil),            // 16: public.portworx.common.v1.ResourceSelector
	(*apiv1.Sort)(nil),                        // 17: public.portworx.common.v1.Sort
	(apiv1.RespData)(0),                       // 18: public.portworx.common.v1.RespData
	(*apiv1.PageBasedPaginationResponse)(nil), // 19: public.portworx.common.v1.PageBasedPaginationResponse
	(*emptypb.Empty)(nil),                     // 20: google.protobuf.Empty
}
var file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_depIdxs = []int32{
	6,  // 0: public.portworx.platform.backuppolicy.v1.CreateBackupPolicyRequest.backup_policy:type_name -> public.portworx.platform.backuppolicy.v1.BackupPolicy
	13, // 1: public.portworx.platform.backuppolicy.v1.UpdateBackupPolicyMetaRequest.meta:type_name -> public.portworx.common.v1.Meta
	14, // 2: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	15, // 3: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.label_selector:type_name -> public.portworx.common.v1.Selector
	15, // 4: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.field_selector:type_name -> public.portworx.common.v1.Selector
	16, // 5: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.infra_resource_selector:type_name -> public.portworx.common.v1.ResourceSelector
	17, // 6: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.sort:type_name -> public.portworx.common.v1.Sort
	18, // 7: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest.resp_data:type_name -> public.portworx.common.v1.RespData
	6,  // 8: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesResponse.backup_policies:type_name -> public.portworx.platform.backuppolicy.v1.BackupPolicy
	19, // 9: public.portworx.platform.backuppolicy.v1.ListBackupPoliciesResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	13, // 10: public.portworx.platform.backuppolicy.v1.BackupPolicy.meta:type_name -> public.portworx.common.v1.Meta
	7,  // 11: public.portworx.platform.backuppolicy.v1.BackupPolicy.config:type_name -> public.portworx.platform.backuppolicy.v1.Config
	8,  // 12: public.portworx.platform.backuppolicy.v1.Config.schedule:type_name -> public.portworx.platform.backuppolicy.v1.Schedule
	9,  // 13: public.portworx.platform.backuppolicy.v1.Schedule.interval_policy:type_name -> public.portworx.platform.backuppolicy.v1.IntervalPolicy
	10, // 14: public.portworx.platform.backuppolicy.v1.Schedule.daily_policy:type_name -> public.portworx.platform.backuppolicy.v1.DailyPolicy
	11, // 15: public.portworx.platform.backuppolicy.v1.Schedule.weekly_policy:type_name -> public.portworx.platform.backuppolicy.v1.WeeklyPolicy
	12, // 16: public.portworx.platform.backuppolicy.v1.Schedule.monthly_policy:type_name -> public.portworx.platform.backuppolicy.v1.MonthlyPolicy
	0,  // 17: public.portworx.platform.backuppolicy.v1.BackupPolicyService.GetBackupPolicy:input_type -> public.portworx.platform.backuppolicy.v1.GetBackupPolicyRequest
	1,  // 18: public.portworx.platform.backuppolicy.v1.BackupPolicyService.CreateBackupPolicy:input_type -> public.portworx.platform.backuppolicy.v1.CreateBackupPolicyRequest
	2,  // 19: public.portworx.platform.backuppolicy.v1.BackupPolicyService.UpdateBackupPolicyMeta:input_type -> public.portworx.platform.backuppolicy.v1.UpdateBackupPolicyMetaRequest
	3,  // 20: public.portworx.platform.backuppolicy.v1.BackupPolicyService.ListBackupPolicies:input_type -> public.portworx.platform.backuppolicy.v1.ListBackupPoliciesRequest
	5,  // 21: public.portworx.platform.backuppolicy.v1.BackupPolicyService.DeleteBackupPolicy:input_type -> public.portworx.platform.backuppolicy.v1.DeleteBackupPolicyRequest
	6,  // 22: public.portworx.platform.backuppolicy.v1.BackupPolicyService.GetBackupPolicy:output_type -> public.portworx.platform.backuppolicy.v1.BackupPolicy
	6,  // 23: public.portworx.platform.backuppolicy.v1.BackupPolicyService.CreateBackupPolicy:output_type -> public.portworx.platform.backuppolicy.v1.BackupPolicy
	6,  // 24: public.portworx.platform.backuppolicy.v1.BackupPolicyService.UpdateBackupPolicyMeta:output_type -> public.portworx.platform.backuppolicy.v1.BackupPolicy
	4,  // 25: public.portworx.platform.backuppolicy.v1.BackupPolicyService.ListBackupPolicies:output_type -> public.portworx.platform.backuppolicy.v1.ListBackupPoliciesResponse
	20, // 26: public.portworx.platform.backuppolicy.v1.BackupPolicyService.DeleteBackupPolicy:output_type -> google.protobuf.Empty
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_init() }
func file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_init() {
	if File_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackupPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBackupPolicyMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Schedule_IntervalPolicy)(nil),
		(*Schedule_DailyPolicy)(nil),
		(*Schedule_WeeklyPolicy)(nil),
		(*Schedule_MonthlyPolicy)(nil),
		(*Schedule_CronExpression)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_goTypes,
		DependencyIndexes: file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_depIdxs,
		MessageInfos:      file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_msgTypes,
	}.Build()
	File_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto = out.File
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_rawDesc = nil
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_goTypes = nil
	file_public_portworx_platform_backuppolicy_apiv1_backuppolicy_proto_depIdxs = nil
}
