/*
public/portworx/platform/tenant/apiv1/tenant.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package platformclientv1

import (
	"encoding/json"
)

// checks if the V1S3ObjectStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1S3ObjectStorage{}

// V1S3ObjectStorage struct for V1S3ObjectStorage
type V1S3ObjectStorage struct {
	BucketName *string `json:"bucketName,omitempty"`
	Region *string `json:"region,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
}

// NewV1S3ObjectStorage instantiates a new V1S3ObjectStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1S3ObjectStorage() *V1S3ObjectStorage {
	this := V1S3ObjectStorage{}
	return &this
}

// NewV1S3ObjectStorageWithDefaults instantiates a new V1S3ObjectStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1S3ObjectStorageWithDefaults() *V1S3ObjectStorage {
	this := V1S3ObjectStorage{}
	return &this
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *V1S3ObjectStorage) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1S3ObjectStorage) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *V1S3ObjectStorage) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *V1S3ObjectStorage) SetBucketName(v string) {
	o.BucketName = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *V1S3ObjectStorage) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1S3ObjectStorage) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *V1S3ObjectStorage) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *V1S3ObjectStorage) SetRegion(v string) {
	o.Region = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *V1S3ObjectStorage) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1S3ObjectStorage) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *V1S3ObjectStorage) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *V1S3ObjectStorage) SetEndpoint(v string) {
	o.Endpoint = &v
}

func (o V1S3ObjectStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1S3ObjectStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketName) {
		toSerialize["bucketName"] = o.BucketName
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	return toSerialize, nil
}

type NullableV1S3ObjectStorage struct {
	value *V1S3ObjectStorage
	isSet bool
}

func (v NullableV1S3ObjectStorage) Get() *V1S3ObjectStorage {
	return v.value
}

func (v *NullableV1S3ObjectStorage) Set(val *V1S3ObjectStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableV1S3ObjectStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableV1S3ObjectStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1S3ObjectStorage(val *V1S3ObjectStorage) *NullableV1S3ObjectStorage {
	return &NullableV1S3ObjectStorage{value: val, isSet: true}
}

func (v NullableV1S3ObjectStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1S3ObjectStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


