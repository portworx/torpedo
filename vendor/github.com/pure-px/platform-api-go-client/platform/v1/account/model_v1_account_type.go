/*
public/portworx/platform/account/apiv1/account.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
	"fmt"
)

// V1AccountType Accepted account types.   - ACCOUNT_TYPE_UNSPECIFIED: Unspecified, do not use.  - FREEMIUM: Account is of freemium type for all three Portworx Service.  - ENTERPRISE: Account has a active subscription for at least one of the Portworx Services.
type V1AccountType string

// List of v1AccountType
const (
	V1ACCOUNTTYPE_ACCOUNT_TYPE_UNSPECIFIED V1AccountType = "ACCOUNT_TYPE_UNSPECIFIED"
	V1ACCOUNTTYPE_FREEMIUM V1AccountType = "FREEMIUM"
	V1ACCOUNTTYPE_ENTERPRISE V1AccountType = "ENTERPRISE"
)

// All allowed values of V1AccountType enum
var AllowedV1AccountTypeEnumValues = []V1AccountType{
	"ACCOUNT_TYPE_UNSPECIFIED",
	"FREEMIUM",
	"ENTERPRISE",
}

func (v *V1AccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1AccountType(value)
	for _, existing := range AllowedV1AccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1AccountType", value)
}

// NewV1AccountTypeFromValue returns a pointer to a valid V1AccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1AccountTypeFromValue(v string) (*V1AccountType, error) {
	ev := V1AccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1AccountType: valid values are %v", v, AllowedV1AccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1AccountType) IsValid() bool {
	for _, existing := range AllowedV1AccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1AccountType value
func (v V1AccountType) Ptr() *V1AccountType {
	return &v
}

type NullableV1AccountType struct {
	value *V1AccountType
	isSet bool
}

func (v NullableV1AccountType) Get() *V1AccountType {
	return v.value
}

func (v *NullableV1AccountType) Set(val *V1AccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AccountType(val *V1AccountType) *NullableV1AccountType {
	return &NullableV1AccountType{value: val, isSet: true}
}

func (v NullableV1AccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

