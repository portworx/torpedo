/*
public/portworx/platform/account/apiv1/account.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package account

import (
	"encoding/json"
	"fmt"
)

// V1StatusType Accepted status types for various cloud providers.   - STATUS_TYPE_UNSPECIFIED: Unspecified, do not use.  - FREEMIUM_SUCCESS: A successfully freemium account setup.  - AWS_SUBSCRIBE_SUCCESS: Customer has subscribed product on aws marketplace.  - AWS_SUBSCRIBE_FAIL: Customer has subscribed product on aws marketplace but aws encountered failure during account setup.  - AWS_UNSUBSCRIBE_PENDING: Customer has unsubscribed from marketplace and now we have 1 hour to report final billing. and perform other de-boarding processes.  - AWS_UNSUBSCRIBE_SUCCESS: Customer successfully unsubscribed and we can't report billing to aws for this account anymore.  - ZUORA_SUBSCRIBE: Customer successfully subscribed to Zuora.  - ZUORA_UNSUBSCRIBE: Customer has unsubscribed from Zuora.
type V1StatusType string

// List of v1StatusType
const (
	V1STATUSTYPE_STATUS_TYPE_UNSPECIFIED V1StatusType = "STATUS_TYPE_UNSPECIFIED"
	V1STATUSTYPE_FREEMIUM_SUCCESS V1StatusType = "FREEMIUM_SUCCESS"
	V1STATUSTYPE_AWS_SUBSCRIBE_SUCCESS V1StatusType = "AWS_SUBSCRIBE_SUCCESS"
	V1STATUSTYPE_AWS_SUBSCRIBE_FAIL V1StatusType = "AWS_SUBSCRIBE_FAIL"
	V1STATUSTYPE_AWS_UNSUBSCRIBE_PENDING V1StatusType = "AWS_UNSUBSCRIBE_PENDING"
	V1STATUSTYPE_AWS_UNSUBSCRIBE_SUCCESS V1StatusType = "AWS_UNSUBSCRIBE_SUCCESS"
	V1STATUSTYPE_ZUORA_SUBSCRIBE V1StatusType = "ZUORA_SUBSCRIBE"
	V1STATUSTYPE_ZUORA_UNSUBSCRIBE V1StatusType = "ZUORA_UNSUBSCRIBE"
)

// All allowed values of V1StatusType enum
var AllowedV1StatusTypeEnumValues = []V1StatusType{
	"STATUS_TYPE_UNSPECIFIED",
	"FREEMIUM_SUCCESS",
	"AWS_SUBSCRIBE_SUCCESS",
	"AWS_SUBSCRIBE_FAIL",
	"AWS_UNSUBSCRIBE_PENDING",
	"AWS_UNSUBSCRIBE_SUCCESS",
	"ZUORA_SUBSCRIBE",
	"ZUORA_UNSUBSCRIBE",
}

func (v *V1StatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1StatusType(value)
	for _, existing := range AllowedV1StatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1StatusType", value)
}

// NewV1StatusTypeFromValue returns a pointer to a valid V1StatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1StatusTypeFromValue(v string) (*V1StatusType, error) {
	ev := V1StatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1StatusType: valid values are %v", v, AllowedV1StatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1StatusType) IsValid() bool {
	for _, existing := range AllowedV1StatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1StatusType value
func (v V1StatusType) Ptr() *V1StatusType {
	return &v
}

type NullableV1StatusType struct {
	value *V1StatusType
	isSet bool
}

func (v NullableV1StatusType) Get() *V1StatusType {
	return v.value
}

func (v *NullableV1StatusType) Set(val *V1StatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1StatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1StatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1StatusType(val *V1StatusType) *NullableV1StatusType {
	return &NullableV1StatusType{value: val, isSet: true}
}

func (v NullableV1StatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1StatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

