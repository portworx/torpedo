/*
public/portworx/platform/template/apiv1/template.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package template

import (
	"encoding/json"
)

// checks if the V1Selector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Selector{}

// V1Selector Selector is used to query resources using the associated labels or field names.
type V1Selector struct {
	// FilterList is the list of all filters that should be applied.
	Filters []SelectorFilter `json:"filters,omitempty"`
}

// NewV1Selector instantiates a new V1Selector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Selector() *V1Selector {
	this := V1Selector{}
	return &this
}

// NewV1SelectorWithDefaults instantiates a new V1Selector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SelectorWithDefaults() *V1Selector {
	this := V1Selector{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *V1Selector) GetFilters() []SelectorFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []SelectorFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Selector) GetFiltersOk() ([]SelectorFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *V1Selector) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []SelectorFilter and assigns it to the Filters field.
func (o *V1Selector) SetFilters(v []SelectorFilter) {
	o.Filters = v
}

func (o V1Selector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Selector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableV1Selector struct {
	value *V1Selector
	isSet bool
}

func (v NullableV1Selector) Get() *V1Selector {
	return v.value
}

func (v *NullableV1Selector) Set(val *V1Selector) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Selector) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Selector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Selector(val *V1Selector) *NullableV1Selector {
	return &NullableV1Selector{value: val, isSet: true}
}

func (v NullableV1Selector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Selector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


