/*
public/portworx/platform/template/apiv1/template.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package template

import (
	"encoding/json"
)

// checks if the V1Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Config{}

// V1Config Config provides configuration data of the template instance.
type V1Config struct {
	// Kind to the template instance used to identify the template schema.
	Kind *string `json:"kind,omitempty"`
	// Semantic version of the template used to identify template schema. and latest revision for the given template instance kind.
	SemanticVersion *string `json:"semanticVersion,omitempty"`
	// Uid of the schema used to create the template instance.
	RevisionUid *string `json:"revisionUid,omitempty"`
	// Key, value pairs of the template instance.
	TemplateValues map[string]interface{} `json:"templateValues,omitempty"`
}

// NewV1Config instantiates a new V1Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config() *V1Config {
	this := V1Config{}
	return &this
}

// NewV1ConfigWithDefaults instantiates a new V1Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigWithDefaults() *V1Config {
	this := V1Config{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1Config) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1Config) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1Config) SetKind(v string) {
	o.Kind = &v
}

// GetSemanticVersion returns the SemanticVersion field value if set, zero value otherwise.
func (o *V1Config) GetSemanticVersion() string {
	if o == nil || IsNil(o.SemanticVersion) {
		var ret string
		return ret
	}
	return *o.SemanticVersion
}

// GetSemanticVersionOk returns a tuple with the SemanticVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetSemanticVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SemanticVersion) {
		return nil, false
	}
	return o.SemanticVersion, true
}

// HasSemanticVersion returns a boolean if a field has been set.
func (o *V1Config) HasSemanticVersion() bool {
	if o != nil && !IsNil(o.SemanticVersion) {
		return true
	}

	return false
}

// SetSemanticVersion gets a reference to the given string and assigns it to the SemanticVersion field.
func (o *V1Config) SetSemanticVersion(v string) {
	o.SemanticVersion = &v
}

// GetRevisionUid returns the RevisionUid field value if set, zero value otherwise.
func (o *V1Config) GetRevisionUid() string {
	if o == nil || IsNil(o.RevisionUid) {
		var ret string
		return ret
	}
	return *o.RevisionUid
}

// GetRevisionUidOk returns a tuple with the RevisionUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetRevisionUidOk() (*string, bool) {
	if o == nil || IsNil(o.RevisionUid) {
		return nil, false
	}
	return o.RevisionUid, true
}

// HasRevisionUid returns a boolean if a field has been set.
func (o *V1Config) HasRevisionUid() bool {
	if o != nil && !IsNil(o.RevisionUid) {
		return true
	}

	return false
}

// SetRevisionUid gets a reference to the given string and assigns it to the RevisionUid field.
func (o *V1Config) SetRevisionUid(v string) {
	o.RevisionUid = &v
}

// GetTemplateValues returns the TemplateValues field value if set, zero value otherwise.
func (o *V1Config) GetTemplateValues() map[string]interface{} {
	if o == nil || IsNil(o.TemplateValues) {
		var ret map[string]interface{}
		return ret
	}
	return o.TemplateValues
}

// GetTemplateValuesOk returns a tuple with the TemplateValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetTemplateValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TemplateValues) {
		return map[string]interface{}{}, false
	}
	return o.TemplateValues, true
}

// HasTemplateValues returns a boolean if a field has been set.
func (o *V1Config) HasTemplateValues() bool {
	if o != nil && !IsNil(o.TemplateValues) {
		return true
	}

	return false
}

// SetTemplateValues gets a reference to the given map[string]interface{} and assigns it to the TemplateValues field.
func (o *V1Config) SetTemplateValues(v map[string]interface{}) {
	o.TemplateValues = v
}

func (o V1Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.SemanticVersion) {
		toSerialize["semanticVersion"] = o.SemanticVersion
	}
	if !IsNil(o.RevisionUid) {
		toSerialize["revisionUid"] = o.RevisionUid
	}
	if !IsNil(o.TemplateValues) {
		toSerialize["templateValues"] = o.TemplateValues
	}
	return toSerialize, nil
}

type NullableV1Config struct {
	value *V1Config
	isSet bool
}

func (v NullableV1Config) Get() *V1Config {
	return v.value
}

func (v *NullableV1Config) Set(val *V1Config) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config(val *V1Config) *NullableV1Config {
	return &NullableV1Config{value: val, isSet: true}
}

func (v NullableV1Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


