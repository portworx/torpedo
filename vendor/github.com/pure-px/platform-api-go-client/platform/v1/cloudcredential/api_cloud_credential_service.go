/*
public/portworx/platform/cloudcredential/apiv1/cloudcredential.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudcredential

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CloudCredentialServiceAPIService CloudCredentialServiceAPI service
type CloudCredentialServiceAPIService service

type ApiCloudCredentialServiceCreateCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	tenantId string
	v1CloudCredential *V1CloudCredential
}

// Cloud credential configuration.
func (r ApiCloudCredentialServiceCreateCloudCredentialRequest) V1CloudCredential(v1CloudCredential V1CloudCredential) ApiCloudCredentialServiceCreateCloudCredentialRequest {
	r.v1CloudCredential = &v1CloudCredential
	return r
}

func (r ApiCloudCredentialServiceCreateCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceCreateCloudCredentialExecute(r)
}

/*
CloudCredentialServiceCreateCloudCredential Create API creates a set of cloud credentials for a tenant.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId The parent tenant id under which cloud credential will be created.
 @return ApiCloudCredentialServiceCreateCloudCredentialRequest
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceCreateCloudCredential(ctx context.Context, tenantId string) ApiCloudCredentialServiceCreateCloudCredentialRequest {
	return ApiCloudCredentialServiceCreateCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceCreateCloudCredentialExecute(r ApiCloudCredentialServiceCreateCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceCreateCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/tenants/{tenantId}/cloudCredentials"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1CloudCredential == nil {
		return localVarReturnValue, nil, reportError("v1CloudCredential is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1CloudCredential
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceDeleteCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	id string
}

func (r ApiCloudCredentialServiceDeleteCloudCredentialRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceDeleteCloudCredentialExecute(r)
}

/*
CloudCredentialServiceDeleteCloudCredential Delete API deletes the cloud credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the cloud credential.
 @return ApiCloudCredentialServiceDeleteCloudCredentialRequest
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceDeleteCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceDeleteCloudCredentialRequest {
	return ApiCloudCredentialServiceDeleteCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceDeleteCloudCredentialExecute(r ApiCloudCredentialServiceDeleteCloudCredentialRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceDeleteCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/cloudCredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceGetCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	id string
	includeConfig *bool
}

// Specifies option to include configuration details excluding sensitive information.
func (r ApiCloudCredentialServiceGetCloudCredentialRequest) IncludeConfig(includeConfig bool) ApiCloudCredentialServiceGetCloudCredentialRequest {
	r.includeConfig = &includeConfig
	return r
}

func (r ApiCloudCredentialServiceGetCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceGetCloudCredentialExecute(r)
}

/*
CloudCredentialServiceGetCloudCredential Get API returns the cloud credential details sans the actual credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the cloud credential.
 @return ApiCloudCredentialServiceGetCloudCredentialRequest
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceGetCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceGetCloudCredentialRequest {
	return ApiCloudCredentialServiceGetCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceGetCloudCredentialExecute(r ApiCloudCredentialServiceGetCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceGetCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/cloudCredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeConfig != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeConfig", r.includeConfig, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceListCloudCredentialsRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	tenantId *string
	paginationPageNumber *string
	paginationPageSize *string
	respData *string
	sortSortBy *string
	sortSortOrder *string
}

// Tenant ID for which the credentials will be listed.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) TenantId(tenantId string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.tenantId = &tenantId
	return r
}

// Page number is the page number to return based on the size.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) PaginationPageNumber(paginationPageNumber string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) PaginationPageSize(paginationPageSize string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Response data flags for listing cloud credentials.   - RESP_DATA_UNSPECIFIED: RespData Unspecified. complete resource will be populated.  - INDEX: only uid, name, labels should be populated.  - LITE: only meta data should be populated.  - FULL: complete resource should be populated.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) RespData(respData string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.respData = &respData
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) SortSortBy(sortSortBy string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiCloudCredentialServiceListCloudCredentialsRequest) SortSortOrder(sortSortOrder string) ApiCloudCredentialServiceListCloudCredentialsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiCloudCredentialServiceListCloudCredentialsRequest) Execute() (*V1ListCloudCredentialsResponse, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceListCloudCredentialsExecute(r)
}

/*
CloudCredentialServiceListCloudCredentials List API lists all the cloud credentials for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCredentialServiceListCloudCredentialsRequest
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceListCloudCredentials(ctx context.Context) ApiCloudCredentialServiceListCloudCredentialsRequest {
	return ApiCloudCredentialServiceListCloudCredentialsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListCloudCredentialsResponse
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceListCloudCredentialsExecute(r ApiCloudCredentialServiceListCloudCredentialsRequest) (*V1ListCloudCredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListCloudCredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceListCloudCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/cloudCredentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "")
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	if r.respData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respData", r.respData, "")
	} else {
		var defaultValue string = "RESP_DATA_UNSPECIFIED"
		r.respData = &defaultValue
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceListCloudCredentials2Request struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	v1ListCloudCredentialsRequest *V1ListCloudCredentialsRequest
}

// Request to list the cloud credentials for a tenant or a project.
func (r ApiCloudCredentialServiceListCloudCredentials2Request) V1ListCloudCredentialsRequest(v1ListCloudCredentialsRequest V1ListCloudCredentialsRequest) ApiCloudCredentialServiceListCloudCredentials2Request {
	r.v1ListCloudCredentialsRequest = &v1ListCloudCredentialsRequest
	return r
}

func (r ApiCloudCredentialServiceListCloudCredentials2Request) Execute() (*V1ListCloudCredentialsResponse, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceListCloudCredentials2Execute(r)
}

/*
CloudCredentialServiceListCloudCredentials2 List API lists all the cloud credentials for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudCredentialServiceListCloudCredentials2Request
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceListCloudCredentials2(ctx context.Context) ApiCloudCredentialServiceListCloudCredentials2Request {
	return ApiCloudCredentialServiceListCloudCredentials2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListCloudCredentialsResponse
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceListCloudCredentials2Execute(r ApiCloudCredentialServiceListCloudCredentials2Request) (*V1ListCloudCredentialsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListCloudCredentialsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceListCloudCredentials2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/cloudCredentials:search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1ListCloudCredentialsRequest == nil {
		return localVarReturnValue, nil, reportError("v1ListCloudCredentialsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1ListCloudCredentialsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudCredentialServiceUpdateCloudCredentialRequest struct {
	ctx context.Context
	ApiService *CloudCredentialServiceAPIService
	id string
	v1CloudCredential *V1CloudCredential
	updateMask *string
}

// Desired cloud credential configuration.
func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) V1CloudCredential(v1CloudCredential V1CloudCredential) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	r.v1CloudCredential = &v1CloudCredential
	return r
}

// Specifies the field that should be updated to the value specified in cloud_credentials.
func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) UpdateMask(updateMask string) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	r.updateMask = &updateMask
	return r
}

func (r ApiCloudCredentialServiceUpdateCloudCredentialRequest) Execute() (*V1CloudCredential, *http.Response, error) {
	return r.ApiService.CloudCredentialServiceUpdateCloudCredentialExecute(r)
}

/*
CloudCredentialServiceUpdateCloudCredential Update API updates a cloud credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the cloud credential to be updated.
 @return ApiCloudCredentialServiceUpdateCloudCredentialRequest
*/
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceUpdateCloudCredential(ctx context.Context, id string) ApiCloudCredentialServiceUpdateCloudCredentialRequest {
	return ApiCloudCredentialServiceUpdateCloudCredentialRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1CloudCredential
func (a *CloudCredentialServiceAPIService) CloudCredentialServiceUpdateCloudCredentialExecute(r ApiCloudCredentialServiceUpdateCloudCredentialRequest) (*V1CloudCredential, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1CloudCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudCredentialServiceAPIService.CloudCredentialServiceUpdateCloudCredential")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/cloudCredentials/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1CloudCredential == nil {
		return localVarReturnValue, nil, reportError("v1CloudCredential is required and must be specified")
	}

	if r.updateMask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateMask", r.updateMask, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1CloudCredential
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
