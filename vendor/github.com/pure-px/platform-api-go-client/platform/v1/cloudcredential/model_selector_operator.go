/*
public/portworx/platform/cloudcredential/apiv1/cloudcredential.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudcredential

import (
	"encoding/json"
	"fmt"
)

// SelectorOperator Operator specifies the relationship between the provided (key,value) pairs in the response.   - OPERATOR_UNSPECIFIED: Unspecified, do not use.  - IN: IN specifies that the key should be associated with atleast 1 of the element in value list.  - NOT_IN: NOT_IN specifies that the key should not be associated with any of the element in value list.
type SelectorOperator string

// List of SelectorOperator
const (
	SELECTOROPERATOR_OPERATOR_UNSPECIFIED SelectorOperator = "OPERATOR_UNSPECIFIED"
	SELECTOROPERATOR_IN SelectorOperator = "IN"
	SELECTOROPERATOR_NOT_IN SelectorOperator = "NOT_IN"
)

// All allowed values of SelectorOperator enum
var AllowedSelectorOperatorEnumValues = []SelectorOperator{
	"OPERATOR_UNSPECIFIED",
	"IN",
	"NOT_IN",
}

func (v *SelectorOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SelectorOperator(value)
	for _, existing := range AllowedSelectorOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SelectorOperator", value)
}

// NewSelectorOperatorFromValue returns a pointer to a valid SelectorOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSelectorOperatorFromValue(v string) (*SelectorOperator, error) {
	ev := SelectorOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SelectorOperator: valid values are %v", v, AllowedSelectorOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SelectorOperator) IsValid() bool {
	for _, existing := range AllowedSelectorOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SelectorOperator value
func (v SelectorOperator) Ptr() *SelectorOperator {
	return &v
}

type NullableSelectorOperator struct {
	value *SelectorOperator
	isSet bool
}

func (v NullableSelectorOperator) Get() *SelectorOperator {
	return v.value
}

func (v *NullableSelectorOperator) Set(val *SelectorOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorOperator(val *SelectorOperator) *NullableSelectorOperator {
	return &NullableSelectorOperator{value: val, isSet: true}
}

func (v NullableSelectorOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

