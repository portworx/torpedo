/*
public/portworx/platform/project/apiv1/project.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package project

import (
	"encoding/json"
)

// checks if the V1ListProjectsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ListProjectsRequest{}

// V1ListProjectsRequest ListProjectsRequest  is the request message to the ListProjects API and it takes the multiple selector details for which the projects visible to the caller will be returned.
type V1ListProjectsRequest struct {
	// Tenant id for which projects to be listed.
	TenantId *string `json:"tenantId,omitempty"`
	ResourceSelector *V1ResourceSelector `json:"resourceSelector,omitempty"`
	LabelSelector *V1Selector `json:"labelSelector,omitempty"`
	FieldSelector *V1Selector `json:"fieldSelector,omitempty"`
	RespData *V1RespData `json:"respData,omitempty"`
	Pagination *V1PageBasedPaginationRequest `json:"pagination,omitempty"`
	Sort *V1Sort `json:"sort,omitempty"`
}

// NewV1ListProjectsRequest instantiates a new V1ListProjectsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListProjectsRequest() *V1ListProjectsRequest {
	this := V1ListProjectsRequest{}
	var respData V1RespData = V1RESPDATA_RESP_DATA_UNSPECIFIED
	this.RespData = &respData
	return &this
}

// NewV1ListProjectsRequestWithDefaults instantiates a new V1ListProjectsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListProjectsRequestWithDefaults() *V1ListProjectsRequest {
	this := V1ListProjectsRequest{}
	var respData V1RespData = V1RESPDATA_RESP_DATA_UNSPECIFIED
	this.RespData = &respData
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *V1ListProjectsRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetResourceSelector returns the ResourceSelector field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetResourceSelector() V1ResourceSelector {
	if o == nil || IsNil(o.ResourceSelector) {
		var ret V1ResourceSelector
		return ret
	}
	return *o.ResourceSelector
}

// GetResourceSelectorOk returns a tuple with the ResourceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetResourceSelectorOk() (*V1ResourceSelector, bool) {
	if o == nil || IsNil(o.ResourceSelector) {
		return nil, false
	}
	return o.ResourceSelector, true
}

// HasResourceSelector returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasResourceSelector() bool {
	if o != nil && !IsNil(o.ResourceSelector) {
		return true
	}

	return false
}

// SetResourceSelector gets a reference to the given V1ResourceSelector and assigns it to the ResourceSelector field.
func (o *V1ListProjectsRequest) SetResourceSelector(v V1ResourceSelector) {
	o.ResourceSelector = &v
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetLabelSelector() V1Selector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret V1Selector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetLabelSelectorOk() (*V1Selector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1Selector and assigns it to the LabelSelector field.
func (o *V1ListProjectsRequest) SetLabelSelector(v V1Selector) {
	o.LabelSelector = &v
}

// GetFieldSelector returns the FieldSelector field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetFieldSelector() V1Selector {
	if o == nil || IsNil(o.FieldSelector) {
		var ret V1Selector
		return ret
	}
	return *o.FieldSelector
}

// GetFieldSelectorOk returns a tuple with the FieldSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetFieldSelectorOk() (*V1Selector, bool) {
	if o == nil || IsNil(o.FieldSelector) {
		return nil, false
	}
	return o.FieldSelector, true
}

// HasFieldSelector returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasFieldSelector() bool {
	if o != nil && !IsNil(o.FieldSelector) {
		return true
	}

	return false
}

// SetFieldSelector gets a reference to the given V1Selector and assigns it to the FieldSelector field.
func (o *V1ListProjectsRequest) SetFieldSelector(v V1Selector) {
	o.FieldSelector = &v
}

// GetRespData returns the RespData field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetRespData() V1RespData {
	if o == nil || IsNil(o.RespData) {
		var ret V1RespData
		return ret
	}
	return *o.RespData
}

// GetRespDataOk returns a tuple with the RespData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetRespDataOk() (*V1RespData, bool) {
	if o == nil || IsNil(o.RespData) {
		return nil, false
	}
	return o.RespData, true
}

// HasRespData returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasRespData() bool {
	if o != nil && !IsNil(o.RespData) {
		return true
	}

	return false
}

// SetRespData gets a reference to the given V1RespData and assigns it to the RespData field.
func (o *V1ListProjectsRequest) SetRespData(v V1RespData) {
	o.RespData = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetPagination() V1PageBasedPaginationRequest {
	if o == nil || IsNil(o.Pagination) {
		var ret V1PageBasedPaginationRequest
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetPaginationOk() (*V1PageBasedPaginationRequest, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given V1PageBasedPaginationRequest and assigns it to the Pagination field.
func (o *V1ListProjectsRequest) SetPagination(v V1PageBasedPaginationRequest) {
	o.Pagination = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *V1ListProjectsRequest) GetSort() V1Sort {
	if o == nil || IsNil(o.Sort) {
		var ret V1Sort
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListProjectsRequest) GetSortOk() (*V1Sort, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *V1ListProjectsRequest) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given V1Sort and assigns it to the Sort field.
func (o *V1ListProjectsRequest) SetSort(v V1Sort) {
	o.Sort = &v
}

func (o V1ListProjectsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ListProjectsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.ResourceSelector) {
		toSerialize["resourceSelector"] = o.ResourceSelector
	}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !IsNil(o.FieldSelector) {
		toSerialize["fieldSelector"] = o.FieldSelector
	}
	if !IsNil(o.RespData) {
		toSerialize["respData"] = o.RespData
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

type NullableV1ListProjectsRequest struct {
	value *V1ListProjectsRequest
	isSet bool
}

func (v NullableV1ListProjectsRequest) Get() *V1ListProjectsRequest {
	return v.value
}

func (v *NullableV1ListProjectsRequest) Set(val *V1ListProjectsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListProjectsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListProjectsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListProjectsRequest(val *V1ListProjectsRequest) *NullableV1ListProjectsRequest {
	return &NullableV1ListProjectsRequest{value: val, isSet: true}
}

func (v NullableV1ListProjectsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListProjectsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


