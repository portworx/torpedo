/*
public/portworx/platform/backuplocation/apiv1/backuplocation.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backuplocation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BackupLocationServiceAPIService BackupLocationServiceAPI service
type BackupLocationServiceAPIService service

type ApiBackupLocationServiceCreateBackupLocationRequest struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	tenantId string
	v1BackupLocation *V1BackupLocation
}

// Backup location configuration.
func (r ApiBackupLocationServiceCreateBackupLocationRequest) V1BackupLocation(v1BackupLocation V1BackupLocation) ApiBackupLocationServiceCreateBackupLocationRequest {
	r.v1BackupLocation = &v1BackupLocation
	return r
}

func (r ApiBackupLocationServiceCreateBackupLocationRequest) Execute() (*V1BackupLocation, *http.Response, error) {
	return r.ApiService.BackupLocationServiceCreateBackupLocationExecute(r)
}

/*
BackupLocationServiceCreateBackupLocation Create API creates a backup location for a tenant.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenantId The parent tenant id under which backup location will be created.
 @return ApiBackupLocationServiceCreateBackupLocationRequest
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceCreateBackupLocation(ctx context.Context, tenantId string) ApiBackupLocationServiceCreateBackupLocationRequest {
	return ApiBackupLocationServiceCreateBackupLocationRequest{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return V1BackupLocation
func (a *BackupLocationServiceAPIService) BackupLocationServiceCreateBackupLocationExecute(r ApiBackupLocationServiceCreateBackupLocationRequest) (*V1BackupLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceCreateBackupLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/tenants/{tenantId}/backupLocations"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1BackupLocation == nil {
		return localVarReturnValue, nil, reportError("v1BackupLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1BackupLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupLocationServiceDeleteBackupLocationRequest struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	id string
}

func (r ApiBackupLocationServiceDeleteBackupLocationRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BackupLocationServiceDeleteBackupLocationExecute(r)
}

/*
BackupLocationServiceDeleteBackupLocation Delete API deletes a backup location.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the backup location.
 @return ApiBackupLocationServiceDeleteBackupLocationRequest
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceDeleteBackupLocation(ctx context.Context, id string) ApiBackupLocationServiceDeleteBackupLocationRequest {
	return ApiBackupLocationServiceDeleteBackupLocationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *BackupLocationServiceAPIService) BackupLocationServiceDeleteBackupLocationExecute(r ApiBackupLocationServiceDeleteBackupLocationRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceDeleteBackupLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/backupLocations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupLocationServiceGetBackupLocationRequest struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	id string
}

func (r ApiBackupLocationServiceGetBackupLocationRequest) Execute() (*V1BackupLocation, *http.Response, error) {
	return r.ApiService.BackupLocationServiceGetBackupLocationExecute(r)
}

/*
BackupLocationServiceGetBackupLocation Get API returns the backup location.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the backup location.
 @return ApiBackupLocationServiceGetBackupLocationRequest
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceGetBackupLocation(ctx context.Context, id string) ApiBackupLocationServiceGetBackupLocationRequest {
	return ApiBackupLocationServiceGetBackupLocationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1BackupLocation
func (a *BackupLocationServiceAPIService) BackupLocationServiceGetBackupLocationExecute(r ApiBackupLocationServiceGetBackupLocationRequest) (*V1BackupLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceGetBackupLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/backupLocations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupLocationServiceListBackupLocationsRequest struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	tenantId *string
	paginationPageNumber *string
	paginationPageSize *string
	respData *string
	sortSortBy *string
	sortSortOrder *string
}

// Tenant ID for which the backup locations will be listed.
func (r ApiBackupLocationServiceListBackupLocationsRequest) TenantId(tenantId string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.tenantId = &tenantId
	return r
}

// Page number is the page number to return based on the size.
func (r ApiBackupLocationServiceListBackupLocationsRequest) PaginationPageNumber(paginationPageNumber string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiBackupLocationServiceListBackupLocationsRequest) PaginationPageSize(paginationPageSize string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Response data flags for listing backup locations.   - RESP_DATA_UNSPECIFIED: RespData Unspecified. complete resource will be populated.  - INDEX: only uid, name, labels should be populated.  - LITE: only meta data should be populated.  - FULL: complete resource should be populated.
func (r ApiBackupLocationServiceListBackupLocationsRequest) RespData(respData string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.respData = &respData
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiBackupLocationServiceListBackupLocationsRequest) SortSortBy(sortSortBy string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiBackupLocationServiceListBackupLocationsRequest) SortSortOrder(sortSortOrder string) ApiBackupLocationServiceListBackupLocationsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiBackupLocationServiceListBackupLocationsRequest) Execute() (*V1ListBackupLocationsResponse, *http.Response, error) {
	return r.ApiService.BackupLocationServiceListBackupLocationsExecute(r)
}

/*
BackupLocationServiceListBackupLocations List API lists all the backup locations for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBackupLocationServiceListBackupLocationsRequest
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceListBackupLocations(ctx context.Context) ApiBackupLocationServiceListBackupLocationsRequest {
	return ApiBackupLocationServiceListBackupLocationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListBackupLocationsResponse
func (a *BackupLocationServiceAPIService) BackupLocationServiceListBackupLocationsExecute(r ApiBackupLocationServiceListBackupLocationsRequest) (*V1ListBackupLocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListBackupLocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceListBackupLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/backupLocations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "")
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	if r.respData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respData", r.respData, "")
	} else {
		var defaultValue string = "RESP_DATA_UNSPECIFIED"
		r.respData = &defaultValue
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupLocationServiceListBackupLocations2Request struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	v1ListBackupLocationsRequest *V1ListBackupLocationsRequest
}

// Request to list the backup locations for a tenant or a project.
func (r ApiBackupLocationServiceListBackupLocations2Request) V1ListBackupLocationsRequest(v1ListBackupLocationsRequest V1ListBackupLocationsRequest) ApiBackupLocationServiceListBackupLocations2Request {
	r.v1ListBackupLocationsRequest = &v1ListBackupLocationsRequest
	return r
}

func (r ApiBackupLocationServiceListBackupLocations2Request) Execute() (*V1ListBackupLocationsResponse, *http.Response, error) {
	return r.ApiService.BackupLocationServiceListBackupLocations2Execute(r)
}

/*
BackupLocationServiceListBackupLocations2 List API lists all the backup locations for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBackupLocationServiceListBackupLocations2Request
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceListBackupLocations2(ctx context.Context) ApiBackupLocationServiceListBackupLocations2Request {
	return ApiBackupLocationServiceListBackupLocations2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListBackupLocationsResponse
func (a *BackupLocationServiceAPIService) BackupLocationServiceListBackupLocations2Execute(r ApiBackupLocationServiceListBackupLocations2Request) (*V1ListBackupLocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListBackupLocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceListBackupLocations2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/backupLocations:search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1ListBackupLocationsRequest == nil {
		return localVarReturnValue, nil, reportError("v1ListBackupLocationsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1ListBackupLocationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBackupLocationServiceUpdateBackupLocationRequest struct {
	ctx context.Context
	ApiService *BackupLocationServiceAPIService
	id string
	v1BackupLocation *V1BackupLocation
	updateMask *string
}

// Desired backup location configuration.
func (r ApiBackupLocationServiceUpdateBackupLocationRequest) V1BackupLocation(v1BackupLocation V1BackupLocation) ApiBackupLocationServiceUpdateBackupLocationRequest {
	r.v1BackupLocation = &v1BackupLocation
	return r
}

// Specifies the field that should be updated to the value specified in backup_location.
func (r ApiBackupLocationServiceUpdateBackupLocationRequest) UpdateMask(updateMask string) ApiBackupLocationServiceUpdateBackupLocationRequest {
	r.updateMask = &updateMask
	return r
}

func (r ApiBackupLocationServiceUpdateBackupLocationRequest) Execute() (*V1BackupLocation, *http.Response, error) {
	return r.ApiService.BackupLocationServiceUpdateBackupLocationExecute(r)
}

/*
BackupLocationServiceUpdateBackupLocation Update API updates a backup location.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of the backup location.
 @return ApiBackupLocationServiceUpdateBackupLocationRequest
*/
func (a *BackupLocationServiceAPIService) BackupLocationServiceUpdateBackupLocation(ctx context.Context, id string) ApiBackupLocationServiceUpdateBackupLocationRequest {
	return ApiBackupLocationServiceUpdateBackupLocationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1BackupLocation
func (a *BackupLocationServiceAPIService) BackupLocationServiceUpdateBackupLocationExecute(r ApiBackupLocationServiceUpdateBackupLocationRequest) (*V1BackupLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1BackupLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BackupLocationServiceAPIService.BackupLocationServiceUpdateBackupLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/backupLocations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1BackupLocation == nil {
		return localVarReturnValue, nil, reportError("v1BackupLocation is required and must be specified")
	}

	if r.updateMask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateMask", r.updateMask, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1BackupLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
