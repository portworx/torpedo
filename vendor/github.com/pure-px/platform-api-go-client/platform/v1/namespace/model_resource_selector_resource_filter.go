/*
public/portworx/platform/namespace/apiv1/namespace.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package namespace

import (
	"encoding/json"
)

// checks if the ResourceSelectorResourceFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSelectorResourceFilter{}

// ResourceSelectorResourceFilter ResourceFilter is filter for a given resource type.
type ResourceSelectorResourceFilter struct {
	ResourceType *V1InfraResourceType `json:"resourceType,omitempty"`
	Op *SelectorOperator `json:"op,omitempty"`
	// Value of key,value pair against which filtering needs to be performs.
	Values []string `json:"values,omitempty"`
}

// NewResourceSelectorResourceFilter instantiates a new ResourceSelectorResourceFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSelectorResourceFilter() *ResourceSelectorResourceFilter {
	this := ResourceSelectorResourceFilter{}
	var resourceType V1InfraResourceType = V1INFRARESOURCETYPE_TYPE_UNSPECIFIED
	this.ResourceType = &resourceType
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// NewResourceSelectorResourceFilterWithDefaults instantiates a new ResourceSelectorResourceFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSelectorResourceFilterWithDefaults() *ResourceSelectorResourceFilter {
	this := ResourceSelectorResourceFilter{}
	var resourceType V1InfraResourceType = V1INFRARESOURCETYPE_TYPE_UNSPECIFIED
	this.ResourceType = &resourceType
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceSelectorResourceFilter) GetResourceType() V1InfraResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret V1InfraResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelectorResourceFilter) GetResourceTypeOk() (*V1InfraResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceSelectorResourceFilter) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given V1InfraResourceType and assigns it to the ResourceType field.
func (o *ResourceSelectorResourceFilter) SetResourceType(v V1InfraResourceType) {
	o.ResourceType = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *ResourceSelectorResourceFilter) GetOp() SelectorOperator {
	if o == nil || IsNil(o.Op) {
		var ret SelectorOperator
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelectorResourceFilter) GetOpOk() (*SelectorOperator, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *ResourceSelectorResourceFilter) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given SelectorOperator and assigns it to the Op field.
func (o *ResourceSelectorResourceFilter) SetOp(v SelectorOperator) {
	o.Op = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ResourceSelectorResourceFilter) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelectorResourceFilter) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ResourceSelectorResourceFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ResourceSelectorResourceFilter) SetValues(v []string) {
	o.Values = v
}

func (o ResourceSelectorResourceFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSelectorResourceFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableResourceSelectorResourceFilter struct {
	value *ResourceSelectorResourceFilter
	isSet bool
}

func (v NullableResourceSelectorResourceFilter) Get() *ResourceSelectorResourceFilter {
	return v.value
}

func (v *NullableResourceSelectorResourceFilter) Set(val *ResourceSelectorResourceFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSelectorResourceFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSelectorResourceFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSelectorResourceFilter(val *ResourceSelectorResourceFilter) *NullableResourceSelectorResourceFilter {
	return &NullableResourceSelectorResourceFilter{value: val, isSet: true}
}

func (v NullableResourceSelectorResourceFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSelectorResourceFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


