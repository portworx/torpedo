/*
public/portworx/platform/namespace/apiv1/namespace.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package namespace

import (
	"encoding/json"
)

// checks if the V1ListNamespacesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ListNamespacesRequest{}

// V1ListNamespacesRequest ListNamespacesRequest request message for the ListNamespaces API.
type V1ListNamespacesRequest struct {
	// tenant ID for which namespace need to be fetched.
	TenantId *string `json:"tenantId,omitempty"`
	LabelSelector *V1Selector `json:"labelSelector,omitempty"`
	FieldSelector *V1Selector `json:"fieldSelector,omitempty"`
	InfraResourceSelector *V1ResourceSelector `json:"infraResourceSelector,omitempty"`
	RespData *V1RespData `json:"respData,omitempty"`
	Sort *V1Sort `json:"sort,omitempty"`
	Pagination *V1PageBasedPaginationRequest `json:"pagination,omitempty"`
}

// NewV1ListNamespacesRequest instantiates a new V1ListNamespacesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListNamespacesRequest() *V1ListNamespacesRequest {
	this := V1ListNamespacesRequest{}
	var respData V1RespData = V1RESPDATA_RESP_DATA_UNSPECIFIED
	this.RespData = &respData
	return &this
}

// NewV1ListNamespacesRequestWithDefaults instantiates a new V1ListNamespacesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListNamespacesRequestWithDefaults() *V1ListNamespacesRequest {
	this := V1ListNamespacesRequest{}
	var respData V1RespData = V1RESPDATA_RESP_DATA_UNSPECIFIED
	this.RespData = &respData
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *V1ListNamespacesRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetLabelSelector() V1Selector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret V1Selector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetLabelSelectorOk() (*V1Selector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1Selector and assigns it to the LabelSelector field.
func (o *V1ListNamespacesRequest) SetLabelSelector(v V1Selector) {
	o.LabelSelector = &v
}

// GetFieldSelector returns the FieldSelector field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetFieldSelector() V1Selector {
	if o == nil || IsNil(o.FieldSelector) {
		var ret V1Selector
		return ret
	}
	return *o.FieldSelector
}

// GetFieldSelectorOk returns a tuple with the FieldSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetFieldSelectorOk() (*V1Selector, bool) {
	if o == nil || IsNil(o.FieldSelector) {
		return nil, false
	}
	return o.FieldSelector, true
}

// HasFieldSelector returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasFieldSelector() bool {
	if o != nil && !IsNil(o.FieldSelector) {
		return true
	}

	return false
}

// SetFieldSelector gets a reference to the given V1Selector and assigns it to the FieldSelector field.
func (o *V1ListNamespacesRequest) SetFieldSelector(v V1Selector) {
	o.FieldSelector = &v
}

// GetInfraResourceSelector returns the InfraResourceSelector field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetInfraResourceSelector() V1ResourceSelector {
	if o == nil || IsNil(o.InfraResourceSelector) {
		var ret V1ResourceSelector
		return ret
	}
	return *o.InfraResourceSelector
}

// GetInfraResourceSelectorOk returns a tuple with the InfraResourceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetInfraResourceSelectorOk() (*V1ResourceSelector, bool) {
	if o == nil || IsNil(o.InfraResourceSelector) {
		return nil, false
	}
	return o.InfraResourceSelector, true
}

// HasInfraResourceSelector returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasInfraResourceSelector() bool {
	if o != nil && !IsNil(o.InfraResourceSelector) {
		return true
	}

	return false
}

// SetInfraResourceSelector gets a reference to the given V1ResourceSelector and assigns it to the InfraResourceSelector field.
func (o *V1ListNamespacesRequest) SetInfraResourceSelector(v V1ResourceSelector) {
	o.InfraResourceSelector = &v
}

// GetRespData returns the RespData field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetRespData() V1RespData {
	if o == nil || IsNil(o.RespData) {
		var ret V1RespData
		return ret
	}
	return *o.RespData
}

// GetRespDataOk returns a tuple with the RespData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetRespDataOk() (*V1RespData, bool) {
	if o == nil || IsNil(o.RespData) {
		return nil, false
	}
	return o.RespData, true
}

// HasRespData returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasRespData() bool {
	if o != nil && !IsNil(o.RespData) {
		return true
	}

	return false
}

// SetRespData gets a reference to the given V1RespData and assigns it to the RespData field.
func (o *V1ListNamespacesRequest) SetRespData(v V1RespData) {
	o.RespData = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetSort() V1Sort {
	if o == nil || IsNil(o.Sort) {
		var ret V1Sort
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetSortOk() (*V1Sort, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given V1Sort and assigns it to the Sort field.
func (o *V1ListNamespacesRequest) SetSort(v V1Sort) {
	o.Sort = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *V1ListNamespacesRequest) GetPagination() V1PageBasedPaginationRequest {
	if o == nil || IsNil(o.Pagination) {
		var ret V1PageBasedPaginationRequest
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListNamespacesRequest) GetPaginationOk() (*V1PageBasedPaginationRequest, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *V1ListNamespacesRequest) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given V1PageBasedPaginationRequest and assigns it to the Pagination field.
func (o *V1ListNamespacesRequest) SetPagination(v V1PageBasedPaginationRequest) {
	o.Pagination = &v
}

func (o V1ListNamespacesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ListNamespacesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !IsNil(o.FieldSelector) {
		toSerialize["fieldSelector"] = o.FieldSelector
	}
	if !IsNil(o.InfraResourceSelector) {
		toSerialize["infraResourceSelector"] = o.InfraResourceSelector
	}
	if !IsNil(o.RespData) {
		toSerialize["respData"] = o.RespData
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableV1ListNamespacesRequest struct {
	value *V1ListNamespacesRequest
	isSet bool
}

func (v NullableV1ListNamespacesRequest) Get() *V1ListNamespacesRequest {
	return v.value
}

func (v *NullableV1ListNamespacesRequest) Set(val *V1ListNamespacesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListNamespacesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListNamespacesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListNamespacesRequest(val *V1ListNamespacesRequest) *NullableV1ListNamespacesRequest {
	return &NullableV1ListNamespacesRequest{value: val, isSet: true}
}

func (v NullableV1ListNamespacesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListNamespacesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


