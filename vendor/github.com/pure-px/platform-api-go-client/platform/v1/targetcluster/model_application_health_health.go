/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"encoding/json"
	"fmt"
)

// ApplicationHealthHealth Health determines health of an application.   - HEALTH_UNSPECIFIED: Must be set in the proto file; ignore.  - UNKNOWN: Application health is unknown.  - HEALTHY: Application is healthy.  - UNHEALTHY: Application is unhealthy.
type ApplicationHealthHealth string

// List of ApplicationHealthHealth
const (
	APPLICATIONHEALTHHEALTH_HEALTH_UNSPECIFIED ApplicationHealthHealth = "HEALTH_UNSPECIFIED"
	APPLICATIONHEALTHHEALTH_UNKNOWN ApplicationHealthHealth = "UNKNOWN"
	APPLICATIONHEALTHHEALTH_HEALTHY ApplicationHealthHealth = "HEALTHY"
	APPLICATIONHEALTHHEALTH_UNHEALTHY ApplicationHealthHealth = "UNHEALTHY"
)

// All allowed values of ApplicationHealthHealth enum
var AllowedApplicationHealthHealthEnumValues = []ApplicationHealthHealth{
	"HEALTH_UNSPECIFIED",
	"UNKNOWN",
	"HEALTHY",
	"UNHEALTHY",
}

func (v *ApplicationHealthHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationHealthHealth(value)
	for _, existing := range AllowedApplicationHealthHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationHealthHealth", value)
}

// NewApplicationHealthHealthFromValue returns a pointer to a valid ApplicationHealthHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationHealthHealthFromValue(v string) (*ApplicationHealthHealth, error) {
	ev := ApplicationHealthHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationHealthHealth: valid values are %v", v, AllowedApplicationHealthHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationHealthHealth) IsValid() bool {
	for _, existing := range AllowedApplicationHealthHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationHealthHealth value
func (v ApplicationHealthHealth) Ptr() *ApplicationHealthHealth {
	return &v
}

type NullableApplicationHealthHealth struct {
	value *ApplicationHealthHealth
	isSet bool
}

func (v NullableApplicationHealthHealth) Get() *ApplicationHealthHealth {
	return v.value
}

func (v *NullableApplicationHealthHealth) Set(val *ApplicationHealthHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationHealthHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationHealthHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationHealthHealth(val *ApplicationHealthHealth) *NullableApplicationHealthHealth {
	return &NullableApplicationHealthHealth{value: val, isSet: true}
}

func (v NullableApplicationHealthHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationHealthHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

