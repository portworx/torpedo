/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TargetClusterServiceAPIService TargetClusterServiceAPI service
type TargetClusterServiceAPIService service

type ApiTargetClusterServiceDeleteTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceAPIService
	id string
	force *bool
}

// Flag to indicate force delete.
func (r ApiTargetClusterServiceDeleteTargetClusterRequest) Force(force bool) ApiTargetClusterServiceDeleteTargetClusterRequest {
	r.force = &force
	return r
}

func (r ApiTargetClusterServiceDeleteTargetClusterRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TargetClusterServiceDeleteTargetClusterExecute(r)
}

/*
TargetClusterServiceDeleteTargetCluster DeleteTargetCluster API deletes the specified TargetCluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique identifier of the cluster whose details needs to be fetched.
 @return ApiTargetClusterServiceDeleteTargetClusterRequest
*/
func (a *TargetClusterServiceAPIService) TargetClusterServiceDeleteTargetCluster(ctx context.Context, id string) ApiTargetClusterServiceDeleteTargetClusterRequest {
	return ApiTargetClusterServiceDeleteTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TargetClusterServiceAPIService) TargetClusterServiceDeleteTargetClusterExecute(r ApiTargetClusterServiceDeleteTargetClusterRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceAPIService.TargetClusterServiceDeleteTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/clusters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceGetTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceAPIService
	id string
}

func (r ApiTargetClusterServiceGetTargetClusterRequest) Execute() (*V1TargetCluster, *http.Response, error) {
	return r.ApiService.TargetClusterServiceGetTargetClusterExecute(r)
}

/*
TargetClusterServiceGetTargetCluster GetTargetCluster API returns the info about the TargetCluster for given name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Unique identifier of the cluster whose details needs to be fetched.
 @return ApiTargetClusterServiceGetTargetClusterRequest
*/
func (a *TargetClusterServiceAPIService) TargetClusterServiceGetTargetCluster(ctx context.Context, id string) ApiTargetClusterServiceGetTargetClusterRequest {
	return ApiTargetClusterServiceGetTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1TargetCluster
func (a *TargetClusterServiceAPIService) TargetClusterServiceGetTargetClusterExecute(r ApiTargetClusterServiceGetTargetClusterRequest) (*V1TargetCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1TargetCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceAPIService.TargetClusterServiceGetTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/clusters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceListTargetClustersRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceAPIService
	tenantId *string
	paginationPageNumber *string
	paginationPageSize *string
	sortSortBy *string
	sortSortOrder *string
	respData *string
}

// List target clusters associated with a tenant.
func (r ApiTargetClusterServiceListTargetClustersRequest) TenantId(tenantId string) ApiTargetClusterServiceListTargetClustersRequest {
	r.tenantId = &tenantId
	return r
}

// Page number is the page number to return based on the size.
func (r ApiTargetClusterServiceListTargetClustersRequest) PaginationPageNumber(paginationPageNumber string) ApiTargetClusterServiceListTargetClustersRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiTargetClusterServiceListTargetClustersRequest) PaginationPageSize(paginationPageSize string) ApiTargetClusterServiceListTargetClustersRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiTargetClusterServiceListTargetClustersRequest) SortSortBy(sortSortBy string) ApiTargetClusterServiceListTargetClustersRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiTargetClusterServiceListTargetClustersRequest) SortSortOrder(sortSortOrder string) ApiTargetClusterServiceListTargetClustersRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

// Response data flags for listing target clusters.   - RESP_DATA_UNSPECIFIED: RespData Unspecified. complete resource will be populated.  - INDEX: only uid, name, labels should be populated.  - LITE: only meta data should be populated.  - FULL: complete resource should be populated.
func (r ApiTargetClusterServiceListTargetClustersRequest) RespData(respData string) ApiTargetClusterServiceListTargetClustersRequest {
	r.respData = &respData
	return r
}

func (r ApiTargetClusterServiceListTargetClustersRequest) Execute() (*V1ListTargetClustersResponse, *http.Response, error) {
	return r.ApiService.TargetClusterServiceListTargetClustersExecute(r)
}

/*
TargetClusterServiceListTargetClusters List API lists all the target clusters for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTargetClusterServiceListTargetClustersRequest
*/
func (a *TargetClusterServiceAPIService) TargetClusterServiceListTargetClusters(ctx context.Context) ApiTargetClusterServiceListTargetClustersRequest {
	return ApiTargetClusterServiceListTargetClustersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTargetClustersResponse
func (a *TargetClusterServiceAPIService) TargetClusterServiceListTargetClustersExecute(r ApiTargetClusterServiceListTargetClustersRequest) (*V1ListTargetClustersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTargetClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceAPIService.TargetClusterServiceListTargetClusters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "")
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	if r.respData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respData", r.respData, "")
	} else {
		var defaultValue string = "RESP_DATA_UNSPECIFIED"
		r.respData = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceListTargetClusters2Request struct {
	ctx context.Context
	ApiService *TargetClusterServiceAPIService
	v1ListTargetClustersRequest *V1ListTargetClustersRequest
}

// ListTargetClusterRequest is a request message to the List TargetCluster API.
func (r ApiTargetClusterServiceListTargetClusters2Request) V1ListTargetClustersRequest(v1ListTargetClustersRequest V1ListTargetClustersRequest) ApiTargetClusterServiceListTargetClusters2Request {
	r.v1ListTargetClustersRequest = &v1ListTargetClustersRequest
	return r
}

func (r ApiTargetClusterServiceListTargetClusters2Request) Execute() (*V1ListTargetClustersResponse, *http.Response, error) {
	return r.ApiService.TargetClusterServiceListTargetClusters2Execute(r)
}

/*
TargetClusterServiceListTargetClusters2 List API lists all the target clusters for a tenant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTargetClusterServiceListTargetClusters2Request
*/
func (a *TargetClusterServiceAPIService) TargetClusterServiceListTargetClusters2(ctx context.Context) ApiTargetClusterServiceListTargetClusters2Request {
	return ApiTargetClusterServiceListTargetClusters2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTargetClustersResponse
func (a *TargetClusterServiceAPIService) TargetClusterServiceListTargetClusters2Execute(r ApiTargetClusterServiceListTargetClusters2Request) (*V1ListTargetClustersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTargetClustersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceAPIService.TargetClusterServiceListTargetClusters2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/clusters:search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1ListTargetClustersRequest == nil {
		return localVarReturnValue, nil, reportError("v1ListTargetClustersRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1ListTargetClustersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTargetClusterServiceUpdateTargetClusterRequest struct {
	ctx context.Context
	ApiService *TargetClusterServiceAPIService
	targetClusterMetaUid string
	targetClusterDetails *TargetClusterDetails
}

// Target cluster details.
func (r ApiTargetClusterServiceUpdateTargetClusterRequest) TargetClusterDetails(targetClusterDetails TargetClusterDetails) ApiTargetClusterServiceUpdateTargetClusterRequest {
	r.targetClusterDetails = &targetClusterDetails
	return r
}

func (r ApiTargetClusterServiceUpdateTargetClusterRequest) Execute() (*V1TargetCluster, *http.Response, error) {
	return r.ApiService.TargetClusterServiceUpdateTargetClusterExecute(r)
}

/*
TargetClusterServiceUpdateTargetCluster UpdateTargetCluster API updates the metadata(e.g name/labels/annotations and desc) of the specified TargetCluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetClusterMetaUid UID of the resource of the format <resource prefix>-<uuid>.
 @return ApiTargetClusterServiceUpdateTargetClusterRequest
*/
func (a *TargetClusterServiceAPIService) TargetClusterServiceUpdateTargetCluster(ctx context.Context, targetClusterMetaUid string) ApiTargetClusterServiceUpdateTargetClusterRequest {
	return ApiTargetClusterServiceUpdateTargetClusterRequest{
		ApiService: a,
		ctx: ctx,
		targetClusterMetaUid: targetClusterMetaUid,
	}
}

// Execute executes the request
//  @return V1TargetCluster
func (a *TargetClusterServiceAPIService) TargetClusterServiceUpdateTargetClusterExecute(r ApiTargetClusterServiceUpdateTargetClusterRequest) (*V1TargetCluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1TargetCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TargetClusterServiceAPIService.TargetClusterServiceUpdateTargetCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/v1/clusters/{targetCluster.meta.uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetCluster.meta.uid"+"}", url.PathEscape(parameterValueToString(r.targetClusterMetaUid, "targetClusterMetaUid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.targetClusterDetails == nil {
		return localVarReturnValue, nil, reportError("targetClusterDetails is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.targetClusterDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
