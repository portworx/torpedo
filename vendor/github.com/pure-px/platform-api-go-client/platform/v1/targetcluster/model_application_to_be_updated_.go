/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"encoding/json"
)

// checks if the ApplicationToBeUpdated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationToBeUpdated{}

// ApplicationToBeUpdated struct for ApplicationToBeUpdated
type ApplicationToBeUpdated struct {
	Meta *MetadataOfTheApplicationResourceMeta `json:"meta,omitempty"`
	Config *V1Config `json:"config,omitempty"`
	Status *Applicationv1Status `json:"status,omitempty"`
}

// NewApplicationToBeUpdated instantiates a new ApplicationToBeUpdated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationToBeUpdated() *ApplicationToBeUpdated {
	this := ApplicationToBeUpdated{}
	return &this
}

// NewApplicationToBeUpdatedWithDefaults instantiates a new ApplicationToBeUpdated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationToBeUpdatedWithDefaults() *ApplicationToBeUpdated {
	this := ApplicationToBeUpdated{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ApplicationToBeUpdated) GetMeta() MetadataOfTheApplicationResourceMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetadataOfTheApplicationResourceMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationToBeUpdated) GetMetaOk() (*MetadataOfTheApplicationResourceMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ApplicationToBeUpdated) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetadataOfTheApplicationResourceMeta and assigns it to the Meta field.
func (o *ApplicationToBeUpdated) SetMeta(v MetadataOfTheApplicationResourceMeta) {
	o.Meta = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ApplicationToBeUpdated) GetConfig() V1Config {
	if o == nil || IsNil(o.Config) {
		var ret V1Config
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationToBeUpdated) GetConfigOk() (*V1Config, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ApplicationToBeUpdated) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given V1Config and assigns it to the Config field.
func (o *ApplicationToBeUpdated) SetConfig(v V1Config) {
	o.Config = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApplicationToBeUpdated) GetStatus() Applicationv1Status {
	if o == nil || IsNil(o.Status) {
		var ret Applicationv1Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationToBeUpdated) GetStatusOk() (*Applicationv1Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApplicationToBeUpdated) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Applicationv1Status and assigns it to the Status field.
func (o *ApplicationToBeUpdated) SetStatus(v Applicationv1Status) {
	o.Status = &v
}

func (o ApplicationToBeUpdated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationToBeUpdated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableApplicationToBeUpdated struct {
	value *ApplicationToBeUpdated
	isSet bool
}

func (v NullableApplicationToBeUpdated) Get() *ApplicationToBeUpdated {
	return v.value
}

func (v *NullableApplicationToBeUpdated) Set(val *ApplicationToBeUpdated) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationToBeUpdated) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationToBeUpdated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationToBeUpdated(val *ApplicationToBeUpdated) *NullableApplicationToBeUpdated {
	return &NullableApplicationToBeUpdated{value: val, isSet: true}
}

func (v NullableApplicationToBeUpdated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationToBeUpdated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


