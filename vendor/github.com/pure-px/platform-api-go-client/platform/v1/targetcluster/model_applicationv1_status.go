/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"encoding/json"
)

// checks if the Applicationv1Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Applicationv1Status{}

// Applicationv1Status Status of the Application.
type Applicationv1Status struct {
	// current application chart version.
	Version *string `json:"version,omitempty"`
	Phase *ApplicationPhasePhase `json:"phase,omitempty"`
	Health *ApplicationHealthHealth `json:"health,omitempty"`
	// conditions of the application.
	Conditions *map[string]string `json:"conditions,omitempty"`
}

// NewApplicationv1Status instantiates a new Applicationv1Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationv1Status() *Applicationv1Status {
	this := Applicationv1Status{}
	var phase ApplicationPhasePhase = APPLICATIONPHASEPHASE_PHASE_UNSPECIFIED
	this.Phase = &phase
	var health ApplicationHealthHealth = APPLICATIONHEALTHHEALTH_HEALTH_UNSPECIFIED
	this.Health = &health
	return &this
}

// NewApplicationv1StatusWithDefaults instantiates a new Applicationv1Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationv1StatusWithDefaults() *Applicationv1Status {
	this := Applicationv1Status{}
	var phase ApplicationPhasePhase = APPLICATIONPHASEPHASE_PHASE_UNSPECIFIED
	this.Phase = &phase
	var health ApplicationHealthHealth = APPLICATIONHEALTHHEALTH_HEALTH_UNSPECIFIED
	this.Health = &health
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Applicationv1Status) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applicationv1Status) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Applicationv1Status) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Applicationv1Status) SetVersion(v string) {
	o.Version = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *Applicationv1Status) GetPhase() ApplicationPhasePhase {
	if o == nil || IsNil(o.Phase) {
		var ret ApplicationPhasePhase
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applicationv1Status) GetPhaseOk() (*ApplicationPhasePhase, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *Applicationv1Status) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ApplicationPhasePhase and assigns it to the Phase field.
func (o *Applicationv1Status) SetPhase(v ApplicationPhasePhase) {
	o.Phase = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *Applicationv1Status) GetHealth() ApplicationHealthHealth {
	if o == nil || IsNil(o.Health) {
		var ret ApplicationHealthHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applicationv1Status) GetHealthOk() (*ApplicationHealthHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *Applicationv1Status) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given ApplicationHealthHealth and assigns it to the Health field.
func (o *Applicationv1Status) SetHealth(v ApplicationHealthHealth) {
	o.Health = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Applicationv1Status) GetConditions() map[string]string {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string]string
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applicationv1Status) GetConditionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Applicationv1Status) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string]string and assigns it to the Conditions field.
func (o *Applicationv1Status) SetConditions(v map[string]string) {
	o.Conditions = &v
}

func (o Applicationv1Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Applicationv1Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableApplicationv1Status struct {
	value *Applicationv1Status
	isSet bool
}

func (v NullableApplicationv1Status) Get() *Applicationv1Status {
	return v.value
}

func (v *NullableApplicationv1Status) Set(val *Applicationv1Status) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationv1Status) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationv1Status) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationv1Status(val *Applicationv1Status) *NullableApplicationv1Status {
	return &NullableApplicationv1Status{value: val, isSet: true}
}

func (v NullableApplicationv1Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationv1Status) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


