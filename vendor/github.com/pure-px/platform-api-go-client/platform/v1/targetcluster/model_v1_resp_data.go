/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"encoding/json"
	"fmt"
)

// V1RespData RespData provides flags which provides info about the fields that should be populated in the response.   - RESP_DATA_UNSPECIFIED: RespData Unspecified. complete resource will be populated.  - INDEX: only uid, name, labels should be populated.  - LITE: only meta data should be populated.  - FULL: complete resource should be populated.
type V1RespData string

// List of v1RespData
const (
	V1RESPDATA_RESP_DATA_UNSPECIFIED V1RespData = "RESP_DATA_UNSPECIFIED"
	V1RESPDATA_INDEX V1RespData = "INDEX"
	V1RESPDATA_LITE V1RespData = "LITE"
	V1RESPDATA_FULL V1RespData = "FULL"
)

// All allowed values of V1RespData enum
var AllowedV1RespDataEnumValues = []V1RespData{
	"RESP_DATA_UNSPECIFIED",
	"INDEX",
	"LITE",
	"FULL",
}

func (v *V1RespData) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1RespData(value)
	for _, existing := range AllowedV1RespDataEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1RespData", value)
}

// NewV1RespDataFromValue returns a pointer to a valid V1RespData
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1RespDataFromValue(v string) (*V1RespData, error) {
	ev := V1RespData(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1RespData: valid values are %v", v, AllowedV1RespDataEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1RespData) IsValid() bool {
	for _, existing := range AllowedV1RespDataEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1RespData value
func (v V1RespData) Ptr() *V1RespData {
	return &v
}

type NullableV1RespData struct {
	value *V1RespData
	isSet bool
}

func (v NullableV1RespData) Get() *V1RespData {
	return v.value
}

func (v *NullableV1RespData) Set(val *V1RespData) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RespData) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RespData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RespData(val *V1RespData) *NullableV1RespData {
	return &NullableV1RespData{value: val, isSet: true}
}

func (v NullableV1RespData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RespData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

