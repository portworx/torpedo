/*
public/portworx/platform/iam/apiv1/iam.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the V1AccessPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AccessPolicy{}

// V1AccessPolicy Access Policy controls access to control plane resources. With IAM, one can centrally manage permissions that control which resources users can access.
type V1AccessPolicy struct {
	// Global scope represents the global role names.
	GlobalScope []string `json:"globalScope,omitempty"`
	// Account represents the account role names.
	Account []string `json:"account,omitempty"`
	// Tenant represents the tenant level role bindings and resource IDs.
	Tenant []V1RoleBinding `json:"tenant,omitempty"`
	// Project represents the project level role bindings and resource IDS.
	Project []V1RoleBinding `json:"project,omitempty"`
	// Namespace represents the namespace level role bindings and resource IDS.
	Namespace []V1RoleBinding `json:"namespace,omitempty"`
}

// NewV1AccessPolicy instantiates a new V1AccessPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AccessPolicy() *V1AccessPolicy {
	this := V1AccessPolicy{}
	return &this
}

// NewV1AccessPolicyWithDefaults instantiates a new V1AccessPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AccessPolicyWithDefaults() *V1AccessPolicy {
	this := V1AccessPolicy{}
	return &this
}

// GetGlobalScope returns the GlobalScope field value if set, zero value otherwise.
func (o *V1AccessPolicy) GetGlobalScope() []string {
	if o == nil || IsNil(o.GlobalScope) {
		var ret []string
		return ret
	}
	return o.GlobalScope
}

// GetGlobalScopeOk returns a tuple with the GlobalScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AccessPolicy) GetGlobalScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.GlobalScope) {
		return nil, false
	}
	return o.GlobalScope, true
}

// HasGlobalScope returns a boolean if a field has been set.
func (o *V1AccessPolicy) HasGlobalScope() bool {
	if o != nil && !IsNil(o.GlobalScope) {
		return true
	}

	return false
}

// SetGlobalScope gets a reference to the given []string and assigns it to the GlobalScope field.
func (o *V1AccessPolicy) SetGlobalScope(v []string) {
	o.GlobalScope = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *V1AccessPolicy) GetAccount() []string {
	if o == nil || IsNil(o.Account) {
		var ret []string
		return ret
	}
	return o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AccessPolicy) GetAccountOk() ([]string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *V1AccessPolicy) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given []string and assigns it to the Account field.
func (o *V1AccessPolicy) SetAccount(v []string) {
	o.Account = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *V1AccessPolicy) GetTenant() []V1RoleBinding {
	if o == nil || IsNil(o.Tenant) {
		var ret []V1RoleBinding
		return ret
	}
	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AccessPolicy) GetTenantOk() ([]V1RoleBinding, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *V1AccessPolicy) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given []V1RoleBinding and assigns it to the Tenant field.
func (o *V1AccessPolicy) SetTenant(v []V1RoleBinding) {
	o.Tenant = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *V1AccessPolicy) GetProject() []V1RoleBinding {
	if o == nil || IsNil(o.Project) {
		var ret []V1RoleBinding
		return ret
	}
	return o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AccessPolicy) GetProjectOk() ([]V1RoleBinding, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *V1AccessPolicy) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given []V1RoleBinding and assigns it to the Project field.
func (o *V1AccessPolicy) SetProject(v []V1RoleBinding) {
	o.Project = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1AccessPolicy) GetNamespace() []V1RoleBinding {
	if o == nil || IsNil(o.Namespace) {
		var ret []V1RoleBinding
		return ret
	}
	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AccessPolicy) GetNamespaceOk() ([]V1RoleBinding, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1AccessPolicy) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given []V1RoleBinding and assigns it to the Namespace field.
func (o *V1AccessPolicy) SetNamespace(v []V1RoleBinding) {
	o.Namespace = v
}

func (o V1AccessPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AccessPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalScope) {
		toSerialize["globalScope"] = o.GlobalScope
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableV1AccessPolicy struct {
	value *V1AccessPolicy
	isSet bool
}

func (v NullableV1AccessPolicy) Get() *V1AccessPolicy {
	return v.value
}

func (v *NullableV1AccessPolicy) Set(val *V1AccessPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AccessPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AccessPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AccessPolicy(val *V1AccessPolicy) *NullableV1AccessPolicy {
	return &NullableV1AccessPolicy{value: val, isSet: true}
}

func (v NullableV1AccessPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AccessPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


