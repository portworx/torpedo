/*
public/portworx/pds/deployment/apiv1/deployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment

import (
	"encoding/json"
)

// checks if the V1TLSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TLSConfig{}

// V1TLSConfig TLS configuration for the Data Service.
type V1TLSConfig struct {
	// Flag to enable TLS for the Data Service.
	Enabled *bool `json:"enabled,omitempty"`
	// Issuer (Certificate Authority) name for the TLS certificates.
	IssuerName *string `json:"issuerName,omitempty"`
}

// NewV1TLSConfig instantiates a new V1TLSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TLSConfig() *V1TLSConfig {
	this := V1TLSConfig{}
	return &this
}

// NewV1TLSConfigWithDefaults instantiates a new V1TLSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TLSConfigWithDefaults() *V1TLSConfig {
	this := V1TLSConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V1TLSConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V1TLSConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V1TLSConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise.
func (o *V1TLSConfig) GetIssuerName() string {
	if o == nil || IsNil(o.IssuerName) {
		var ret string
		return ret
	}
	return *o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TLSConfig) GetIssuerNameOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerName) {
		return nil, false
	}
	return o.IssuerName, true
}

// HasIssuerName returns a boolean if a field has been set.
func (o *V1TLSConfig) HasIssuerName() bool {
	if o != nil && !IsNil(o.IssuerName) {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given string and assigns it to the IssuerName field.
func (o *V1TLSConfig) SetIssuerName(v string) {
	o.IssuerName = &v
}

func (o V1TLSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TLSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.IssuerName) {
		toSerialize["issuerName"] = o.IssuerName
	}
	return toSerialize, nil
}

type NullableV1TLSConfig struct {
	value *V1TLSConfig
	isSet bool
}

func (v NullableV1TLSConfig) Get() *V1TLSConfig {
	return v.value
}

func (v *NullableV1TLSConfig) Set(val *V1TLSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TLSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TLSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TLSConfig(val *V1TLSConfig) *NullableV1TLSConfig {
	return &NullableV1TLSConfig{value: val, isSet: true}
}

func (v NullableV1TLSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TLSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


