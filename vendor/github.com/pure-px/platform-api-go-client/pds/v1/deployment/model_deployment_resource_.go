/*
public/portworx/pds/deployment/apiv1/deployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment

import (
	"encoding/json"
)

// checks if the DeploymentResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentResource{}

// DeploymentResource struct for DeploymentResource
type DeploymentResource struct {
	Meta *MetadataOfTheResource `json:"meta,omitempty"`
	Config *V1Config `json:"config,omitempty"`
	Status *Deploymentv1Status `json:"status,omitempty"`
}

// NewDeploymentResource instantiates a new DeploymentResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentResource() *DeploymentResource {
	this := DeploymentResource{}
	return &this
}

// NewDeploymentResourceWithDefaults instantiates a new DeploymentResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentResourceWithDefaults() *DeploymentResource {
	this := DeploymentResource{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DeploymentResource) GetMeta() MetadataOfTheResource {
	if o == nil || IsNil(o.Meta) {
		var ret MetadataOfTheResource
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentResource) GetMetaOk() (*MetadataOfTheResource, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DeploymentResource) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetadataOfTheResource and assigns it to the Meta field.
func (o *DeploymentResource) SetMeta(v MetadataOfTheResource) {
	o.Meta = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DeploymentResource) GetConfig() V1Config {
	if o == nil || IsNil(o.Config) {
		var ret V1Config
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentResource) GetConfigOk() (*V1Config, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DeploymentResource) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given V1Config and assigns it to the Config field.
func (o *DeploymentResource) SetConfig(v V1Config) {
	o.Config = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentResource) GetStatus() Deploymentv1Status {
	if o == nil || IsNil(o.Status) {
		var ret Deploymentv1Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentResource) GetStatusOk() (*Deploymentv1Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentResource) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Deploymentv1Status and assigns it to the Status field.
func (o *DeploymentResource) SetStatus(v Deploymentv1Status) {
	o.Status = &v
}

func (o DeploymentResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDeploymentResource struct {
	value *DeploymentResource
	isSet bool
}

func (v NullableDeploymentResource) Get() *DeploymentResource {
	return v.value
}

func (v *NullableDeploymentResource) Set(val *DeploymentResource) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentResource) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentResource(val *DeploymentResource) *NullableDeploymentResource {
	return &NullableDeploymentResource{value: val, isSet: true}
}

func (v NullableDeploymentResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


