/*
public/portworx/pds/restore/apiv1/restore.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1SourceReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SourceReferences{}

// V1SourceReferences SourceReferences for the restore.
type V1SourceReferences struct {
	// UID of the deployment which was backed up.
	DataServiceDeploymentId *string `json:"dataServiceDeploymentId,omitempty"`
	// UID of the backup.
	BackupId string `json:"backupId"`
	// UID of the backup location.
	BackupLocationId *string `json:"backupLocationId,omitempty"`
	// UID of the cloud snapshot of the backup volume used for restore.
	CloudsnapId *string `json:"cloudsnapId,omitempty"`
}

type _V1SourceReferences V1SourceReferences

// NewV1SourceReferences instantiates a new V1SourceReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SourceReferences(backupId string) *V1SourceReferences {
	this := V1SourceReferences{}
	this.BackupId = backupId
	return &this
}

// NewV1SourceReferencesWithDefaults instantiates a new V1SourceReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SourceReferencesWithDefaults() *V1SourceReferences {
	this := V1SourceReferences{}
	return &this
}

// GetDataServiceDeploymentId returns the DataServiceDeploymentId field value if set, zero value otherwise.
func (o *V1SourceReferences) GetDataServiceDeploymentId() string {
	if o == nil || IsNil(o.DataServiceDeploymentId) {
		var ret string
		return ret
	}
	return *o.DataServiceDeploymentId
}

// GetDataServiceDeploymentIdOk returns a tuple with the DataServiceDeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceReferences) GetDataServiceDeploymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataServiceDeploymentId) {
		return nil, false
	}
	return o.DataServiceDeploymentId, true
}

// HasDataServiceDeploymentId returns a boolean if a field has been set.
func (o *V1SourceReferences) HasDataServiceDeploymentId() bool {
	if o != nil && !IsNil(o.DataServiceDeploymentId) {
		return true
	}

	return false
}

// SetDataServiceDeploymentId gets a reference to the given string and assigns it to the DataServiceDeploymentId field.
func (o *V1SourceReferences) SetDataServiceDeploymentId(v string) {
	o.DataServiceDeploymentId = &v
}

// GetBackupId returns the BackupId field value
func (o *V1SourceReferences) GetBackupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupId
}

// GetBackupIdOk returns a tuple with the BackupId field value
// and a boolean to check if the value has been set.
func (o *V1SourceReferences) GetBackupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupId, true
}

// SetBackupId sets field value
func (o *V1SourceReferences) SetBackupId(v string) {
	o.BackupId = v
}

// GetBackupLocationId returns the BackupLocationId field value if set, zero value otherwise.
func (o *V1SourceReferences) GetBackupLocationId() string {
	if o == nil || IsNil(o.BackupLocationId) {
		var ret string
		return ret
	}
	return *o.BackupLocationId
}

// GetBackupLocationIdOk returns a tuple with the BackupLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceReferences) GetBackupLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.BackupLocationId) {
		return nil, false
	}
	return o.BackupLocationId, true
}

// HasBackupLocationId returns a boolean if a field has been set.
func (o *V1SourceReferences) HasBackupLocationId() bool {
	if o != nil && !IsNil(o.BackupLocationId) {
		return true
	}

	return false
}

// SetBackupLocationId gets a reference to the given string and assigns it to the BackupLocationId field.
func (o *V1SourceReferences) SetBackupLocationId(v string) {
	o.BackupLocationId = &v
}

// GetCloudsnapId returns the CloudsnapId field value if set, zero value otherwise.
func (o *V1SourceReferences) GetCloudsnapId() string {
	if o == nil || IsNil(o.CloudsnapId) {
		var ret string
		return ret
	}
	return *o.CloudsnapId
}

// GetCloudsnapIdOk returns a tuple with the CloudsnapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceReferences) GetCloudsnapIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudsnapId) {
		return nil, false
	}
	return o.CloudsnapId, true
}

// HasCloudsnapId returns a boolean if a field has been set.
func (o *V1SourceReferences) HasCloudsnapId() bool {
	if o != nil && !IsNil(o.CloudsnapId) {
		return true
	}

	return false
}

// SetCloudsnapId gets a reference to the given string and assigns it to the CloudsnapId field.
func (o *V1SourceReferences) SetCloudsnapId(v string) {
	o.CloudsnapId = &v
}

func (o V1SourceReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SourceReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataServiceDeploymentId) {
		toSerialize["dataServiceDeploymentId"] = o.DataServiceDeploymentId
	}
	toSerialize["backupId"] = o.BackupId
	if !IsNil(o.BackupLocationId) {
		toSerialize["backupLocationId"] = o.BackupLocationId
	}
	if !IsNil(o.CloudsnapId) {
		toSerialize["cloudsnapId"] = o.CloudsnapId
	}
	return toSerialize, nil
}

func (o *V1SourceReferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1SourceReferences := _V1SourceReferences{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1SourceReferences)

	if err != nil {
		return err
	}

	*o = V1SourceReferences(varV1SourceReferences)

	return err
}

type NullableV1SourceReferences struct {
	value *V1SourceReferences
	isSet bool
}

func (v NullableV1SourceReferences) Get() *V1SourceReferences {
	return v.value
}

func (v *NullableV1SourceReferences) Set(val *V1SourceReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SourceReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SourceReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SourceReferences(val *V1SourceReferences) *NullableV1SourceReferences {
	return &NullableV1SourceReferences{value: val, isSet: true}
}

func (v NullableV1SourceReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SourceReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


