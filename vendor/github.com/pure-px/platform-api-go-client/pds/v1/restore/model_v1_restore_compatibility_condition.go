/*
public/portworx/pds/restore/apiv1/restore.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restore

import (
	"encoding/json"
)

// checks if the V1RestoreCompatibilityCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RestoreCompatibilityCondition{}

// V1RestoreCompatibilityCondition Restore compatibility condition.
type V1RestoreCompatibilityCondition struct {
	Backup *map[string]string `json:"backup,omitempty"`
	Image *map[string]string `json:"image,omitempty"`
}

// NewV1RestoreCompatibilityCondition instantiates a new V1RestoreCompatibilityCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RestoreCompatibilityCondition() *V1RestoreCompatibilityCondition {
	this := V1RestoreCompatibilityCondition{}
	return &this
}

// NewV1RestoreCompatibilityConditionWithDefaults instantiates a new V1RestoreCompatibilityCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RestoreCompatibilityConditionWithDefaults() *V1RestoreCompatibilityCondition {
	this := V1RestoreCompatibilityCondition{}
	return &this
}

// GetBackup returns the Backup field value if set, zero value otherwise.
func (o *V1RestoreCompatibilityCondition) GetBackup() map[string]string {
	if o == nil || IsNil(o.Backup) {
		var ret map[string]string
		return ret
	}
	return *o.Backup
}

// GetBackupOk returns a tuple with the Backup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RestoreCompatibilityCondition) GetBackupOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Backup) {
		return nil, false
	}
	return o.Backup, true
}

// HasBackup returns a boolean if a field has been set.
func (o *V1RestoreCompatibilityCondition) HasBackup() bool {
	if o != nil && !IsNil(o.Backup) {
		return true
	}

	return false
}

// SetBackup gets a reference to the given map[string]string and assigns it to the Backup field.
func (o *V1RestoreCompatibilityCondition) SetBackup(v map[string]string) {
	o.Backup = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *V1RestoreCompatibilityCondition) GetImage() map[string]string {
	if o == nil || IsNil(o.Image) {
		var ret map[string]string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RestoreCompatibilityCondition) GetImageOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *V1RestoreCompatibilityCondition) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given map[string]string and assigns it to the Image field.
func (o *V1RestoreCompatibilityCondition) SetImage(v map[string]string) {
	o.Image = &v
}

func (o V1RestoreCompatibilityCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RestoreCompatibilityCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Backup) {
		toSerialize["backup"] = o.Backup
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	return toSerialize, nil
}

type NullableV1RestoreCompatibilityCondition struct {
	value *V1RestoreCompatibilityCondition
	isSet bool
}

func (v NullableV1RestoreCompatibilityCondition) Get() *V1RestoreCompatibilityCondition {
	return v.value
}

func (v *NullableV1RestoreCompatibilityCondition) Set(val *V1RestoreCompatibilityCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RestoreCompatibilityCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RestoreCompatibilityCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RestoreCompatibilityCondition(val *V1RestoreCompatibilityCondition) *NullableV1RestoreCompatibilityCondition {
	return &NullableV1RestoreCompatibilityCondition{value: val, isSet: true}
}

func (v NullableV1RestoreCompatibilityCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RestoreCompatibilityCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


