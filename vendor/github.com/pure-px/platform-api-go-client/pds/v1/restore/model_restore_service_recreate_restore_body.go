/*
public/portworx/pds/restore/apiv1/restore.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package restore

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestoreServiceRecreateRestoreBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreServiceRecreateRestoreBody{}

// RestoreServiceRecreateRestoreBody Request to recreate a restore.
type RestoreServiceRecreateRestoreBody struct {
	// Name of the restore.
	Name string `json:"name"`
	// UID of the project associated with the restore.
	ProjectId string `json:"projectId"`
	// UID of namespace where restore will be created.
	NamespaceId string `json:"namespaceId"`
}

type _RestoreServiceRecreateRestoreBody RestoreServiceRecreateRestoreBody

// NewRestoreServiceRecreateRestoreBody instantiates a new RestoreServiceRecreateRestoreBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreServiceRecreateRestoreBody(name string, projectId string, namespaceId string) *RestoreServiceRecreateRestoreBody {
	this := RestoreServiceRecreateRestoreBody{}
	this.Name = name
	this.ProjectId = projectId
	this.NamespaceId = namespaceId
	return &this
}

// NewRestoreServiceRecreateRestoreBodyWithDefaults instantiates a new RestoreServiceRecreateRestoreBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreServiceRecreateRestoreBodyWithDefaults() *RestoreServiceRecreateRestoreBody {
	this := RestoreServiceRecreateRestoreBody{}
	return &this
}

// GetName returns the Name field value
func (o *RestoreServiceRecreateRestoreBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RestoreServiceRecreateRestoreBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RestoreServiceRecreateRestoreBody) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *RestoreServiceRecreateRestoreBody) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *RestoreServiceRecreateRestoreBody) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *RestoreServiceRecreateRestoreBody) SetProjectId(v string) {
	o.ProjectId = v
}

// GetNamespaceId returns the NamespaceId field value
func (o *RestoreServiceRecreateRestoreBody) GetNamespaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *RestoreServiceRecreateRestoreBody) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *RestoreServiceRecreateRestoreBody) SetNamespaceId(v string) {
	o.NamespaceId = v
}

func (o RestoreServiceRecreateRestoreBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreServiceRecreateRestoreBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["projectId"] = o.ProjectId
	toSerialize["namespaceId"] = o.NamespaceId
	return toSerialize, nil
}

func (o *RestoreServiceRecreateRestoreBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"projectId",
		"namespaceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestoreServiceRecreateRestoreBody := _RestoreServiceRecreateRestoreBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestoreServiceRecreateRestoreBody)

	if err != nil {
		return err
	}

	*o = RestoreServiceRecreateRestoreBody(varRestoreServiceRecreateRestoreBody)

	return err
}

type NullableRestoreServiceRecreateRestoreBody struct {
	value *RestoreServiceRecreateRestoreBody
	isSet bool
}

func (v NullableRestoreServiceRecreateRestoreBody) Get() *RestoreServiceRecreateRestoreBody {
	return v.value
}

func (v *NullableRestoreServiceRecreateRestoreBody) Set(val *RestoreServiceRecreateRestoreBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreServiceRecreateRestoreBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreServiceRecreateRestoreBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreServiceRecreateRestoreBody(val *RestoreServiceRecreateRestoreBody) *NullableRestoreServiceRecreateRestoreBody {
	return &NullableRestoreServiceRecreateRestoreBody{value: val, isSet: true}
}

func (v NullableRestoreServiceRecreateRestoreBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreServiceRecreateRestoreBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


