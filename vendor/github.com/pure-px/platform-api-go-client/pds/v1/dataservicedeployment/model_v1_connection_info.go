/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"encoding/json"
)

// checks if the V1ConnectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ConnectionInfo{}

// V1ConnectionInfo Connection Information for the DataServiceDeployment Topology.
type V1ConnectionInfo struct {
	// Ready instances.
	ReadyInstances []V1InstanceInfo `json:"readyInstances,omitempty"`
	// Instances that are not ready.
	NotReadyInstances []V1InstanceInfo `json:"notReadyInstances,omitempty"`
	ConnectionDetails *V1ConnectionDetails `json:"connectionDetails,omitempty"`
	// Stores details about the cluster.
	ClusterDetails map[string]interface{} `json:"clusterDetails,omitempty"`
}

// NewV1ConnectionInfo instantiates a new V1ConnectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConnectionInfo() *V1ConnectionInfo {
	this := V1ConnectionInfo{}
	return &this
}

// NewV1ConnectionInfoWithDefaults instantiates a new V1ConnectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConnectionInfoWithDefaults() *V1ConnectionInfo {
	this := V1ConnectionInfo{}
	return &this
}

// GetReadyInstances returns the ReadyInstances field value if set, zero value otherwise.
func (o *V1ConnectionInfo) GetReadyInstances() []V1InstanceInfo {
	if o == nil || IsNil(o.ReadyInstances) {
		var ret []V1InstanceInfo
		return ret
	}
	return o.ReadyInstances
}

// GetReadyInstancesOk returns a tuple with the ReadyInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionInfo) GetReadyInstancesOk() ([]V1InstanceInfo, bool) {
	if o == nil || IsNil(o.ReadyInstances) {
		return nil, false
	}
	return o.ReadyInstances, true
}

// HasReadyInstances returns a boolean if a field has been set.
func (o *V1ConnectionInfo) HasReadyInstances() bool {
	if o != nil && !IsNil(o.ReadyInstances) {
		return true
	}

	return false
}

// SetReadyInstances gets a reference to the given []V1InstanceInfo and assigns it to the ReadyInstances field.
func (o *V1ConnectionInfo) SetReadyInstances(v []V1InstanceInfo) {
	o.ReadyInstances = v
}

// GetNotReadyInstances returns the NotReadyInstances field value if set, zero value otherwise.
func (o *V1ConnectionInfo) GetNotReadyInstances() []V1InstanceInfo {
	if o == nil || IsNil(o.NotReadyInstances) {
		var ret []V1InstanceInfo
		return ret
	}
	return o.NotReadyInstances
}

// GetNotReadyInstancesOk returns a tuple with the NotReadyInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionInfo) GetNotReadyInstancesOk() ([]V1InstanceInfo, bool) {
	if o == nil || IsNil(o.NotReadyInstances) {
		return nil, false
	}
	return o.NotReadyInstances, true
}

// HasNotReadyInstances returns a boolean if a field has been set.
func (o *V1ConnectionInfo) HasNotReadyInstances() bool {
	if o != nil && !IsNil(o.NotReadyInstances) {
		return true
	}

	return false
}

// SetNotReadyInstances gets a reference to the given []V1InstanceInfo and assigns it to the NotReadyInstances field.
func (o *V1ConnectionInfo) SetNotReadyInstances(v []V1InstanceInfo) {
	o.NotReadyInstances = v
}

// GetConnectionDetails returns the ConnectionDetails field value if set, zero value otherwise.
func (o *V1ConnectionInfo) GetConnectionDetails() V1ConnectionDetails {
	if o == nil || IsNil(o.ConnectionDetails) {
		var ret V1ConnectionDetails
		return ret
	}
	return *o.ConnectionDetails
}

// GetConnectionDetailsOk returns a tuple with the ConnectionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionInfo) GetConnectionDetailsOk() (*V1ConnectionDetails, bool) {
	if o == nil || IsNil(o.ConnectionDetails) {
		return nil, false
	}
	return o.ConnectionDetails, true
}

// HasConnectionDetails returns a boolean if a field has been set.
func (o *V1ConnectionInfo) HasConnectionDetails() bool {
	if o != nil && !IsNil(o.ConnectionDetails) {
		return true
	}

	return false
}

// SetConnectionDetails gets a reference to the given V1ConnectionDetails and assigns it to the ConnectionDetails field.
func (o *V1ConnectionInfo) SetConnectionDetails(v V1ConnectionDetails) {
	o.ConnectionDetails = &v
}

// GetClusterDetails returns the ClusterDetails field value if set, zero value otherwise.
func (o *V1ConnectionInfo) GetClusterDetails() map[string]interface{} {
	if o == nil || IsNil(o.ClusterDetails) {
		var ret map[string]interface{}
		return ret
	}
	return o.ClusterDetails
}

// GetClusterDetailsOk returns a tuple with the ClusterDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConnectionInfo) GetClusterDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ClusterDetails) {
		return map[string]interface{}{}, false
	}
	return o.ClusterDetails, true
}

// HasClusterDetails returns a boolean if a field has been set.
func (o *V1ConnectionInfo) HasClusterDetails() bool {
	if o != nil && !IsNil(o.ClusterDetails) {
		return true
	}

	return false
}

// SetClusterDetails gets a reference to the given map[string]interface{} and assigns it to the ClusterDetails field.
func (o *V1ConnectionInfo) SetClusterDetails(v map[string]interface{}) {
	o.ClusterDetails = v
}

func (o V1ConnectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ConnectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReadyInstances) {
		toSerialize["readyInstances"] = o.ReadyInstances
	}
	if !IsNil(o.NotReadyInstances) {
		toSerialize["notReadyInstances"] = o.NotReadyInstances
	}
	if !IsNil(o.ConnectionDetails) {
		toSerialize["connectionDetails"] = o.ConnectionDetails
	}
	if !IsNil(o.ClusterDetails) {
		toSerialize["clusterDetails"] = o.ClusterDetails
	}
	return toSerialize, nil
}

type NullableV1ConnectionInfo struct {
	value *V1ConnectionInfo
	isSet bool
}

func (v NullableV1ConnectionInfo) Get() *V1ConnectionInfo {
	return v.value
}

func (v *NullableV1ConnectionInfo) Set(val *V1ConnectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConnectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConnectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConnectionInfo(val *V1ConnectionInfo) *NullableV1ConnectionInfo {
	return &NullableV1ConnectionInfo{value: val, isSet: true}
}

func (v NullableV1ConnectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConnectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


