/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"encoding/json"
	"fmt"
)

// V1DataServiceDeploymentTopologyStatusHealth Enum for Health of the data service topology.   - UNKNOWN: Health is unknown.  - UNAVAILABLE: DataServiceDeployment Topology is Unavailable.  - PARTIALLY_AVAILABLE: DataServiceDeployment Topology is Partially available.  - AVAILABLE: DataServiceDeployment Topology is available.
type V1DataServiceDeploymentTopologyStatusHealth string

// List of v1DataServiceDeploymentTopologyStatusHealth
const (
	V1DATASERVICEDEPLOYMENTTOPOLOGYSTATUSHEALTH_UNKNOWN V1DataServiceDeploymentTopologyStatusHealth = "UNKNOWN"
	V1DATASERVICEDEPLOYMENTTOPOLOGYSTATUSHEALTH_UNAVAILABLE V1DataServiceDeploymentTopologyStatusHealth = "UNAVAILABLE"
	V1DATASERVICEDEPLOYMENTTOPOLOGYSTATUSHEALTH_PARTIALLY_AVAILABLE V1DataServiceDeploymentTopologyStatusHealth = "PARTIALLY_AVAILABLE"
	V1DATASERVICEDEPLOYMENTTOPOLOGYSTATUSHEALTH_AVAILABLE V1DataServiceDeploymentTopologyStatusHealth = "AVAILABLE"
)

// All allowed values of V1DataServiceDeploymentTopologyStatusHealth enum
var AllowedV1DataServiceDeploymentTopologyStatusHealthEnumValues = []V1DataServiceDeploymentTopologyStatusHealth{
	"UNKNOWN",
	"UNAVAILABLE",
	"PARTIALLY_AVAILABLE",
	"AVAILABLE",
}

func (v *V1DataServiceDeploymentTopologyStatusHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1DataServiceDeploymentTopologyStatusHealth(value)
	for _, existing := range AllowedV1DataServiceDeploymentTopologyStatusHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1DataServiceDeploymentTopologyStatusHealth", value)
}

// NewV1DataServiceDeploymentTopologyStatusHealthFromValue returns a pointer to a valid V1DataServiceDeploymentTopologyStatusHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1DataServiceDeploymentTopologyStatusHealthFromValue(v string) (*V1DataServiceDeploymentTopologyStatusHealth, error) {
	ev := V1DataServiceDeploymentTopologyStatusHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1DataServiceDeploymentTopologyStatusHealth: valid values are %v", v, AllowedV1DataServiceDeploymentTopologyStatusHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1DataServiceDeploymentTopologyStatusHealth) IsValid() bool {
	for _, existing := range AllowedV1DataServiceDeploymentTopologyStatusHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1DataServiceDeploymentTopologyStatusHealth value
func (v V1DataServiceDeploymentTopologyStatusHealth) Ptr() *V1DataServiceDeploymentTopologyStatusHealth {
	return &v
}

type NullableV1DataServiceDeploymentTopologyStatusHealth struct {
	value *V1DataServiceDeploymentTopologyStatusHealth
	isSet bool
}

func (v NullableV1DataServiceDeploymentTopologyStatusHealth) Get() *V1DataServiceDeploymentTopologyStatusHealth {
	return v.value
}

func (v *NullableV1DataServiceDeploymentTopologyStatusHealth) Set(val *V1DataServiceDeploymentTopologyStatusHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DataServiceDeploymentTopologyStatusHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DataServiceDeploymentTopologyStatusHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DataServiceDeploymentTopologyStatusHealth(val *V1DataServiceDeploymentTopologyStatusHealth) *NullableV1DataServiceDeploymentTopologyStatusHealth {
	return &NullableV1DataServiceDeploymentTopologyStatusHealth{value: val, isSet: true}
}

func (v NullableV1DataServiceDeploymentTopologyStatusHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DataServiceDeploymentTopologyStatusHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

