/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"encoding/json"
)

// checks if the PDSApplicationSelectorPDSApplicationFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PDSApplicationSelectorPDSApplicationFilter{}

// PDSApplicationSelectorPDSApplicationFilter PDSApplicationFilter is filter for a given resource type.
type PDSApplicationSelectorPDSApplicationFilter struct {
	ResourceType *V1PDSApplicationResourceType `json:"resourceType,omitempty"`
	Op *SelectorOperator `json:"op,omitempty"`
	// Value of key,value pair against which filtering needs to be performs.
	Values []string `json:"values,omitempty"`
}

// NewPDSApplicationSelectorPDSApplicationFilter instantiates a new PDSApplicationSelectorPDSApplicationFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPDSApplicationSelectorPDSApplicationFilter() *PDSApplicationSelectorPDSApplicationFilter {
	this := PDSApplicationSelectorPDSApplicationFilter{}
	var resourceType V1PDSApplicationResourceType = V1PDSAPPLICATIONRESOURCETYPE_TYPE_UNSPECIFIED
	this.ResourceType = &resourceType
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// NewPDSApplicationSelectorPDSApplicationFilterWithDefaults instantiates a new PDSApplicationSelectorPDSApplicationFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPDSApplicationSelectorPDSApplicationFilterWithDefaults() *PDSApplicationSelectorPDSApplicationFilter {
	this := PDSApplicationSelectorPDSApplicationFilter{}
	var resourceType V1PDSApplicationResourceType = V1PDSAPPLICATIONRESOURCETYPE_TYPE_UNSPECIFIED
	this.ResourceType = &resourceType
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetResourceType() V1PDSApplicationResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret V1PDSApplicationResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetResourceTypeOk() (*V1PDSApplicationResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given V1PDSApplicationResourceType and assigns it to the ResourceType field.
func (o *PDSApplicationSelectorPDSApplicationFilter) SetResourceType(v V1PDSApplicationResourceType) {
	o.ResourceType = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetOp() SelectorOperator {
	if o == nil || IsNil(o.Op) {
		var ret SelectorOperator
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetOpOk() (*SelectorOperator, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given SelectorOperator and assigns it to the Op field.
func (o *PDSApplicationSelectorPDSApplicationFilter) SetOp(v SelectorOperator) {
	o.Op = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *PDSApplicationSelectorPDSApplicationFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *PDSApplicationSelectorPDSApplicationFilter) SetValues(v []string) {
	o.Values = v
}

func (o PDSApplicationSelectorPDSApplicationFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PDSApplicationSelectorPDSApplicationFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullablePDSApplicationSelectorPDSApplicationFilter struct {
	value *PDSApplicationSelectorPDSApplicationFilter
	isSet bool
}

func (v NullablePDSApplicationSelectorPDSApplicationFilter) Get() *PDSApplicationSelectorPDSApplicationFilter {
	return v.value
}

func (v *NullablePDSApplicationSelectorPDSApplicationFilter) Set(val *PDSApplicationSelectorPDSApplicationFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePDSApplicationSelectorPDSApplicationFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePDSApplicationSelectorPDSApplicationFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePDSApplicationSelectorPDSApplicationFilter(val *PDSApplicationSelectorPDSApplicationFilter) *NullablePDSApplicationSelectorPDSApplicationFilter {
	return &NullablePDSApplicationSelectorPDSApplicationFilter{value: val, isSet: true}
}

func (v NullablePDSApplicationSelectorPDSApplicationFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePDSApplicationSelectorPDSApplicationFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


