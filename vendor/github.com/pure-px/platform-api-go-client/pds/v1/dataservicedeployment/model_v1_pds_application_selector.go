/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"encoding/json"
)

// checks if the V1PDSApplicationSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PDSApplicationSelector{}

// V1PDSApplicationSelector PDSApplicationSelector is used to query deployments using the associated application reesources.
type V1PDSApplicationSelector struct {
	// Application_filters is the list of all filters that should be applied to fetch data related to deployment. Each filter will have AND relationship.
	ApplicationFilters []PDSApplicationSelectorPDSApplicationFilter `json:"applicationFilters,omitempty"`
}

// NewV1PDSApplicationSelector instantiates a new V1PDSApplicationSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PDSApplicationSelector() *V1PDSApplicationSelector {
	this := V1PDSApplicationSelector{}
	return &this
}

// NewV1PDSApplicationSelectorWithDefaults instantiates a new V1PDSApplicationSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PDSApplicationSelectorWithDefaults() *V1PDSApplicationSelector {
	this := V1PDSApplicationSelector{}
	return &this
}

// GetApplicationFilters returns the ApplicationFilters field value if set, zero value otherwise.
func (o *V1PDSApplicationSelector) GetApplicationFilters() []PDSApplicationSelectorPDSApplicationFilter {
	if o == nil || IsNil(o.ApplicationFilters) {
		var ret []PDSApplicationSelectorPDSApplicationFilter
		return ret
	}
	return o.ApplicationFilters
}

// GetApplicationFiltersOk returns a tuple with the ApplicationFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PDSApplicationSelector) GetApplicationFiltersOk() ([]PDSApplicationSelectorPDSApplicationFilter, bool) {
	if o == nil || IsNil(o.ApplicationFilters) {
		return nil, false
	}
	return o.ApplicationFilters, true
}

// HasApplicationFilters returns a boolean if a field has been set.
func (o *V1PDSApplicationSelector) HasApplicationFilters() bool {
	if o != nil && !IsNil(o.ApplicationFilters) {
		return true
	}

	return false
}

// SetApplicationFilters gets a reference to the given []PDSApplicationSelectorPDSApplicationFilter and assigns it to the ApplicationFilters field.
func (o *V1PDSApplicationSelector) SetApplicationFilters(v []PDSApplicationSelectorPDSApplicationFilter) {
	o.ApplicationFilters = v
}

func (o V1PDSApplicationSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PDSApplicationSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationFilters) {
		toSerialize["applicationFilters"] = o.ApplicationFilters
	}
	return toSerialize, nil
}

type NullableV1PDSApplicationSelector struct {
	value *V1PDSApplicationSelector
	isSet bool
}

func (v NullableV1PDSApplicationSelector) Get() *V1PDSApplicationSelector {
	return v.value
}

func (v *NullableV1PDSApplicationSelector) Set(val *V1PDSApplicationSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PDSApplicationSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PDSApplicationSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PDSApplicationSelector(val *V1PDSApplicationSelector) *NullableV1PDSApplicationSelector {
	return &NullableV1PDSApplicationSelector{value: val, isSet: true}
}

func (v NullableV1PDSApplicationSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PDSApplicationSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


