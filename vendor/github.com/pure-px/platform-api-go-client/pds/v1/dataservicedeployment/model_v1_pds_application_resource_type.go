/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"encoding/json"
	"fmt"
)

// V1PDSApplicationResourceType Type of the resource can be associated to the project.   - TYPE_UNSPECIFIED: Unspecified, do not use.  - DATA_SERVICE: List of supported PDS application resources. data service resource.
type V1PDSApplicationResourceType string

// List of v1PDSApplicationResourceType
const (
	V1PDSAPPLICATIONRESOURCETYPE_TYPE_UNSPECIFIED V1PDSApplicationResourceType = "TYPE_UNSPECIFIED"
	V1PDSAPPLICATIONRESOURCETYPE_DATA_SERVICE V1PDSApplicationResourceType = "DATA_SERVICE"
)

// All allowed values of V1PDSApplicationResourceType enum
var AllowedV1PDSApplicationResourceTypeEnumValues = []V1PDSApplicationResourceType{
	"TYPE_UNSPECIFIED",
	"DATA_SERVICE",
}

func (v *V1PDSApplicationResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1PDSApplicationResourceType(value)
	for _, existing := range AllowedV1PDSApplicationResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1PDSApplicationResourceType", value)
}

// NewV1PDSApplicationResourceTypeFromValue returns a pointer to a valid V1PDSApplicationResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1PDSApplicationResourceTypeFromValue(v string) (*V1PDSApplicationResourceType, error) {
	ev := V1PDSApplicationResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1PDSApplicationResourceType: valid values are %v", v, AllowedV1PDSApplicationResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1PDSApplicationResourceType) IsValid() bool {
	for _, existing := range AllowedV1PDSApplicationResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1PDSApplicationResourceType value
func (v V1PDSApplicationResourceType) Ptr() *V1PDSApplicationResourceType {
	return &v
}

type NullableV1PDSApplicationResourceType struct {
	value *V1PDSApplicationResourceType
	isSet bool
}

func (v NullableV1PDSApplicationResourceType) Get() *V1PDSApplicationResourceType {
	return v.value
}

func (v *NullableV1PDSApplicationResourceType) Set(val *V1PDSApplicationResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PDSApplicationResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PDSApplicationResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PDSApplicationResourceType(val *V1PDSApplicationResourceType) *NullableV1PDSApplicationResourceType {
	return &NullableV1PDSApplicationResourceType{value: val, isSet: true}
}

func (v NullableV1PDSApplicationResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PDSApplicationResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

