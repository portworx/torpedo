/*
public/portworx/pds/dataservicedeployment/apiv1/dataservicedeployment.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dataservicedeployment

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DataServiceDeploymentServiceAPIService DataServiceDeploymentServiceAPI service
type DataServiceDeploymentServiceAPIService service

type ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	namespaceId string
	dataServiceDeploymentServiceCreateDataServiceDeploymentBody *DataServiceDeploymentServiceCreateDataServiceDeploymentBody
}

func (r ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest) DataServiceDeploymentServiceCreateDataServiceDeploymentBody(dataServiceDeploymentServiceCreateDataServiceDeploymentBody DataServiceDeploymentServiceCreateDataServiceDeploymentBody) ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest {
	r.dataServiceDeploymentServiceCreateDataServiceDeploymentBody = &dataServiceDeploymentServiceCreateDataServiceDeploymentBody
	return r
}

func (r ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest) Execute() (*V1DataServiceDeployment, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceCreateDataServiceDeploymentExecute(r)
}

/*
DataServiceDeploymentServiceCreateDataServiceDeployment CreateDataServiceDeployment API creates the Deployment resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespaceId UID of the namespace resource where this DataService deployment will be created.
 @return ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceCreateDataServiceDeployment(ctx context.Context, namespaceId string) ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest {
	return ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		namespaceId: namespaceId,
	}
}

// Execute executes the request
//  @return V1DataServiceDeployment
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceCreateDataServiceDeploymentExecute(r ApiDataServiceDeploymentServiceCreateDataServiceDeploymentRequest) (*V1DataServiceDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DataServiceDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceCreateDataServiceDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/namespace/{namespaceId}/dataServiceDeployment"
	localVarPath = strings.Replace(localVarPath, "{"+"namespaceId"+"}", url.PathEscape(parameterValueToString(r.namespaceId, "namespaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dataServiceDeploymentServiceCreateDataServiceDeploymentBody == nil {
		return localVarReturnValue, nil, reportError("dataServiceDeploymentServiceCreateDataServiceDeploymentBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataServiceDeploymentServiceCreateDataServiceDeploymentBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	id string
	force *bool
}

// Force flag to delete backup configuration from control plane only.
func (r ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest) Force(force bool) ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest {
	r.force = &force
	return r
}

func (r ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceDeleteDataServiceDeploymentExecute(r)
}

/*
DataServiceDeploymentServiceDeleteDataServiceDeployment DeleteDataServiceDeployment API deletes the DataService Deployment resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the DataService Deployment.
 @return ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceDeleteDataServiceDeployment(ctx context.Context, id string) ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest {
	return ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceDeleteDataServiceDeploymentExecute(r ApiDataServiceDeploymentServiceDeleteDataServiceDeploymentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceDeleteDataServiceDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/dataServiceDeployments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	id string
}

func (r ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest) Execute() (*V1DataServiceDeployment, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceGetDataServiceDeploymentExecute(r)
}

/*
DataServiceDeploymentServiceGetDataServiceDeployment GetDataServiceDeployment API returns the DataService Deployment resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the DataService Deployment.
 @return ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetDataServiceDeployment(ctx context.Context, id string) ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest {
	return ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1DataServiceDeployment
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetDataServiceDeploymentExecute(r ApiDataServiceDeploymentServiceGetDataServiceDeploymentRequest) (*V1DataServiceDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DataServiceDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceGetDataServiceDeployment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/dataServiceDeployments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	id string
}

func (r ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest) Execute() (*V1DataServiceDeploymentCredentials, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceGetDataServiceDeploymentCredentialsExecute(r)
}

/*
DataServiceDeploymentServiceGetDataServiceDeploymentCredentials GetDataServiceDeploymentCredentials API returns the Credentials to be used to access the DataService Deployment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id UID of the DataService Deployment.
 @return ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetDataServiceDeploymentCredentials(ctx context.Context, id string) ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest {
	return ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1DataServiceDeploymentCredentials
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetDataServiceDeploymentCredentialsExecute(r ApiDataServiceDeploymentServiceGetDataServiceDeploymentCredentialsRequest) (*V1DataServiceDeploymentCredentials, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1DataServiceDeploymentCredentials
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceGetDataServiceDeploymentCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/dataServiceDeployments/{id}:credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	v1ListDataServiceDeploymentsRequest *V1ListDataServiceDeploymentsRequest
}

// Request to list the data service deployment resources.
func (r ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest) V1ListDataServiceDeploymentsRequest(v1ListDataServiceDeploymentsRequest V1ListDataServiceDeploymentsRequest) ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest {
	r.v1ListDataServiceDeploymentsRequest = &v1ListDataServiceDeploymentsRequest
	return r
}

func (r ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest) Execute() (*V1KeyPerformanceIndicators, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceGetKeyPerformanceIndicatorsExecute(r)
}

/*
DataServiceDeploymentServiceGetKeyPerformanceIndicators GetKeyPerformanceIndicator API return the analytics of the DataService Deployment resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetKeyPerformanceIndicators(ctx context.Context) ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest {
	return ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1KeyPerformanceIndicators
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceGetKeyPerformanceIndicatorsExecute(r ApiDataServiceDeploymentServiceGetKeyPerformanceIndicatorsRequest) (*V1KeyPerformanceIndicators, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1KeyPerformanceIndicators
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceGetKeyPerformanceIndicators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/dataServiceDeployments:kpis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1ListDataServiceDeploymentsRequest == nil {
		return localVarReturnValue, nil, reportError("v1ListDataServiceDeploymentsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1ListDataServiceDeploymentsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest struct {
	ctx context.Context
	ApiService *DataServiceDeploymentServiceAPIService
	v1ListDataServiceDeploymentsRequest *V1ListDataServiceDeploymentsRequest
}

// Request to list the data service deployment resources.
func (r ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest) V1ListDataServiceDeploymentsRequest(v1ListDataServiceDeploymentsRequest V1ListDataServiceDeploymentsRequest) ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest {
	r.v1ListDataServiceDeploymentsRequest = &v1ListDataServiceDeploymentsRequest
	return r
}

func (r ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest) Execute() (*V1ListDataServiceDeploymentsResponse, *http.Response, error) {
	return r.ApiService.DataServiceDeploymentServiceListDataServiceDeploymentsExecute(r)
}

/*
DataServiceDeploymentServiceListDataServiceDeployments ListDataServiceDeployments API lists the DataService Deployment resources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest
*/
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceListDataServiceDeployments(ctx context.Context) ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest {
	return ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListDataServiceDeploymentsResponse
func (a *DataServiceDeploymentServiceAPIService) DataServiceDeploymentServiceListDataServiceDeploymentsExecute(r ApiDataServiceDeploymentServiceListDataServiceDeploymentsRequest) (*V1ListDataServiceDeploymentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListDataServiceDeploymentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataServiceDeploymentServiceAPIService.DataServiceDeploymentServiceListDataServiceDeployments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/dataServiceDeployments:search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1ListDataServiceDeploymentsRequest == nil {
		return localVarReturnValue, nil, reportError("v1ListDataServiceDeploymentsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1ListDataServiceDeploymentsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
