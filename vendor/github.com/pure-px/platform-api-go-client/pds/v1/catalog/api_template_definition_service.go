/*
public/portworx/pds/catalog/templatedefinition/apiv1/templatedefinition.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TemplateDefinitionServiceAPIService TemplateDefinitionServiceAPI service
type TemplateDefinitionServiceAPIService service

type ApiTemplateDefinitionServiceGetRevisionRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	nameSemanticVersionName *string
	nameSemanticVersionSemanticVersion *string
	uid *string
}

// Name(kind) of the revision.
func (r ApiTemplateDefinitionServiceGetRevisionRequest) NameSemanticVersionName(nameSemanticVersionName string) ApiTemplateDefinitionServiceGetRevisionRequest {
	r.nameSemanticVersionName = &nameSemanticVersionName
	return r
}

// Version of the revision.
func (r ApiTemplateDefinitionServiceGetRevisionRequest) NameSemanticVersionSemanticVersion(nameSemanticVersionSemanticVersion string) ApiTemplateDefinitionServiceGetRevisionRequest {
	r.nameSemanticVersionSemanticVersion = &nameSemanticVersionSemanticVersion
	return r
}

// UID of the revision.
func (r ApiTemplateDefinitionServiceGetRevisionRequest) Uid(uid string) ApiTemplateDefinitionServiceGetRevisionRequest {
	r.uid = &uid
	return r
}

func (r ApiTemplateDefinitionServiceGetRevisionRequest) Execute() (*V1Revision, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceGetRevisionExecute(r)
}

/*
TemplateDefinitionServiceGetRevision GetRevision gets the revision details, containing the actual schema.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTemplateDefinitionServiceGetRevisionRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceGetRevision(ctx context.Context) ApiTemplateDefinitionServiceGetRevisionRequest {
	return ApiTemplateDefinitionServiceGetRevisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1Revision
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceGetRevisionExecute(r ApiTemplateDefinitionServiceGetRevisionRequest) (*V1Revision, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Revision
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceGetRevision")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/revisions:get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nameSemanticVersionName == nil {
		return localVarReturnValue, nil, reportError("nameSemanticVersionName is required and must be specified")
	}
	if r.nameSemanticVersionSemanticVersion == nil {
		return localVarReturnValue, nil, reportError("nameSemanticVersionSemanticVersion is required and must be specified")
	}

	if r.uid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uid", r.uid, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "nameSemanticVersion.name", r.nameSemanticVersionName, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "nameSemanticVersion.semanticVersion", r.nameSemanticVersionSemanticVersion, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateDefinitionServiceGetTemplateTypeRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	id string
}

func (r ApiTemplateDefinitionServiceGetTemplateTypeRequest) Execute() (*V1TemplateType, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceGetTemplateTypeExecute(r)
}

/*
TemplateDefinitionServiceGetTemplateType GetTemplateType API returns the template type by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unique id of template type.
 @return ApiTemplateDefinitionServiceGetTemplateTypeRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceGetTemplateType(ctx context.Context, id string) ApiTemplateDefinitionServiceGetTemplateTypeRequest {
	return ApiTemplateDefinitionServiceGetTemplateTypeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return V1TemplateType
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceGetTemplateTypeExecute(r ApiTemplateDefinitionServiceGetTemplateTypeRequest) (*V1TemplateType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1TemplateType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceGetTemplateType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateDefinitionServiceListRevisionsRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	sortSortBy *string
	sortSortOrder *string
	paginationPageNumber *string
	paginationPageSize *string
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiTemplateDefinitionServiceListRevisionsRequest) SortSortBy(sortSortBy string) ApiTemplateDefinitionServiceListRevisionsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiTemplateDefinitionServiceListRevisionsRequest) SortSortOrder(sortSortOrder string) ApiTemplateDefinitionServiceListRevisionsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

// Page number is the page number to return based on the size.
func (r ApiTemplateDefinitionServiceListRevisionsRequest) PaginationPageNumber(paginationPageNumber string) ApiTemplateDefinitionServiceListRevisionsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiTemplateDefinitionServiceListRevisionsRequest) PaginationPageSize(paginationPageSize string) ApiTemplateDefinitionServiceListRevisionsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiTemplateDefinitionServiceListRevisionsRequest) Execute() (*V1ListRevisionsResponse, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceListRevisionsExecute(r)
}

/*
TemplateDefinitionServiceListRevisions ListRevisions list the revisions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTemplateDefinitionServiceListRevisionsRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListRevisions(ctx context.Context) ApiTemplateDefinitionServiceListRevisionsRequest {
	return ApiTemplateDefinitionServiceListRevisionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListRevisionsResponse
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListRevisionsExecute(r ApiTemplateDefinitionServiceListRevisionsRequest) (*V1ListRevisionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListRevisionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceListRevisions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/revisions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateDefinitionServiceListTemplateKindsRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	semanticVersion *string
	prefix *string
	sortSortBy *string
	sortSortOrder *string
	paginationPageNumber *string
	paginationPageSize *string
}

// Version of the revision, this accepts wild card, eg: 1.*, 1.2.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) SemanticVersion(semanticVersion string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.semanticVersion = &semanticVersion
	return r
}

// Prefix of the kind, eg: pds, pds:application, pds:application:postg.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) Prefix(prefix string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.prefix = &prefix
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) SortSortBy(sortSortBy string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) SortSortOrder(sortSortOrder string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

// Page number is the page number to return based on the size.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) PaginationPageNumber(paginationPageNumber string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) PaginationPageSize(paginationPageSize string) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiTemplateDefinitionServiceListTemplateKindsRequest) Execute() (*V1ListTemplateKindsResponse, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceListTemplateKindsExecute(r)
}

/*
TemplateDefinitionServiceListTemplateKinds ListTemplateKindRequest: Used to list unique template kind(names).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTemplateDefinitionServiceListTemplateKindsRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateKinds(ctx context.Context) ApiTemplateDefinitionServiceListTemplateKindsRequest {
	return ApiTemplateDefinitionServiceListTemplateKindsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTemplateKindsResponse
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateKindsExecute(r ApiTemplateDefinitionServiceListTemplateKindsRequest) (*V1ListTemplateKindsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTemplateKindsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceListTemplateKinds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/kinds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.semanticVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "semanticVersion", r.semanticVersion, "")
	}
	if r.prefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", r.prefix, "")
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateDefinitionServiceListTemplateSamplesRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	kind *string
	paginationPageNumber *string
	paginationPageSize *string
}

// filter sample templates based on kind, this accepts wild card, eg: pds:service:postgre*
func (r ApiTemplateDefinitionServiceListTemplateSamplesRequest) Kind(kind string) ApiTemplateDefinitionServiceListTemplateSamplesRequest {
	r.kind = &kind
	return r
}

// Page number is the page number to return based on the size.
func (r ApiTemplateDefinitionServiceListTemplateSamplesRequest) PaginationPageNumber(paginationPageNumber string) ApiTemplateDefinitionServiceListTemplateSamplesRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiTemplateDefinitionServiceListTemplateSamplesRequest) PaginationPageSize(paginationPageSize string) ApiTemplateDefinitionServiceListTemplateSamplesRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

func (r ApiTemplateDefinitionServiceListTemplateSamplesRequest) Execute() (*V1ListTemplateSamplesResponse, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceListTemplateSamplesExecute(r)
}

/*
TemplateDefinitionServiceListTemplateSamples ListTemplateSamples: Used to list template sample schema.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTemplateDefinitionServiceListTemplateSamplesRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateSamples(ctx context.Context) ApiTemplateDefinitionServiceListTemplateSamplesRequest {
	return ApiTemplateDefinitionServiceListTemplateSamplesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTemplateSamplesResponse
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateSamplesExecute(r ApiTemplateDefinitionServiceListTemplateSamplesRequest) (*V1ListTemplateSamplesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTemplateSamplesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceListTemplateSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/samples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.kind != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "kind", r.kind, "")
	}
	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTemplateDefinitionServiceListTemplateTypesRequest struct {
	ctx context.Context
	ApiService *TemplateDefinitionServiceAPIService
	paginationPageNumber *string
	paginationPageSize *string
	sortSortBy *string
	sortSortOrder *string
}

// Page number is the page number to return based on the size.
func (r ApiTemplateDefinitionServiceListTemplateTypesRequest) PaginationPageNumber(paginationPageNumber string) ApiTemplateDefinitionServiceListTemplateTypesRequest {
	r.paginationPageNumber = &paginationPageNumber
	return r
}

// Page size is the maximum number of records to include per page.
func (r ApiTemplateDefinitionServiceListTemplateTypesRequest) PaginationPageSize(paginationPageSize string) ApiTemplateDefinitionServiceListTemplateTypesRequest {
	r.paginationPageSize = &paginationPageSize
	return r
}

// Name of the attribute to sort results by.   - FIELD_UNSPECIFIED: Unspecified, do not use.  - NAME: Sorting based on the name of the resource.  - CREATED_AT: Sorting on create time of the resource.  - UPDATED_AT: Sorting on update time of the resource.  - PHASE: Sorting on phase of the resource.
func (r ApiTemplateDefinitionServiceListTemplateTypesRequest) SortSortBy(sortSortBy string) ApiTemplateDefinitionServiceListTemplateTypesRequest {
	r.sortSortBy = &sortSortBy
	return r
}

// Order of sorting to be applied on requested list. If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.   - VALUE_UNSPECIFIED: Unspecified, do not use.  - ASC: Sort order ascending.  - DESC: Sort order descending.
func (r ApiTemplateDefinitionServiceListTemplateTypesRequest) SortSortOrder(sortSortOrder string) ApiTemplateDefinitionServiceListTemplateTypesRequest {
	r.sortSortOrder = &sortSortOrder
	return r
}

func (r ApiTemplateDefinitionServiceListTemplateTypesRequest) Execute() (*V1ListTemplateTypesResponse, *http.Response, error) {
	return r.ApiService.TemplateDefinitionServiceListTemplateTypesExecute(r)
}

/*
TemplateDefinitionServiceListTemplateTypes ListTemplateTypes API returns the list of all supported template types.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTemplateDefinitionServiceListTemplateTypesRequest
*/
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateTypes(ctx context.Context) ApiTemplateDefinitionServiceListTemplateTypesRequest {
	return ApiTemplateDefinitionServiceListTemplateTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListTemplateTypesResponse
func (a *TemplateDefinitionServiceAPIService) TemplateDefinitionServiceListTemplateTypesExecute(r ApiTemplateDefinitionServiceListTemplateTypesRequest) (*V1ListTemplateTypesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListTemplateTypesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TemplateDefinitionServiceAPIService.TemplateDefinitionServiceListTemplateTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pds/v1/catalog/templateDefinition/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.paginationPageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageNumber", r.paginationPageNumber, "")
	}
	if r.paginationPageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pagination.pageSize", r.paginationPageSize, "")
	}
	if r.sortSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortBy", r.sortSortBy, "")
	} else {
		var defaultValue string = "FIELD_UNSPECIFIED"
		r.sortSortBy = &defaultValue
	}
	if r.sortSortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort.sortOrder", r.sortSortOrder, "")
	} else {
		var defaultValue string = "VALUE_UNSPECIFIED"
		r.sortSortOrder = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
