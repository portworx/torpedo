/*
public/portworx/pds/catalog/dataserviceversions/apiv1/dataserviceversions.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1RevisionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RevisionInfo{}

// V1RevisionInfo RevisionInfo contains info.
type V1RevisionInfo struct {
	// Semantic version of the revision: 1.2 (major.minor - patch version not required).
	SemanticVersion string `json:"semanticVersion"`
	// Whether this revision has been deprecated.
	Deprecated *bool `json:"deprecated,omitempty"`
	// Schema of the revision, if schema is backward compatible, update the revision, else upgrade.
	Schema map[string]interface{} `json:"schema"`
}

type _V1RevisionInfo V1RevisionInfo

// NewV1RevisionInfo instantiates a new V1RevisionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RevisionInfo(semanticVersion string, schema map[string]interface{}) *V1RevisionInfo {
	this := V1RevisionInfo{}
	this.SemanticVersion = semanticVersion
	this.Schema = schema
	return &this
}

// NewV1RevisionInfoWithDefaults instantiates a new V1RevisionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RevisionInfoWithDefaults() *V1RevisionInfo {
	this := V1RevisionInfo{}
	return &this
}

// GetSemanticVersion returns the SemanticVersion field value
func (o *V1RevisionInfo) GetSemanticVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SemanticVersion
}

// GetSemanticVersionOk returns a tuple with the SemanticVersion field value
// and a boolean to check if the value has been set.
func (o *V1RevisionInfo) GetSemanticVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SemanticVersion, true
}

// SetSemanticVersion sets field value
func (o *V1RevisionInfo) SetSemanticVersion(v string) {
	o.SemanticVersion = v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *V1RevisionInfo) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RevisionInfo) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *V1RevisionInfo) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *V1RevisionInfo) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetSchema returns the Schema field value
func (o *V1RevisionInfo) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *V1RevisionInfo) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *V1RevisionInfo) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

func (o V1RevisionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RevisionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["semanticVersion"] = o.SemanticVersion
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	toSerialize["schema"] = o.Schema
	return toSerialize, nil
}

func (o *V1RevisionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"semanticVersion",
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1RevisionInfo := _V1RevisionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1RevisionInfo)

	if err != nil {
		return err
	}

	*o = V1RevisionInfo(varV1RevisionInfo)

	return err
}

type NullableV1RevisionInfo struct {
	value *V1RevisionInfo
	isSet bool
}

func (v NullableV1RevisionInfo) Get() *V1RevisionInfo {
	return v.value
}

func (v *NullableV1RevisionInfo) Set(val *V1RevisionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RevisionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RevisionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RevisionInfo(val *V1RevisionInfo) *NullableV1RevisionInfo {
	return &NullableV1RevisionInfo{value: val, isSet: true}
}

func (v NullableV1RevisionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RevisionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


