/*
public/portworx/pds/catalog/dataservices/apiv1/dataservices.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"encoding/json"
	"fmt"
)

// ListDataServicesRequestEnabled Enabled indicate list either all, enabled only or disabled only data services.   - ENABLED_UNSPECIFIED: List all data services.  - TRUE: List only enabled data services.  - FALSE: List only disabled data services.
type ListDataServicesRequestEnabled string

// List of ListDataServicesRequestEnabled
const (
	LISTDATASERVICESREQUESTENABLED_ENABLED_UNSPECIFIED ListDataServicesRequestEnabled = "ENABLED_UNSPECIFIED"
	LISTDATASERVICESREQUESTENABLED_TRUE ListDataServicesRequestEnabled = "TRUE"
	LISTDATASERVICESREQUESTENABLED_FALSE ListDataServicesRequestEnabled = "FALSE"
)

// All allowed values of ListDataServicesRequestEnabled enum
var AllowedListDataServicesRequestEnabledEnumValues = []ListDataServicesRequestEnabled{
	"ENABLED_UNSPECIFIED",
	"TRUE",
	"FALSE",
}

func (v *ListDataServicesRequestEnabled) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListDataServicesRequestEnabled(value)
	for _, existing := range AllowedListDataServicesRequestEnabledEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListDataServicesRequestEnabled", value)
}

// NewListDataServicesRequestEnabledFromValue returns a pointer to a valid ListDataServicesRequestEnabled
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListDataServicesRequestEnabledFromValue(v string) (*ListDataServicesRequestEnabled, error) {
	ev := ListDataServicesRequestEnabled(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListDataServicesRequestEnabled: valid values are %v", v, AllowedListDataServicesRequestEnabledEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListDataServicesRequestEnabled) IsValid() bool {
	for _, existing := range AllowedListDataServicesRequestEnabledEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListDataServicesRequestEnabled value
func (v ListDataServicesRequestEnabled) Ptr() *ListDataServicesRequestEnabled {
	return &v
}

type NullableListDataServicesRequestEnabled struct {
	value *ListDataServicesRequestEnabled
	isSet bool
}

func (v NullableListDataServicesRequestEnabled) Get() *ListDataServicesRequestEnabled {
	return v.value
}

func (v *NullableListDataServicesRequestEnabled) Set(val *ListDataServicesRequestEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullableListDataServicesRequestEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullableListDataServicesRequestEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDataServicesRequestEnabled(val *ListDataServicesRequestEnabled) *NullableListDataServicesRequestEnabled {
	return &NullableListDataServicesRequestEnabled{value: val, isSet: true}
}

func (v NullableListDataServicesRequestEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDataServicesRequestEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

