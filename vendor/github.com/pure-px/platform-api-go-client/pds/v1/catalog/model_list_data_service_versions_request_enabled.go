/*
public/portworx/pds/catalog/dataservices/apiv1/dataservices.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"encoding/json"
	"fmt"
)

// ListDataServiceVersionsRequestEnabled Enabled indicate either list all, enabled only or disabled only versions.   - ENABLED_UNSPECIFIED: List all versions.  - TRUE: List only enabled versions.  - FALSE: List only disabled versions.
type ListDataServiceVersionsRequestEnabled string

// List of ListDataServiceVersionsRequestEnabled
const (
	LISTDATASERVICEVERSIONSREQUESTENABLED_ENABLED_UNSPECIFIED ListDataServiceVersionsRequestEnabled = "ENABLED_UNSPECIFIED"
	LISTDATASERVICEVERSIONSREQUESTENABLED_TRUE ListDataServiceVersionsRequestEnabled = "TRUE"
	LISTDATASERVICEVERSIONSREQUESTENABLED_FALSE ListDataServiceVersionsRequestEnabled = "FALSE"
)

// All allowed values of ListDataServiceVersionsRequestEnabled enum
var AllowedListDataServiceVersionsRequestEnabledEnumValues = []ListDataServiceVersionsRequestEnabled{
	"ENABLED_UNSPECIFIED",
	"TRUE",
	"FALSE",
}

func (v *ListDataServiceVersionsRequestEnabled) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListDataServiceVersionsRequestEnabled(value)
	for _, existing := range AllowedListDataServiceVersionsRequestEnabledEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListDataServiceVersionsRequestEnabled", value)
}

// NewListDataServiceVersionsRequestEnabledFromValue returns a pointer to a valid ListDataServiceVersionsRequestEnabled
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListDataServiceVersionsRequestEnabledFromValue(v string) (*ListDataServiceVersionsRequestEnabled, error) {
	ev := ListDataServiceVersionsRequestEnabled(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListDataServiceVersionsRequestEnabled: valid values are %v", v, AllowedListDataServiceVersionsRequestEnabledEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListDataServiceVersionsRequestEnabled) IsValid() bool {
	for _, existing := range AllowedListDataServiceVersionsRequestEnabledEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListDataServiceVersionsRequestEnabled value
func (v ListDataServiceVersionsRequestEnabled) Ptr() *ListDataServiceVersionsRequestEnabled {
	return &v
}

type NullableListDataServiceVersionsRequestEnabled struct {
	value *ListDataServiceVersionsRequestEnabled
	isSet bool
}

func (v NullableListDataServiceVersionsRequestEnabled) Get() *ListDataServiceVersionsRequestEnabled {
	return v.value
}

func (v *NullableListDataServiceVersionsRequestEnabled) Set(val *ListDataServiceVersionsRequestEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullableListDataServiceVersionsRequestEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullableListDataServiceVersionsRequestEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDataServiceVersionsRequestEnabled(val *ListDataServiceVersionsRequestEnabled) *NullableListDataServiceVersionsRequestEnabled {
	return &NullableListDataServiceVersionsRequestEnabled{value: val, isSet: true}
}

func (v NullableListDataServiceVersionsRequestEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDataServiceVersionsRequestEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

