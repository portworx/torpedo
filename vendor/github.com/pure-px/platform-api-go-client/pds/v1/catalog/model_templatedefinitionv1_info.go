/*
public/portworx/pds/catalog/dataservices/apiv1/dataservices.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"encoding/json"
)

// checks if the Templatedefinitionv1Info type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Templatedefinitionv1Info{}

// Templatedefinitionv1Info Info of sample template.
type Templatedefinitionv1Info struct {
	Kind *string `json:"kind,omitempty"`
	// template_values of the sample template.
	TemplateValues *map[string]string `json:"templateValues,omitempty"`
}

// NewTemplatedefinitionv1Info instantiates a new Templatedefinitionv1Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplatedefinitionv1Info() *Templatedefinitionv1Info {
	this := Templatedefinitionv1Info{}
	return &this
}

// NewTemplatedefinitionv1InfoWithDefaults instantiates a new Templatedefinitionv1Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplatedefinitionv1InfoWithDefaults() *Templatedefinitionv1Info {
	this := Templatedefinitionv1Info{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Templatedefinitionv1Info) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Templatedefinitionv1Info) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Templatedefinitionv1Info) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Templatedefinitionv1Info) SetKind(v string) {
	o.Kind = &v
}

// GetTemplateValues returns the TemplateValues field value if set, zero value otherwise.
func (o *Templatedefinitionv1Info) GetTemplateValues() map[string]string {
	if o == nil || IsNil(o.TemplateValues) {
		var ret map[string]string
		return ret
	}
	return *o.TemplateValues
}

// GetTemplateValuesOk returns a tuple with the TemplateValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Templatedefinitionv1Info) GetTemplateValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TemplateValues) {
		return nil, false
	}
	return o.TemplateValues, true
}

// HasTemplateValues returns a boolean if a field has been set.
func (o *Templatedefinitionv1Info) HasTemplateValues() bool {
	if o != nil && !IsNil(o.TemplateValues) {
		return true
	}

	return false
}

// SetTemplateValues gets a reference to the given map[string]string and assigns it to the TemplateValues field.
func (o *Templatedefinitionv1Info) SetTemplateValues(v map[string]string) {
	o.TemplateValues = &v
}

func (o Templatedefinitionv1Info) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Templatedefinitionv1Info) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.TemplateValues) {
		toSerialize["templateValues"] = o.TemplateValues
	}
	return toSerialize, nil
}

type NullableTemplatedefinitionv1Info struct {
	value *Templatedefinitionv1Info
	isSet bool
}

func (v NullableTemplatedefinitionv1Info) Get() *Templatedefinitionv1Info {
	return v.value
}

func (v *NullableTemplatedefinitionv1Info) Set(val *Templatedefinitionv1Info) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplatedefinitionv1Info) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplatedefinitionv1Info) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplatedefinitionv1Info(val *Templatedefinitionv1Info) *NullableTemplatedefinitionv1Info {
	return &NullableTemplatedefinitionv1Info{value: val, isSet: true}
}

func (v NullableTemplatedefinitionv1Info) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplatedefinitionv1Info) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


