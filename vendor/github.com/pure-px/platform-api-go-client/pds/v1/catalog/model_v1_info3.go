/*
public/portworx/pds/catalog/templatedefinition/apiv1/templatedefinition.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package catalog

import (
	"encoding/json"
)

// checks if the V1Info3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Info3{}

// V1Info3 Information related to the data service version.
type V1Info3 struct {
	// Enabled indicates if the version is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	RevisionId *string `json:"revisionId,omitempty"`
}

// NewV1Info3 instantiates a new V1Info3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Info3() *V1Info3 {
	this := V1Info3{}
	return &this
}

// NewV1Info3WithDefaults instantiates a new V1Info3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1Info3WithDefaults() *V1Info3 {
	this := V1Info3{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V1Info3) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Info3) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V1Info3) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V1Info3) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRevisionId returns the RevisionId field value if set, zero value otherwise.
func (o *V1Info3) GetRevisionId() string {
	if o == nil || IsNil(o.RevisionId) {
		var ret string
		return ret
	}
	return *o.RevisionId
}

// GetRevisionIdOk returns a tuple with the RevisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Info3) GetRevisionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RevisionId) {
		return nil, false
	}
	return o.RevisionId, true
}

// HasRevisionId returns a boolean if a field has been set.
func (o *V1Info3) HasRevisionId() bool {
	if o != nil && !IsNil(o.RevisionId) {
		return true
	}

	return false
}

// SetRevisionId gets a reference to the given string and assigns it to the RevisionId field.
func (o *V1Info3) SetRevisionId(v string) {
	o.RevisionId = &v
}

func (o V1Info3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Info3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RevisionId) {
		toSerialize["revisionId"] = o.RevisionId
	}
	return toSerialize, nil
}

type NullableV1Info3 struct {
	value *V1Info3
	isSet bool
}

func (v NullableV1Info3) Get() *V1Info3 {
	return v.value
}

func (v *NullableV1Info3) Set(val *V1Info3) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Info3) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Info3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Info3(val *V1Info3) *NullableV1Info3 {
	return &NullableV1Info3{value: val, isSet: true}
}

func (v NullableV1Info3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Info3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


