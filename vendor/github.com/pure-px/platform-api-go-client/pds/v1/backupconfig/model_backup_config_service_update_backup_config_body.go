/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backupconfig

import (
	"encoding/json"
)

// checks if the BackupConfigServiceUpdateBackupConfigBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupConfigServiceUpdateBackupConfigBody{}

// BackupConfigServiceUpdateBackupConfigBody Request to update a backup configuration.
type BackupConfigServiceUpdateBackupConfigBody struct {
	Suspend *V1BackupConfigSuspended `json:"suspend,omitempty"`
	// Labels to apply to the Backup Config object.
	Labels *map[string]string `json:"labels,omitempty"`
	// Annotations for the Backup Config object.
	Annotations *map[string]string `json:"annotations,omitempty"`
}

// NewBackupConfigServiceUpdateBackupConfigBody instantiates a new BackupConfigServiceUpdateBackupConfigBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupConfigServiceUpdateBackupConfigBody() *BackupConfigServiceUpdateBackupConfigBody {
	this := BackupConfigServiceUpdateBackupConfigBody{}
	var suspend V1BackupConfigSuspended = V1BACKUPCONFIGSUSPENDED_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED
	this.Suspend = &suspend
	return &this
}

// NewBackupConfigServiceUpdateBackupConfigBodyWithDefaults instantiates a new BackupConfigServiceUpdateBackupConfigBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupConfigServiceUpdateBackupConfigBodyWithDefaults() *BackupConfigServiceUpdateBackupConfigBody {
	this := BackupConfigServiceUpdateBackupConfigBody{}
	var suspend V1BackupConfigSuspended = V1BACKUPCONFIGSUSPENDED_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED
	this.Suspend = &suspend
	return &this
}

// GetSuspend returns the Suspend field value if set, zero value otherwise.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetSuspend() V1BackupConfigSuspended {
	if o == nil || IsNil(o.Suspend) {
		var ret V1BackupConfigSuspended
		return ret
	}
	return *o.Suspend
}

// GetSuspendOk returns a tuple with the Suspend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetSuspendOk() (*V1BackupConfigSuspended, bool) {
	if o == nil || IsNil(o.Suspend) {
		return nil, false
	}
	return o.Suspend, true
}

// HasSuspend returns a boolean if a field has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) HasSuspend() bool {
	if o != nil && !IsNil(o.Suspend) {
		return true
	}

	return false
}

// SetSuspend gets a reference to the given V1BackupConfigSuspended and assigns it to the Suspend field.
func (o *BackupConfigServiceUpdateBackupConfigBody) SetSuspend(v V1BackupConfigSuspended) {
	o.Suspend = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *BackupConfigServiceUpdateBackupConfigBody) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *BackupConfigServiceUpdateBackupConfigBody) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *BackupConfigServiceUpdateBackupConfigBody) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o BackupConfigServiceUpdateBackupConfigBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupConfigServiceUpdateBackupConfigBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Suspend) {
		toSerialize["suspend"] = o.Suspend
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	return toSerialize, nil
}

type NullableBackupConfigServiceUpdateBackupConfigBody struct {
	value *BackupConfigServiceUpdateBackupConfigBody
	isSet bool
}

func (v NullableBackupConfigServiceUpdateBackupConfigBody) Get() *BackupConfigServiceUpdateBackupConfigBody {
	return v.value
}

func (v *NullableBackupConfigServiceUpdateBackupConfigBody) Set(val *BackupConfigServiceUpdateBackupConfigBody) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupConfigServiceUpdateBackupConfigBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupConfigServiceUpdateBackupConfigBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupConfigServiceUpdateBackupConfigBody(val *BackupConfigServiceUpdateBackupConfigBody) *NullableBackupConfigServiceUpdateBackupConfigBody {
	return &NullableBackupConfigServiceUpdateBackupConfigBody{value: val, isSet: true}
}

func (v NullableBackupConfigServiceUpdateBackupConfigBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupConfigServiceUpdateBackupConfigBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


