/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backupconfig

import (
	"encoding/json"
	"fmt"
)

// V1Phase Enum for Phases of the backup configuration.   - PHASE_UNSPECIFIED: Unspecified state.  - PREPARING: Preparing state before creation is successful.  - APPLIED: Applied state when create/update is successful.  - UPDATING: Updating state.  - FAILED: Failed state.  - SUSPENDED: Suspended state.  - DELETING: Deleting state.
type V1Phase string

// List of v1Phase
const (
	V1PHASE_PHASE_UNSPECIFIED V1Phase = "PHASE_UNSPECIFIED"
	V1PHASE_PREPARING V1Phase = "PREPARING"
	V1PHASE_APPLIED V1Phase = "APPLIED"
	V1PHASE_UPDATING V1Phase = "UPDATING"
	V1PHASE_FAILED V1Phase = "FAILED"
	V1PHASE_SUSPENDED V1Phase = "SUSPENDED"
	V1PHASE_DELETING V1Phase = "DELETING"
)

// All allowed values of V1Phase enum
var AllowedV1PhaseEnumValues = []V1Phase{
	"PHASE_UNSPECIFIED",
	"PREPARING",
	"APPLIED",
	"UPDATING",
	"FAILED",
	"SUSPENDED",
	"DELETING",
}

func (v *V1Phase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1Phase(value)
	for _, existing := range AllowedV1PhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1Phase", value)
}

// NewV1PhaseFromValue returns a pointer to a valid V1Phase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1PhaseFromValue(v string) (*V1Phase, error) {
	ev := V1Phase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1Phase: valid values are %v", v, AllowedV1PhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1Phase) IsValid() bool {
	for _, existing := range AllowedV1PhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1Phase value
func (v V1Phase) Ptr() *V1Phase {
	return &v
}

type NullableV1Phase struct {
	value *V1Phase
	isSet bool
}

func (v NullableV1Phase) Get() *V1Phase {
	return v.value
}

func (v *NullableV1Phase) Set(val *V1Phase) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Phase) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Phase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Phase(val *V1Phase) *NullableV1Phase {
	return &NullableV1Phase{value: val, isSet: true}
}

func (v NullableV1Phase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Phase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

