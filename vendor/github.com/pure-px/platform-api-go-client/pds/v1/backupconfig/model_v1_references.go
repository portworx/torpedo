/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backupconfig

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1References type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1References{}

// V1References References to the associated resources for backup configuration.
type V1References struct {
	// UID of the deployment to which the backup configuration belong.
	DeploymentId string `json:"deploymentId"`
	// UID of the backup target to which the backup configuration belong.
	BackupLocationId string `json:"backupLocationId"`
	// UID of the data service to which the backup configuration belong.
	DataServiceId *string `json:"dataServiceId,omitempty"`
}

type _V1References V1References

// NewV1References instantiates a new V1References object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1References(deploymentId string, backupLocationId string) *V1References {
	this := V1References{}
	this.DeploymentId = deploymentId
	this.BackupLocationId = backupLocationId
	return &this
}

// NewV1ReferencesWithDefaults instantiates a new V1References object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ReferencesWithDefaults() *V1References {
	this := V1References{}
	return &this
}

// GetDeploymentId returns the DeploymentId field value
func (o *V1References) GetDeploymentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentId
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value
// and a boolean to check if the value has been set.
func (o *V1References) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentId, true
}

// SetDeploymentId sets field value
func (o *V1References) SetDeploymentId(v string) {
	o.DeploymentId = v
}

// GetBackupLocationId returns the BackupLocationId field value
func (o *V1References) GetBackupLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupLocationId
}

// GetBackupLocationIdOk returns a tuple with the BackupLocationId field value
// and a boolean to check if the value has been set.
func (o *V1References) GetBackupLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupLocationId, true
}

// SetBackupLocationId sets field value
func (o *V1References) SetBackupLocationId(v string) {
	o.BackupLocationId = v
}

// GetDataServiceId returns the DataServiceId field value if set, zero value otherwise.
func (o *V1References) GetDataServiceId() string {
	if o == nil || IsNil(o.DataServiceId) {
		var ret string
		return ret
	}
	return *o.DataServiceId
}

// GetDataServiceIdOk returns a tuple with the DataServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1References) GetDataServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataServiceId) {
		return nil, false
	}
	return o.DataServiceId, true
}

// HasDataServiceId returns a boolean if a field has been set.
func (o *V1References) HasDataServiceId() bool {
	if o != nil && !IsNil(o.DataServiceId) {
		return true
	}

	return false
}

// SetDataServiceId gets a reference to the given string and assigns it to the DataServiceId field.
func (o *V1References) SetDataServiceId(v string) {
	o.DataServiceId = &v
}

func (o V1References) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1References) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deploymentId"] = o.DeploymentId
	toSerialize["backupLocationId"] = o.BackupLocationId
	if !IsNil(o.DataServiceId) {
		toSerialize["dataServiceId"] = o.DataServiceId
	}
	return toSerialize, nil
}

func (o *V1References) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deploymentId",
		"backupLocationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1References := _V1References{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1References)

	if err != nil {
		return err
	}

	*o = V1References(varV1References)

	return err
}

type NullableV1References struct {
	value *V1References
	isSet bool
}

func (v NullableV1References) Get() *V1References {
	return v.value
}

func (v *NullableV1References) Set(val *V1References) {
	v.value = val
	v.isSet = true
}

func (v NullableV1References) IsSet() bool {
	return v.isSet
}

func (v *NullableV1References) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1References(val *V1References) *NullableV1References {
	return &NullableV1References{value: val, isSet: true}
}

func (v NullableV1References) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1References) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


