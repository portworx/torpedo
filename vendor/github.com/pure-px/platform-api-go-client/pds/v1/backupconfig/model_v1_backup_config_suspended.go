/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backupconfig

import (
	"encoding/json"
	"fmt"
)

// V1BackupConfigSuspended BackupConfigSuspended to accept value for suspended flag.   - BACKUP_CONFIG_SUSPENDED_UNSPECIFIED: List all backup configs.  - TRUE: List only suspended backup configs.  - FALSE: List only disabled backup configs.
type V1BackupConfigSuspended string

// List of v1BackupConfigSuspended
const (
	V1BACKUPCONFIGSUSPENDED_BACKUP_CONFIG_SUSPENDED_UNSPECIFIED V1BackupConfigSuspended = "BACKUP_CONFIG_SUSPENDED_UNSPECIFIED"
	V1BACKUPCONFIGSUSPENDED_TRUE V1BackupConfigSuspended = "TRUE"
	V1BACKUPCONFIGSUSPENDED_FALSE V1BackupConfigSuspended = "FALSE"
)

// All allowed values of V1BackupConfigSuspended enum
var AllowedV1BackupConfigSuspendedEnumValues = []V1BackupConfigSuspended{
	"BACKUP_CONFIG_SUSPENDED_UNSPECIFIED",
	"TRUE",
	"FALSE",
}

func (v *V1BackupConfigSuspended) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1BackupConfigSuspended(value)
	for _, existing := range AllowedV1BackupConfigSuspendedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1BackupConfigSuspended", value)
}

// NewV1BackupConfigSuspendedFromValue returns a pointer to a valid V1BackupConfigSuspended
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1BackupConfigSuspendedFromValue(v string) (*V1BackupConfigSuspended, error) {
	ev := V1BackupConfigSuspended(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1BackupConfigSuspended: valid values are %v", v, AllowedV1BackupConfigSuspendedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1BackupConfigSuspended) IsValid() bool {
	for _, existing := range AllowedV1BackupConfigSuspendedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1BackupConfigSuspended value
func (v V1BackupConfigSuspended) Ptr() *V1BackupConfigSuspended {
	return &v
}

type NullableV1BackupConfigSuspended struct {
	value *V1BackupConfigSuspended
	isSet bool
}

func (v NullableV1BackupConfigSuspended) Get() *V1BackupConfigSuspended {
	return v.value
}

func (v *NullableV1BackupConfigSuspended) Set(val *V1BackupConfigSuspended) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BackupConfigSuspended) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BackupConfigSuspended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BackupConfigSuspended(val *V1BackupConfigSuspended) *NullableV1BackupConfigSuspended {
	return &NullableV1BackupConfigSuspended{value: val, isSet: true}
}

func (v NullableV1BackupConfigSuspended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BackupConfigSuspended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

