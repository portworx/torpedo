/*
public/portworx/platform/targetcluster/application/apiv1/application.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package targetcluster

import (
	"encoding/json"
	"fmt"
)

// ApplicationPhasePhase AppStatus determines status of an application.   - PHASE_UNSPECIFIED: Must be set in the proto file; ignore.  - PENDING: Application yet to be installed.  - DEPLOYING: Application deployment on the target cluster in progress.  - SUCCEEDED: Installed successfully.  - FAILED: Application failed to install.  - DELETING: Application is being deleted.
type ApplicationPhasePhase string

// List of ApplicationPhasePhase
const (
	APPLICATIONPHASEPHASE_PHASE_UNSPECIFIED ApplicationPhasePhase = "PHASE_UNSPECIFIED"
	APPLICATIONPHASEPHASE_PENDING ApplicationPhasePhase = "PENDING"
	APPLICATIONPHASEPHASE_DEPLOYING ApplicationPhasePhase = "DEPLOYING"
	APPLICATIONPHASEPHASE_SUCCEEDED ApplicationPhasePhase = "SUCCEEDED"
	APPLICATIONPHASEPHASE_FAILED ApplicationPhasePhase = "FAILED"
	APPLICATIONPHASEPHASE_DELETING ApplicationPhasePhase = "DELETING"
)

// All allowed values of ApplicationPhasePhase enum
var AllowedApplicationPhasePhaseEnumValues = []ApplicationPhasePhase{
	"PHASE_UNSPECIFIED",
	"PENDING",
	"DEPLOYING",
	"SUCCEEDED",
	"FAILED",
	"DELETING",
}

func (v *ApplicationPhasePhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationPhasePhase(value)
	for _, existing := range AllowedApplicationPhasePhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationPhasePhase", value)
}

// NewApplicationPhasePhaseFromValue returns a pointer to a valid ApplicationPhasePhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationPhasePhaseFromValue(v string) (*ApplicationPhasePhase, error) {
	ev := ApplicationPhasePhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationPhasePhase: valid values are %v", v, AllowedApplicationPhasePhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationPhasePhase) IsValid() bool {
	for _, existing := range AllowedApplicationPhasePhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationPhasePhase value
func (v ApplicationPhasePhase) Ptr() *ApplicationPhasePhase {
	return &v
}

type NullableApplicationPhasePhase struct {
	value *ApplicationPhasePhase
	isSet bool
}

func (v NullableApplicationPhasePhase) Get() *ApplicationPhasePhase {
	return v.value
}

func (v *NullableApplicationPhasePhase) Set(val *ApplicationPhasePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPhasePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPhasePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPhasePhase(val *ApplicationPhasePhase) *NullableApplicationPhasePhase {
	return &NullableApplicationPhasePhase{value: val, isSet: true}
}

func (v NullableApplicationPhasePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPhasePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

