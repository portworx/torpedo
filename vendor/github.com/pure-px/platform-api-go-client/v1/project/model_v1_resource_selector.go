/*
public/portworx/platform/project/apiv1/project.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package project

import (
	"encoding/json"
)

// checks if the V1ResourceSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ResourceSelector{}

// V1ResourceSelector ResourceSelector is used to query resources using the associated infra resources.
type V1ResourceSelector struct {
	// Infra_resource_filters is the list of all filters that should be applied to fetch data related to infra resource. Each filter will have AND relationship.
	InfraResourceFilters []ResourceSelectorResourceFilter `json:"infraResourceFilters,omitempty"`
}

// NewV1ResourceSelector instantiates a new V1ResourceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResourceSelector() *V1ResourceSelector {
	this := V1ResourceSelector{}
	return &this
}

// NewV1ResourceSelectorWithDefaults instantiates a new V1ResourceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResourceSelectorWithDefaults() *V1ResourceSelector {
	this := V1ResourceSelector{}
	return &this
}

// GetInfraResourceFilters returns the InfraResourceFilters field value if set, zero value otherwise.
func (o *V1ResourceSelector) GetInfraResourceFilters() []ResourceSelectorResourceFilter {
	if o == nil || IsNil(o.InfraResourceFilters) {
		var ret []ResourceSelectorResourceFilter
		return ret
	}
	return o.InfraResourceFilters
}

// GetInfraResourceFiltersOk returns a tuple with the InfraResourceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResourceSelector) GetInfraResourceFiltersOk() ([]ResourceSelectorResourceFilter, bool) {
	if o == nil || IsNil(o.InfraResourceFilters) {
		return nil, false
	}
	return o.InfraResourceFilters, true
}

// HasInfraResourceFilters returns a boolean if a field has been set.
func (o *V1ResourceSelector) HasInfraResourceFilters() bool {
	if o != nil && !IsNil(o.InfraResourceFilters) {
		return true
	}

	return false
}

// SetInfraResourceFilters gets a reference to the given []ResourceSelectorResourceFilter and assigns it to the InfraResourceFilters field.
func (o *V1ResourceSelector) SetInfraResourceFilters(v []ResourceSelectorResourceFilter) {
	o.InfraResourceFilters = v
}

func (o V1ResourceSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ResourceSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InfraResourceFilters) {
		toSerialize["infraResourceFilters"] = o.InfraResourceFilters
	}
	return toSerialize, nil
}

type NullableV1ResourceSelector struct {
	value *V1ResourceSelector
	isSet bool
}

func (v NullableV1ResourceSelector) Get() *V1ResourceSelector {
	return v.value
}

func (v *NullableV1ResourceSelector) Set(val *V1ResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResourceSelector(val *V1ResourceSelector) *NullableV1ResourceSelector {
	return &NullableV1ResourceSelector{value: val, isSet: true}
}

func (v NullableV1ResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


