/*
public/portworx/platform/project/apiv1/project.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package project

import (
	"encoding/json"
)

// checks if the Projectv1Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Projectv1Status{}

// Projectv1Status Status represents the current state of the project.
type Projectv1Status struct {
	// Textual information for the current state of the project.
	Reason *string `json:"reason,omitempty"`
	Phase *V1PhaseType `json:"phase,omitempty"`
}

// NewProjectv1Status instantiates a new Projectv1Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectv1Status() *Projectv1Status {
	this := Projectv1Status{}
	var phase V1PhaseType = V1PHASETYPE_TYPE_UNSPECIFIED
	this.Phase = &phase
	return &this
}

// NewProjectv1StatusWithDefaults instantiates a new Projectv1Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectv1StatusWithDefaults() *Projectv1Status {
	this := Projectv1Status{}
	var phase V1PhaseType = V1PHASETYPE_TYPE_UNSPECIFIED
	this.Phase = &phase
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Projectv1Status) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Projectv1Status) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Projectv1Status) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Projectv1Status) SetReason(v string) {
	o.Reason = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *Projectv1Status) GetPhase() V1PhaseType {
	if o == nil || IsNil(o.Phase) {
		var ret V1PhaseType
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Projectv1Status) GetPhaseOk() (*V1PhaseType, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *Projectv1Status) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given V1PhaseType and assigns it to the Phase field.
func (o *Projectv1Status) SetPhase(v V1PhaseType) {
	o.Phase = &v
}

func (o Projectv1Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Projectv1Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	return toSerialize, nil
}

type NullableProjectv1Status struct {
	value *Projectv1Status
	isSet bool
}

func (v NullableProjectv1Status) Get() *Projectv1Status {
	return v.value
}

func (v *NullableProjectv1Status) Set(val *Projectv1Status) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectv1Status) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectv1Status) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectv1Status(val *Projectv1Status) *NullableProjectv1Status {
	return &NullableProjectv1Status{value: val, isSet: true}
}

func (v NullableProjectv1Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectv1Status) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


