/*
public/portworx/platform/project/apiv1/project.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package project

import (
	"encoding/json"
)

// checks if the V1Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Config{}

// V1Config Configuration represents the associated resource details for project.
type V1Config struct {
	InfraResources *V1Resources `json:"infraResources,omitempty"`
	ApplicationsResources *V1ApplicationResources `json:"applicationsResources,omitempty"`
}

// NewV1Config instantiates a new V1Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config() *V1Config {
	this := V1Config{}
	return &this
}

// NewV1ConfigWithDefaults instantiates a new V1Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigWithDefaults() *V1Config {
	this := V1Config{}
	return &this
}

// GetInfraResources returns the InfraResources field value if set, zero value otherwise.
func (o *V1Config) GetInfraResources() V1Resources {
	if o == nil || IsNil(o.InfraResources) {
		var ret V1Resources
		return ret
	}
	return *o.InfraResources
}

// GetInfraResourcesOk returns a tuple with the InfraResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetInfraResourcesOk() (*V1Resources, bool) {
	if o == nil || IsNil(o.InfraResources) {
		return nil, false
	}
	return o.InfraResources, true
}

// HasInfraResources returns a boolean if a field has been set.
func (o *V1Config) HasInfraResources() bool {
	if o != nil && !IsNil(o.InfraResources) {
		return true
	}

	return false
}

// SetInfraResources gets a reference to the given V1Resources and assigns it to the InfraResources field.
func (o *V1Config) SetInfraResources(v V1Resources) {
	o.InfraResources = &v
}

// GetApplicationsResources returns the ApplicationsResources field value if set, zero value otherwise.
func (o *V1Config) GetApplicationsResources() V1ApplicationResources {
	if o == nil || IsNil(o.ApplicationsResources) {
		var ret V1ApplicationResources
		return ret
	}
	return *o.ApplicationsResources
}

// GetApplicationsResourcesOk returns a tuple with the ApplicationsResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetApplicationsResourcesOk() (*V1ApplicationResources, bool) {
	if o == nil || IsNil(o.ApplicationsResources) {
		return nil, false
	}
	return o.ApplicationsResources, true
}

// HasApplicationsResources returns a boolean if a field has been set.
func (o *V1Config) HasApplicationsResources() bool {
	if o != nil && !IsNil(o.ApplicationsResources) {
		return true
	}

	return false
}

// SetApplicationsResources gets a reference to the given V1ApplicationResources and assigns it to the ApplicationsResources field.
func (o *V1Config) SetApplicationsResources(v V1ApplicationResources) {
	o.ApplicationsResources = &v
}

func (o V1Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InfraResources) {
		toSerialize["infraResources"] = o.InfraResources
	}
	if !IsNil(o.ApplicationsResources) {
		toSerialize["applicationsResources"] = o.ApplicationsResources
	}
	return toSerialize, nil
}

type NullableV1Config struct {
	value *V1Config
	isSet bool
}

func (v NullableV1Config) Get() *V1Config {
	return v.value
}

func (v *NullableV1Config) Set(val *V1Config) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config(val *V1Config) *NullableV1Config {
	return &NullableV1Config{value: val, isSet: true}
}

func (v NullableV1Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


