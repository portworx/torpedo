/*
public/portworx/platform/project/apiv1/project.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package project

import (
	"encoding/json"
)

// checks if the V1SelectorFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SelectorFilter{}

// V1SelectorFilter Filter for a given key.
type V1SelectorFilter struct {
	// Key of key,value pair against which filtering needs to be performs.
	Key *string `json:"key,omitempty"`
	Op *SelectorOperator `json:"op,omitempty"`
	// Value of key,value pair against which filtering needs to be performs if operator is EXIST, value should be an empty array.
	Values []string `json:"values,omitempty"`
}

// NewV1SelectorFilter instantiates a new V1SelectorFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SelectorFilter() *V1SelectorFilter {
	this := V1SelectorFilter{}
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// NewV1SelectorFilterWithDefaults instantiates a new V1SelectorFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SelectorFilterWithDefaults() *V1SelectorFilter {
	this := V1SelectorFilter{}
	var op SelectorOperator = SELECTOROPERATOR_OPERATOR_UNSPECIFIED
	this.Op = &op
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *V1SelectorFilter) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SelectorFilter) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *V1SelectorFilter) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *V1SelectorFilter) SetKey(v string) {
	o.Key = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *V1SelectorFilter) GetOp() SelectorOperator {
	if o == nil || IsNil(o.Op) {
		var ret SelectorOperator
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SelectorFilter) GetOpOk() (*SelectorOperator, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *V1SelectorFilter) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given SelectorOperator and assigns it to the Op field.
func (o *V1SelectorFilter) SetOp(v SelectorOperator) {
	o.Op = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *V1SelectorFilter) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SelectorFilter) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *V1SelectorFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *V1SelectorFilter) SetValues(v []string) {
	o.Values = v
}

func (o V1SelectorFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SelectorFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableV1SelectorFilter struct {
	value *V1SelectorFilter
	isSet bool
}

func (v NullableV1SelectorFilter) Get() *V1SelectorFilter {
	return v.value
}

func (v *NullableV1SelectorFilter) Set(val *V1SelectorFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SelectorFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SelectorFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SelectorFilter(val *V1SelectorFilter) *NullableV1SelectorFilter {
	return &NullableV1SelectorFilter{value: val, isSet: true}
}

func (v NullableV1SelectorFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SelectorFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


