/*
public/portworx/platform/onboard/apiv1/onboard.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onboard

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OnboardServiceAPIService OnboardServiceAPI service
type OnboardServiceAPIService service

type ApiOnboardServiceCreateAccountRegistrationRequest struct {
	ctx context.Context
	ApiService *OnboardServiceAPIService
	v1AccountRegistration *V1AccountRegistration
}

// account to be created and onboarded.
func (r ApiOnboardServiceCreateAccountRegistrationRequest) V1AccountRegistration(v1AccountRegistration V1AccountRegistration) ApiOnboardServiceCreateAccountRegistrationRequest {
	r.v1AccountRegistration = &v1AccountRegistration
	return r
}

func (r ApiOnboardServiceCreateAccountRegistrationRequest) Execute() (*V1AccountRegistration, *http.Response, error) {
	return r.ApiService.OnboardServiceCreateAccountRegistrationExecute(r)
}

/*
OnboardServiceCreateAccountRegistration creates a new account registration request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOnboardServiceCreateAccountRegistrationRequest
*/
func (a *OnboardServiceAPIService) OnboardServiceCreateAccountRegistration(ctx context.Context) ApiOnboardServiceCreateAccountRegistrationRequest {
	return ApiOnboardServiceCreateAccountRegistrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1AccountRegistration
func (a *OnboardServiceAPIService) OnboardServiceCreateAccountRegistrationExecute(r ApiOnboardServiceCreateAccountRegistrationRequest) (*V1AccountRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1AccountRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnboardServiceAPIService.OnboardServiceCreateAccountRegistration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/registration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1AccountRegistration == nil {
		return localVarReturnValue, nil, reportError("v1AccountRegistration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1AccountRegistration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOnboardServiceUpdateAccountRegistrationRequest struct {
	ctx context.Context
	ApiService *OnboardServiceAPIService
	accountRegistrationMetaUid string
	accountForWhichSubscriptionInfoNeedsToBeUpdated *AccountForWhichSubscriptionInfoNeedsToBeUpdated
}

// account for which subscription info needs to be updated.
func (r ApiOnboardServiceUpdateAccountRegistrationRequest) AccountForWhichSubscriptionInfoNeedsToBeUpdated(accountForWhichSubscriptionInfoNeedsToBeUpdated AccountForWhichSubscriptionInfoNeedsToBeUpdated) ApiOnboardServiceUpdateAccountRegistrationRequest {
	r.accountForWhichSubscriptionInfoNeedsToBeUpdated = &accountForWhichSubscriptionInfoNeedsToBeUpdated
	return r
}

func (r ApiOnboardServiceUpdateAccountRegistrationRequest) Execute() (*V1AccountRegistration, *http.Response, error) {
	return r.ApiService.OnboardServiceUpdateAccountRegistrationExecute(r)
}

/*
OnboardServiceUpdateAccountRegistration For updating account subscription info.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountRegistrationMetaUid UID of the resource of the format <resource prefix>-<uuid>.
 @return ApiOnboardServiceUpdateAccountRegistrationRequest
*/
func (a *OnboardServiceAPIService) OnboardServiceUpdateAccountRegistration(ctx context.Context, accountRegistrationMetaUid string) ApiOnboardServiceUpdateAccountRegistrationRequest {
	return ApiOnboardServiceUpdateAccountRegistrationRequest{
		ApiService: a,
		ctx: ctx,
		accountRegistrationMetaUid: accountRegistrationMetaUid,
	}
}

// Execute executes the request
//  @return V1AccountRegistration
func (a *OnboardServiceAPIService) OnboardServiceUpdateAccountRegistrationExecute(r ApiOnboardServiceUpdateAccountRegistrationRequest) (*V1AccountRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1AccountRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnboardServiceAPIService.OnboardServiceUpdateAccountRegistration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/registration/{accountRegistration.meta.uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountRegistration.meta.uid"+"}", url.PathEscape(parameterValueToString(r.accountRegistrationMetaUid, "accountRegistrationMetaUid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountForWhichSubscriptionInfoNeedsToBeUpdated == nil {
		return localVarReturnValue, nil, reportError("accountForWhichSubscriptionInfoNeedsToBeUpdated is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountForWhichSubscriptionInfoNeedsToBeUpdated
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GooglerpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
