// Code generated by MockGen. DO NOT EDIT.
// Source: csi.pb.go

// Package mock_csi is a generated GoMock package.
package csi

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisGetSupportedVersionsResponse_Reply is a mock of isGetSupportedVersionsResponse_Reply interface
type MockisGetSupportedVersionsResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisGetSupportedVersionsResponse_ReplyMockRecorder
}

// MockisGetSupportedVersionsResponse_ReplyMockRecorder is the mock recorder for MockisGetSupportedVersionsResponse_Reply
type MockisGetSupportedVersionsResponse_ReplyMockRecorder struct {
	mock *MockisGetSupportedVersionsResponse_Reply
}

// NewMockisGetSupportedVersionsResponse_Reply creates a new mock instance
func NewMockisGetSupportedVersionsResponse_Reply(ctrl *gomock.Controller) *MockisGetSupportedVersionsResponse_Reply {
	mock := &MockisGetSupportedVersionsResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisGetSupportedVersionsResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetSupportedVersionsResponse_Reply) EXPECT() *MockisGetSupportedVersionsResponse_ReplyMockRecorder {
	return m.recorder
}

// isGetSupportedVersionsResponse_Reply mocks base method
func (m *MockisGetSupportedVersionsResponse_Reply) isGetSupportedVersionsResponse_Reply() {
	m.ctrl.Call(m, "isGetSupportedVersionsResponse_Reply")
}

// isGetSupportedVersionsResponse_Reply indicates an expected call of isGetSupportedVersionsResponse_Reply
func (mr *MockisGetSupportedVersionsResponse_ReplyMockRecorder) isGetSupportedVersionsResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetSupportedVersionsResponse_Reply", reflect.TypeOf((*MockisGetSupportedVersionsResponse_Reply)(nil).isGetSupportedVersionsResponse_Reply))
}

// MockisGetPluginInfoResponse_Reply is a mock of isGetPluginInfoResponse_Reply interface
type MockisGetPluginInfoResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisGetPluginInfoResponse_ReplyMockRecorder
}

// MockisGetPluginInfoResponse_ReplyMockRecorder is the mock recorder for MockisGetPluginInfoResponse_Reply
type MockisGetPluginInfoResponse_ReplyMockRecorder struct {
	mock *MockisGetPluginInfoResponse_Reply
}

// NewMockisGetPluginInfoResponse_Reply creates a new mock instance
func NewMockisGetPluginInfoResponse_Reply(ctrl *gomock.Controller) *MockisGetPluginInfoResponse_Reply {
	mock := &MockisGetPluginInfoResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisGetPluginInfoResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetPluginInfoResponse_Reply) EXPECT() *MockisGetPluginInfoResponse_ReplyMockRecorder {
	return m.recorder
}

// isGetPluginInfoResponse_Reply mocks base method
func (m *MockisGetPluginInfoResponse_Reply) isGetPluginInfoResponse_Reply() {
	m.ctrl.Call(m, "isGetPluginInfoResponse_Reply")
}

// isGetPluginInfoResponse_Reply indicates an expected call of isGetPluginInfoResponse_Reply
func (mr *MockisGetPluginInfoResponse_ReplyMockRecorder) isGetPluginInfoResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetPluginInfoResponse_Reply", reflect.TypeOf((*MockisGetPluginInfoResponse_Reply)(nil).isGetPluginInfoResponse_Reply))
}

// MockisCreateVolumeResponse_Reply is a mock of isCreateVolumeResponse_Reply interface
type MockisCreateVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisCreateVolumeResponse_ReplyMockRecorder
}

// MockisCreateVolumeResponse_ReplyMockRecorder is the mock recorder for MockisCreateVolumeResponse_Reply
type MockisCreateVolumeResponse_ReplyMockRecorder struct {
	mock *MockisCreateVolumeResponse_Reply
}

// NewMockisCreateVolumeResponse_Reply creates a new mock instance
func NewMockisCreateVolumeResponse_Reply(ctrl *gomock.Controller) *MockisCreateVolumeResponse_Reply {
	mock := &MockisCreateVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisCreateVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCreateVolumeResponse_Reply) EXPECT() *MockisCreateVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isCreateVolumeResponse_Reply mocks base method
func (m *MockisCreateVolumeResponse_Reply) isCreateVolumeResponse_Reply() {
	m.ctrl.Call(m, "isCreateVolumeResponse_Reply")
}

// isCreateVolumeResponse_Reply indicates an expected call of isCreateVolumeResponse_Reply
func (mr *MockisCreateVolumeResponse_ReplyMockRecorder) isCreateVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCreateVolumeResponse_Reply", reflect.TypeOf((*MockisCreateVolumeResponse_Reply)(nil).isCreateVolumeResponse_Reply))
}

// MockisVolumeCapability_AccessType is a mock of isVolumeCapability_AccessType interface
type MockisVolumeCapability_AccessType struct {
	ctrl     *gomock.Controller
	recorder *MockisVolumeCapability_AccessTypeMockRecorder
}

// MockisVolumeCapability_AccessTypeMockRecorder is the mock recorder for MockisVolumeCapability_AccessType
type MockisVolumeCapability_AccessTypeMockRecorder struct {
	mock *MockisVolumeCapability_AccessType
}

// NewMockisVolumeCapability_AccessType creates a new mock instance
func NewMockisVolumeCapability_AccessType(ctrl *gomock.Controller) *MockisVolumeCapability_AccessType {
	mock := &MockisVolumeCapability_AccessType{ctrl: ctrl}
	mock.recorder = &MockisVolumeCapability_AccessTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisVolumeCapability_AccessType) EXPECT() *MockisVolumeCapability_AccessTypeMockRecorder {
	return m.recorder
}

// isVolumeCapability_AccessType mocks base method
func (m *MockisVolumeCapability_AccessType) isVolumeCapability_AccessType() {
	m.ctrl.Call(m, "isVolumeCapability_AccessType")
}

// isVolumeCapability_AccessType indicates an expected call of isVolumeCapability_AccessType
func (mr *MockisVolumeCapability_AccessTypeMockRecorder) isVolumeCapability_AccessType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isVolumeCapability_AccessType", reflect.TypeOf((*MockisVolumeCapability_AccessType)(nil).isVolumeCapability_AccessType))
}

// MockisDeleteVolumeResponse_Reply is a mock of isDeleteVolumeResponse_Reply interface
type MockisDeleteVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisDeleteVolumeResponse_ReplyMockRecorder
}

// MockisDeleteVolumeResponse_ReplyMockRecorder is the mock recorder for MockisDeleteVolumeResponse_Reply
type MockisDeleteVolumeResponse_ReplyMockRecorder struct {
	mock *MockisDeleteVolumeResponse_Reply
}

// NewMockisDeleteVolumeResponse_Reply creates a new mock instance
func NewMockisDeleteVolumeResponse_Reply(ctrl *gomock.Controller) *MockisDeleteVolumeResponse_Reply {
	mock := &MockisDeleteVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisDeleteVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisDeleteVolumeResponse_Reply) EXPECT() *MockisDeleteVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isDeleteVolumeResponse_Reply mocks base method
func (m *MockisDeleteVolumeResponse_Reply) isDeleteVolumeResponse_Reply() {
	m.ctrl.Call(m, "isDeleteVolumeResponse_Reply")
}

// isDeleteVolumeResponse_Reply indicates an expected call of isDeleteVolumeResponse_Reply
func (mr *MockisDeleteVolumeResponse_ReplyMockRecorder) isDeleteVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDeleteVolumeResponse_Reply", reflect.TypeOf((*MockisDeleteVolumeResponse_Reply)(nil).isDeleteVolumeResponse_Reply))
}

// MockisControllerPublishVolumeResponse_Reply is a mock of isControllerPublishVolumeResponse_Reply interface
type MockisControllerPublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisControllerPublishVolumeResponse_ReplyMockRecorder
}

// MockisControllerPublishVolumeResponse_ReplyMockRecorder is the mock recorder for MockisControllerPublishVolumeResponse_Reply
type MockisControllerPublishVolumeResponse_ReplyMockRecorder struct {
	mock *MockisControllerPublishVolumeResponse_Reply
}

// NewMockisControllerPublishVolumeResponse_Reply creates a new mock instance
func NewMockisControllerPublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisControllerPublishVolumeResponse_Reply {
	mock := &MockisControllerPublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisControllerPublishVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisControllerPublishVolumeResponse_Reply) EXPECT() *MockisControllerPublishVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isControllerPublishVolumeResponse_Reply mocks base method
func (m *MockisControllerPublishVolumeResponse_Reply) isControllerPublishVolumeResponse_Reply() {
	m.ctrl.Call(m, "isControllerPublishVolumeResponse_Reply")
}

// isControllerPublishVolumeResponse_Reply indicates an expected call of isControllerPublishVolumeResponse_Reply
func (mr *MockisControllerPublishVolumeResponse_ReplyMockRecorder) isControllerPublishVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isControllerPublishVolumeResponse_Reply", reflect.TypeOf((*MockisControllerPublishVolumeResponse_Reply)(nil).isControllerPublishVolumeResponse_Reply))
}

// MockisControllerUnpublishVolumeResponse_Reply is a mock of isControllerUnpublishVolumeResponse_Reply interface
type MockisControllerUnpublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisControllerUnpublishVolumeResponse_ReplyMockRecorder
}

// MockisControllerUnpublishVolumeResponse_ReplyMockRecorder is the mock recorder for MockisControllerUnpublishVolumeResponse_Reply
type MockisControllerUnpublishVolumeResponse_ReplyMockRecorder struct {
	mock *MockisControllerUnpublishVolumeResponse_Reply
}

// NewMockisControllerUnpublishVolumeResponse_Reply creates a new mock instance
func NewMockisControllerUnpublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisControllerUnpublishVolumeResponse_Reply {
	mock := &MockisControllerUnpublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisControllerUnpublishVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisControllerUnpublishVolumeResponse_Reply) EXPECT() *MockisControllerUnpublishVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isControllerUnpublishVolumeResponse_Reply mocks base method
func (m *MockisControllerUnpublishVolumeResponse_Reply) isControllerUnpublishVolumeResponse_Reply() {
	m.ctrl.Call(m, "isControllerUnpublishVolumeResponse_Reply")
}

// isControllerUnpublishVolumeResponse_Reply indicates an expected call of isControllerUnpublishVolumeResponse_Reply
func (mr *MockisControllerUnpublishVolumeResponse_ReplyMockRecorder) isControllerUnpublishVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isControllerUnpublishVolumeResponse_Reply", reflect.TypeOf((*MockisControllerUnpublishVolumeResponse_Reply)(nil).isControllerUnpublishVolumeResponse_Reply))
}

// MockisValidateVolumeCapabilitiesResponse_Reply is a mock of isValidateVolumeCapabilitiesResponse_Reply interface
type MockisValidateVolumeCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder
}

// MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder is the mock recorder for MockisValidateVolumeCapabilitiesResponse_Reply
type MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder struct {
	mock *MockisValidateVolumeCapabilitiesResponse_Reply
}

// NewMockisValidateVolumeCapabilitiesResponse_Reply creates a new mock instance
func NewMockisValidateVolumeCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisValidateVolumeCapabilitiesResponse_Reply {
	mock := &MockisValidateVolumeCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisValidateVolumeCapabilitiesResponse_Reply) EXPECT() *MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder {
	return m.recorder
}

// isValidateVolumeCapabilitiesResponse_Reply mocks base method
func (m *MockisValidateVolumeCapabilitiesResponse_Reply) isValidateVolumeCapabilitiesResponse_Reply() {
	m.ctrl.Call(m, "isValidateVolumeCapabilitiesResponse_Reply")
}

// isValidateVolumeCapabilitiesResponse_Reply indicates an expected call of isValidateVolumeCapabilitiesResponse_Reply
func (mr *MockisValidateVolumeCapabilitiesResponse_ReplyMockRecorder) isValidateVolumeCapabilitiesResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isValidateVolumeCapabilitiesResponse_Reply", reflect.TypeOf((*MockisValidateVolumeCapabilitiesResponse_Reply)(nil).isValidateVolumeCapabilitiesResponse_Reply))
}

// MockisListVolumesResponse_Reply is a mock of isListVolumesResponse_Reply interface
type MockisListVolumesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisListVolumesResponse_ReplyMockRecorder
}

// MockisListVolumesResponse_ReplyMockRecorder is the mock recorder for MockisListVolumesResponse_Reply
type MockisListVolumesResponse_ReplyMockRecorder struct {
	mock *MockisListVolumesResponse_Reply
}

// NewMockisListVolumesResponse_Reply creates a new mock instance
func NewMockisListVolumesResponse_Reply(ctrl *gomock.Controller) *MockisListVolumesResponse_Reply {
	mock := &MockisListVolumesResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisListVolumesResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisListVolumesResponse_Reply) EXPECT() *MockisListVolumesResponse_ReplyMockRecorder {
	return m.recorder
}

// isListVolumesResponse_Reply mocks base method
func (m *MockisListVolumesResponse_Reply) isListVolumesResponse_Reply() {
	m.ctrl.Call(m, "isListVolumesResponse_Reply")
}

// isListVolumesResponse_Reply indicates an expected call of isListVolumesResponse_Reply
func (mr *MockisListVolumesResponse_ReplyMockRecorder) isListVolumesResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListVolumesResponse_Reply", reflect.TypeOf((*MockisListVolumesResponse_Reply)(nil).isListVolumesResponse_Reply))
}

// MockisGetCapacityResponse_Reply is a mock of isGetCapacityResponse_Reply interface
type MockisGetCapacityResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisGetCapacityResponse_ReplyMockRecorder
}

// MockisGetCapacityResponse_ReplyMockRecorder is the mock recorder for MockisGetCapacityResponse_Reply
type MockisGetCapacityResponse_ReplyMockRecorder struct {
	mock *MockisGetCapacityResponse_Reply
}

// NewMockisGetCapacityResponse_Reply creates a new mock instance
func NewMockisGetCapacityResponse_Reply(ctrl *gomock.Controller) *MockisGetCapacityResponse_Reply {
	mock := &MockisGetCapacityResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisGetCapacityResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetCapacityResponse_Reply) EXPECT() *MockisGetCapacityResponse_ReplyMockRecorder {
	return m.recorder
}

// isGetCapacityResponse_Reply mocks base method
func (m *MockisGetCapacityResponse_Reply) isGetCapacityResponse_Reply() {
	m.ctrl.Call(m, "isGetCapacityResponse_Reply")
}

// isGetCapacityResponse_Reply indicates an expected call of isGetCapacityResponse_Reply
func (mr *MockisGetCapacityResponse_ReplyMockRecorder) isGetCapacityResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetCapacityResponse_Reply", reflect.TypeOf((*MockisGetCapacityResponse_Reply)(nil).isGetCapacityResponse_Reply))
}

// MockisControllerGetCapabilitiesResponse_Reply is a mock of isControllerGetCapabilitiesResponse_Reply interface
type MockisControllerGetCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisControllerGetCapabilitiesResponse_ReplyMockRecorder
}

// MockisControllerGetCapabilitiesResponse_ReplyMockRecorder is the mock recorder for MockisControllerGetCapabilitiesResponse_Reply
type MockisControllerGetCapabilitiesResponse_ReplyMockRecorder struct {
	mock *MockisControllerGetCapabilitiesResponse_Reply
}

// NewMockisControllerGetCapabilitiesResponse_Reply creates a new mock instance
func NewMockisControllerGetCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisControllerGetCapabilitiesResponse_Reply {
	mock := &MockisControllerGetCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisControllerGetCapabilitiesResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisControllerGetCapabilitiesResponse_Reply) EXPECT() *MockisControllerGetCapabilitiesResponse_ReplyMockRecorder {
	return m.recorder
}

// isControllerGetCapabilitiesResponse_Reply mocks base method
func (m *MockisControllerGetCapabilitiesResponse_Reply) isControllerGetCapabilitiesResponse_Reply() {
	m.ctrl.Call(m, "isControllerGetCapabilitiesResponse_Reply")
}

// isControllerGetCapabilitiesResponse_Reply indicates an expected call of isControllerGetCapabilitiesResponse_Reply
func (mr *MockisControllerGetCapabilitiesResponse_ReplyMockRecorder) isControllerGetCapabilitiesResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isControllerGetCapabilitiesResponse_Reply", reflect.TypeOf((*MockisControllerGetCapabilitiesResponse_Reply)(nil).isControllerGetCapabilitiesResponse_Reply))
}

// MockisControllerServiceCapability_Type is a mock of isControllerServiceCapability_Type interface
type MockisControllerServiceCapability_Type struct {
	ctrl     *gomock.Controller
	recorder *MockisControllerServiceCapability_TypeMockRecorder
}

// MockisControllerServiceCapability_TypeMockRecorder is the mock recorder for MockisControllerServiceCapability_Type
type MockisControllerServiceCapability_TypeMockRecorder struct {
	mock *MockisControllerServiceCapability_Type
}

// NewMockisControllerServiceCapability_Type creates a new mock instance
func NewMockisControllerServiceCapability_Type(ctrl *gomock.Controller) *MockisControllerServiceCapability_Type {
	mock := &MockisControllerServiceCapability_Type{ctrl: ctrl}
	mock.recorder = &MockisControllerServiceCapability_TypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisControllerServiceCapability_Type) EXPECT() *MockisControllerServiceCapability_TypeMockRecorder {
	return m.recorder
}

// isControllerServiceCapability_Type mocks base method
func (m *MockisControllerServiceCapability_Type) isControllerServiceCapability_Type() {
	m.ctrl.Call(m, "isControllerServiceCapability_Type")
}

// isControllerServiceCapability_Type indicates an expected call of isControllerServiceCapability_Type
func (mr *MockisControllerServiceCapability_TypeMockRecorder) isControllerServiceCapability_Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isControllerServiceCapability_Type", reflect.TypeOf((*MockisControllerServiceCapability_Type)(nil).isControllerServiceCapability_Type))
}

// MockisNodePublishVolumeResponse_Reply is a mock of isNodePublishVolumeResponse_Reply interface
type MockisNodePublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisNodePublishVolumeResponse_ReplyMockRecorder
}

// MockisNodePublishVolumeResponse_ReplyMockRecorder is the mock recorder for MockisNodePublishVolumeResponse_Reply
type MockisNodePublishVolumeResponse_ReplyMockRecorder struct {
	mock *MockisNodePublishVolumeResponse_Reply
}

// NewMockisNodePublishVolumeResponse_Reply creates a new mock instance
func NewMockisNodePublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisNodePublishVolumeResponse_Reply {
	mock := &MockisNodePublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisNodePublishVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNodePublishVolumeResponse_Reply) EXPECT() *MockisNodePublishVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isNodePublishVolumeResponse_Reply mocks base method
func (m *MockisNodePublishVolumeResponse_Reply) isNodePublishVolumeResponse_Reply() {
	m.ctrl.Call(m, "isNodePublishVolumeResponse_Reply")
}

// isNodePublishVolumeResponse_Reply indicates an expected call of isNodePublishVolumeResponse_Reply
func (mr *MockisNodePublishVolumeResponse_ReplyMockRecorder) isNodePublishVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNodePublishVolumeResponse_Reply", reflect.TypeOf((*MockisNodePublishVolumeResponse_Reply)(nil).isNodePublishVolumeResponse_Reply))
}

// MockisNodeUnpublishVolumeResponse_Reply is a mock of isNodeUnpublishVolumeResponse_Reply interface
type MockisNodeUnpublishVolumeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisNodeUnpublishVolumeResponse_ReplyMockRecorder
}

// MockisNodeUnpublishVolumeResponse_ReplyMockRecorder is the mock recorder for MockisNodeUnpublishVolumeResponse_Reply
type MockisNodeUnpublishVolumeResponse_ReplyMockRecorder struct {
	mock *MockisNodeUnpublishVolumeResponse_Reply
}

// NewMockisNodeUnpublishVolumeResponse_Reply creates a new mock instance
func NewMockisNodeUnpublishVolumeResponse_Reply(ctrl *gomock.Controller) *MockisNodeUnpublishVolumeResponse_Reply {
	mock := &MockisNodeUnpublishVolumeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisNodeUnpublishVolumeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNodeUnpublishVolumeResponse_Reply) EXPECT() *MockisNodeUnpublishVolumeResponse_ReplyMockRecorder {
	return m.recorder
}

// isNodeUnpublishVolumeResponse_Reply mocks base method
func (m *MockisNodeUnpublishVolumeResponse_Reply) isNodeUnpublishVolumeResponse_Reply() {
	m.ctrl.Call(m, "isNodeUnpublishVolumeResponse_Reply")
}

// isNodeUnpublishVolumeResponse_Reply indicates an expected call of isNodeUnpublishVolumeResponse_Reply
func (mr *MockisNodeUnpublishVolumeResponse_ReplyMockRecorder) isNodeUnpublishVolumeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNodeUnpublishVolumeResponse_Reply", reflect.TypeOf((*MockisNodeUnpublishVolumeResponse_Reply)(nil).isNodeUnpublishVolumeResponse_Reply))
}

// MockisGetNodeIDResponse_Reply is a mock of isGetNodeIDResponse_Reply interface
type MockisGetNodeIDResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisGetNodeIDResponse_ReplyMockRecorder
}

// MockisGetNodeIDResponse_ReplyMockRecorder is the mock recorder for MockisGetNodeIDResponse_Reply
type MockisGetNodeIDResponse_ReplyMockRecorder struct {
	mock *MockisGetNodeIDResponse_Reply
}

// NewMockisGetNodeIDResponse_Reply creates a new mock instance
func NewMockisGetNodeIDResponse_Reply(ctrl *gomock.Controller) *MockisGetNodeIDResponse_Reply {
	mock := &MockisGetNodeIDResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisGetNodeIDResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGetNodeIDResponse_Reply) EXPECT() *MockisGetNodeIDResponse_ReplyMockRecorder {
	return m.recorder
}

// isGetNodeIDResponse_Reply mocks base method
func (m *MockisGetNodeIDResponse_Reply) isGetNodeIDResponse_Reply() {
	m.ctrl.Call(m, "isGetNodeIDResponse_Reply")
}

// isGetNodeIDResponse_Reply indicates an expected call of isGetNodeIDResponse_Reply
func (mr *MockisGetNodeIDResponse_ReplyMockRecorder) isGetNodeIDResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetNodeIDResponse_Reply", reflect.TypeOf((*MockisGetNodeIDResponse_Reply)(nil).isGetNodeIDResponse_Reply))
}

// MockisProbeNodeResponse_Reply is a mock of isProbeNodeResponse_Reply interface
type MockisProbeNodeResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisProbeNodeResponse_ReplyMockRecorder
}

// MockisProbeNodeResponse_ReplyMockRecorder is the mock recorder for MockisProbeNodeResponse_Reply
type MockisProbeNodeResponse_ReplyMockRecorder struct {
	mock *MockisProbeNodeResponse_Reply
}

// NewMockisProbeNodeResponse_Reply creates a new mock instance
func NewMockisProbeNodeResponse_Reply(ctrl *gomock.Controller) *MockisProbeNodeResponse_Reply {
	mock := &MockisProbeNodeResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisProbeNodeResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProbeNodeResponse_Reply) EXPECT() *MockisProbeNodeResponse_ReplyMockRecorder {
	return m.recorder
}

// isProbeNodeResponse_Reply mocks base method
func (m *MockisProbeNodeResponse_Reply) isProbeNodeResponse_Reply() {
	m.ctrl.Call(m, "isProbeNodeResponse_Reply")
}

// isProbeNodeResponse_Reply indicates an expected call of isProbeNodeResponse_Reply
func (mr *MockisProbeNodeResponse_ReplyMockRecorder) isProbeNodeResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProbeNodeResponse_Reply", reflect.TypeOf((*MockisProbeNodeResponse_Reply)(nil).isProbeNodeResponse_Reply))
}

// MockisNodeGetCapabilitiesResponse_Reply is a mock of isNodeGetCapabilitiesResponse_Reply interface
type MockisNodeGetCapabilitiesResponse_Reply struct {
	ctrl     *gomock.Controller
	recorder *MockisNodeGetCapabilitiesResponse_ReplyMockRecorder
}

// MockisNodeGetCapabilitiesResponse_ReplyMockRecorder is the mock recorder for MockisNodeGetCapabilitiesResponse_Reply
type MockisNodeGetCapabilitiesResponse_ReplyMockRecorder struct {
	mock *MockisNodeGetCapabilitiesResponse_Reply
}

// NewMockisNodeGetCapabilitiesResponse_Reply creates a new mock instance
func NewMockisNodeGetCapabilitiesResponse_Reply(ctrl *gomock.Controller) *MockisNodeGetCapabilitiesResponse_Reply {
	mock := &MockisNodeGetCapabilitiesResponse_Reply{ctrl: ctrl}
	mock.recorder = &MockisNodeGetCapabilitiesResponse_ReplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNodeGetCapabilitiesResponse_Reply) EXPECT() *MockisNodeGetCapabilitiesResponse_ReplyMockRecorder {
	return m.recorder
}

// isNodeGetCapabilitiesResponse_Reply mocks base method
func (m *MockisNodeGetCapabilitiesResponse_Reply) isNodeGetCapabilitiesResponse_Reply() {
	m.ctrl.Call(m, "isNodeGetCapabilitiesResponse_Reply")
}

// isNodeGetCapabilitiesResponse_Reply indicates an expected call of isNodeGetCapabilitiesResponse_Reply
func (mr *MockisNodeGetCapabilitiesResponse_ReplyMockRecorder) isNodeGetCapabilitiesResponse_Reply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNodeGetCapabilitiesResponse_Reply", reflect.TypeOf((*MockisNodeGetCapabilitiesResponse_Reply)(nil).isNodeGetCapabilitiesResponse_Reply))
}

// MockisNodeServiceCapability_Type is a mock of isNodeServiceCapability_Type interface
type MockisNodeServiceCapability_Type struct {
	ctrl     *gomock.Controller
	recorder *MockisNodeServiceCapability_TypeMockRecorder
}

// MockisNodeServiceCapability_TypeMockRecorder is the mock recorder for MockisNodeServiceCapability_Type
type MockisNodeServiceCapability_TypeMockRecorder struct {
	mock *MockisNodeServiceCapability_Type
}

// NewMockisNodeServiceCapability_Type creates a new mock instance
func NewMockisNodeServiceCapability_Type(ctrl *gomock.Controller) *MockisNodeServiceCapability_Type {
	mock := &MockisNodeServiceCapability_Type{ctrl: ctrl}
	mock.recorder = &MockisNodeServiceCapability_TypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNodeServiceCapability_Type) EXPECT() *MockisNodeServiceCapability_TypeMockRecorder {
	return m.recorder
}

// isNodeServiceCapability_Type mocks base method
func (m *MockisNodeServiceCapability_Type) isNodeServiceCapability_Type() {
	m.ctrl.Call(m, "isNodeServiceCapability_Type")
}

// isNodeServiceCapability_Type indicates an expected call of isNodeServiceCapability_Type
func (mr *MockisNodeServiceCapability_TypeMockRecorder) isNodeServiceCapability_Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNodeServiceCapability_Type", reflect.TypeOf((*MockisNodeServiceCapability_Type)(nil).isNodeServiceCapability_Type))
}

// MockisError_Value is a mock of isError_Value interface
type MockisError_Value struct {
	ctrl     *gomock.Controller
	recorder *MockisError_ValueMockRecorder
}

// MockisError_ValueMockRecorder is the mock recorder for MockisError_Value
type MockisError_ValueMockRecorder struct {
	mock *MockisError_Value
}

// NewMockisError_Value creates a new mock instance
func NewMockisError_Value(ctrl *gomock.Controller) *MockisError_Value {
	mock := &MockisError_Value{ctrl: ctrl}
	mock.recorder = &MockisError_ValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisError_Value) EXPECT() *MockisError_ValueMockRecorder {
	return m.recorder
}

// isError_Value mocks base method
func (m *MockisError_Value) isError_Value() {
	m.ctrl.Call(m, "isError_Value")
}

// isError_Value indicates an expected call of isError_Value
func (mr *MockisError_ValueMockRecorder) isError_Value() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isError_Value", reflect.TypeOf((*MockisError_Value)(nil).isError_Value))
}

// MockIdentityClient is a mock of IdentityClient interface
type MockIdentityClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityClientMockRecorder
}

// MockIdentityClientMockRecorder is the mock recorder for MockIdentityClient
type MockIdentityClientMockRecorder struct {
	mock *MockIdentityClient
}

// NewMockIdentityClient creates a new mock instance
func NewMockIdentityClient(ctrl *gomock.Controller) *MockIdentityClient {
	mock := &MockIdentityClient{ctrl: ctrl}
	mock.recorder = &MockIdentityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityClient) EXPECT() *MockIdentityClientMockRecorder {
	return m.recorder
}

// GetSupportedVersions mocks base method
func (m *MockIdentityClient) GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSupportedVersions", varargs...)
	ret0, _ := ret[0].(*GetSupportedVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedVersions indicates an expected call of GetSupportedVersions
func (mr *MockIdentityClientMockRecorder) GetSupportedVersions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedVersions", reflect.TypeOf((*MockIdentityClient)(nil).GetSupportedVersions), varargs...)
}

// GetPluginInfo mocks base method
func (m *MockIdentityClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPluginInfo", varargs...)
	ret0, _ := ret[0].(*GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockIdentityClientMockRecorder) GetPluginInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockIdentityClient)(nil).GetPluginInfo), varargs...)
}

// MockIdentityServer is a mock of IdentityServer interface
type MockIdentityServer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServerMockRecorder
}

// MockIdentityServerMockRecorder is the mock recorder for MockIdentityServer
type MockIdentityServerMockRecorder struct {
	mock *MockIdentityServer
}

// NewMockIdentityServer creates a new mock instance
func NewMockIdentityServer(ctrl *gomock.Controller) *MockIdentityServer {
	mock := &MockIdentityServer{ctrl: ctrl}
	mock.recorder = &MockIdentityServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityServer) EXPECT() *MockIdentityServerMockRecorder {
	return m.recorder
}

// GetSupportedVersions mocks base method
func (m *MockIdentityServer) GetSupportedVersions(arg0 context.Context, arg1 *GetSupportedVersionsRequest) (*GetSupportedVersionsResponse, error) {
	ret := m.ctrl.Call(m, "GetSupportedVersions", arg0, arg1)
	ret0, _ := ret[0].(*GetSupportedVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedVersions indicates an expected call of GetSupportedVersions
func (mr *MockIdentityServerMockRecorder) GetSupportedVersions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedVersions", reflect.TypeOf((*MockIdentityServer)(nil).GetSupportedVersions), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockIdentityServer) GetPluginInfo(arg0 context.Context, arg1 *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockIdentityServerMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockIdentityServer)(nil).GetPluginInfo), arg0, arg1)
}

// MockControllerClient is a mock of ControllerClient interface
type MockControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockControllerClientMockRecorder
}

// MockControllerClientMockRecorder is the mock recorder for MockControllerClient
type MockControllerClientMockRecorder struct {
	mock *MockControllerClient
}

// NewMockControllerClient creates a new mock instance
func NewMockControllerClient(ctrl *gomock.Controller) *MockControllerClient {
	mock := &MockControllerClient{ctrl: ctrl}
	mock.recorder = &MockControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerClient) EXPECT() *MockControllerClientMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockControllerClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVolume", varargs...)
	ret0, _ := ret[0].(*CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockControllerClientMockRecorder) CreateVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockControllerClient)(nil).CreateVolume), varargs...)
}

// DeleteVolume mocks base method
func (m *MockControllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVolume", varargs...)
	ret0, _ := ret[0].(*DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockControllerClientMockRecorder) DeleteVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockControllerClient)(nil).DeleteVolume), varargs...)
}

// ControllerPublishVolume mocks base method
func (m *MockControllerClient) ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest, opts ...grpc.CallOption) (*ControllerPublishVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllerPublishVolume", varargs...)
	ret0, _ := ret[0].(*ControllerPublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerPublishVolume indicates an expected call of ControllerPublishVolume
func (mr *MockControllerClientMockRecorder) ControllerPublishVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerPublishVolume", reflect.TypeOf((*MockControllerClient)(nil).ControllerPublishVolume), varargs...)
}

// ControllerUnpublishVolume mocks base method
func (m *MockControllerClient) ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest, opts ...grpc.CallOption) (*ControllerUnpublishVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllerUnpublishVolume", varargs...)
	ret0, _ := ret[0].(*ControllerUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerUnpublishVolume indicates an expected call of ControllerUnpublishVolume
func (mr *MockControllerClientMockRecorder) ControllerUnpublishVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerUnpublishVolume", reflect.TypeOf((*MockControllerClient)(nil).ControllerUnpublishVolume), varargs...)
}

// ValidateVolumeCapabilities mocks base method
func (m *MockControllerClient) ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest, opts ...grpc.CallOption) (*ValidateVolumeCapabilitiesResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateVolumeCapabilities", varargs...)
	ret0, _ := ret[0].(*ValidateVolumeCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeCapabilities indicates an expected call of ValidateVolumeCapabilities
func (mr *MockControllerClientMockRecorder) ValidateVolumeCapabilities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeCapabilities", reflect.TypeOf((*MockControllerClient)(nil).ValidateVolumeCapabilities), varargs...)
}

// ListVolumes mocks base method
func (m *MockControllerClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVolumes", varargs...)
	ret0, _ := ret[0].(*ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockControllerClientMockRecorder) ListVolumes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockControllerClient)(nil).ListVolumes), varargs...)
}

// GetCapacity mocks base method
func (m *MockControllerClient) GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCapacity", varargs...)
	ret0, _ := ret[0].(*GetCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockControllerClientMockRecorder) GetCapacity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockControllerClient)(nil).GetCapacity), varargs...)
}

// ControllerGetCapabilities mocks base method
func (m *MockControllerClient) ControllerGetCapabilities(ctx context.Context, in *ControllerGetCapabilitiesRequest, opts ...grpc.CallOption) (*ControllerGetCapabilitiesResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControllerGetCapabilities", varargs...)
	ret0, _ := ret[0].(*ControllerGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerGetCapabilities indicates an expected call of ControllerGetCapabilities
func (mr *MockControllerClientMockRecorder) ControllerGetCapabilities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerGetCapabilities", reflect.TypeOf((*MockControllerClient)(nil).ControllerGetCapabilities), varargs...)
}

// MockControllerServer is a mock of ControllerServer interface
type MockControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServerMockRecorder
}

// MockControllerServerMockRecorder is the mock recorder for MockControllerServer
type MockControllerServerMockRecorder struct {
	mock *MockControllerServer
}

// NewMockControllerServer creates a new mock instance
func NewMockControllerServer(ctrl *gomock.Controller) *MockControllerServer {
	mock := &MockControllerServer{ctrl: ctrl}
	mock.recorder = &MockControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerServer) EXPECT() *MockControllerServerMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockControllerServer) CreateVolume(arg0 context.Context, arg1 *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockControllerServerMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockControllerServer)(nil).CreateVolume), arg0, arg1)
}

// DeleteVolume mocks base method
func (m *MockControllerServer) DeleteVolume(arg0 context.Context, arg1 *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(*DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockControllerServerMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockControllerServer)(nil).DeleteVolume), arg0, arg1)
}

// ControllerPublishVolume mocks base method
func (m *MockControllerServer) ControllerPublishVolume(arg0 context.Context, arg1 *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error) {
	ret := m.ctrl.Call(m, "ControllerPublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*ControllerPublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerPublishVolume indicates an expected call of ControllerPublishVolume
func (mr *MockControllerServerMockRecorder) ControllerPublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerPublishVolume", reflect.TypeOf((*MockControllerServer)(nil).ControllerPublishVolume), arg0, arg1)
}

// ControllerUnpublishVolume mocks base method
func (m *MockControllerServer) ControllerUnpublishVolume(arg0 context.Context, arg1 *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error) {
	ret := m.ctrl.Call(m, "ControllerUnpublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*ControllerUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerUnpublishVolume indicates an expected call of ControllerUnpublishVolume
func (mr *MockControllerServerMockRecorder) ControllerUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerUnpublishVolume", reflect.TypeOf((*MockControllerServer)(nil).ControllerUnpublishVolume), arg0, arg1)
}

// ValidateVolumeCapabilities mocks base method
func (m *MockControllerServer) ValidateVolumeCapabilities(arg0 context.Context, arg1 *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error) {
	ret := m.ctrl.Call(m, "ValidateVolumeCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*ValidateVolumeCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeCapabilities indicates an expected call of ValidateVolumeCapabilities
func (mr *MockControllerServerMockRecorder) ValidateVolumeCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeCapabilities", reflect.TypeOf((*MockControllerServer)(nil).ValidateVolumeCapabilities), arg0, arg1)
}

// ListVolumes mocks base method
func (m *MockControllerServer) ListVolumes(arg0 context.Context, arg1 *ListVolumesRequest) (*ListVolumesResponse, error) {
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].(*ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockControllerServerMockRecorder) ListVolumes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockControllerServer)(nil).ListVolumes), arg0, arg1)
}

// GetCapacity mocks base method
func (m *MockControllerServer) GetCapacity(arg0 context.Context, arg1 *GetCapacityRequest) (*GetCapacityResponse, error) {
	ret := m.ctrl.Call(m, "GetCapacity", arg0, arg1)
	ret0, _ := ret[0].(*GetCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockControllerServerMockRecorder) GetCapacity(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockControllerServer)(nil).GetCapacity), arg0, arg1)
}

// ControllerGetCapabilities mocks base method
func (m *MockControllerServer) ControllerGetCapabilities(arg0 context.Context, arg1 *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error) {
	ret := m.ctrl.Call(m, "ControllerGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*ControllerGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerGetCapabilities indicates an expected call of ControllerGetCapabilities
func (mr *MockControllerServerMockRecorder) ControllerGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerGetCapabilities", reflect.TypeOf((*MockControllerServer)(nil).ControllerGetCapabilities), arg0, arg1)
}

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// NodePublishVolume mocks base method
func (m *MockNodeClient) NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest, opts ...grpc.CallOption) (*NodePublishVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodePublishVolume", varargs...)
	ret0, _ := ret[0].(*NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodePublishVolume indicates an expected call of NodePublishVolume
func (mr *MockNodeClientMockRecorder) NodePublishVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePublishVolume", reflect.TypeOf((*MockNodeClient)(nil).NodePublishVolume), varargs...)
}

// NodeUnpublishVolume mocks base method
func (m *MockNodeClient) NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest, opts ...grpc.CallOption) (*NodeUnpublishVolumeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeUnpublishVolume", varargs...)
	ret0, _ := ret[0].(*NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnpublishVolume indicates an expected call of NodeUnpublishVolume
func (mr *MockNodeClientMockRecorder) NodeUnpublishVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnpublishVolume", reflect.TypeOf((*MockNodeClient)(nil).NodeUnpublishVolume), varargs...)
}

// GetNodeID mocks base method
func (m *MockNodeClient) GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeID", varargs...)
	ret0, _ := ret[0].(*GetNodeIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeID indicates an expected call of GetNodeID
func (mr *MockNodeClientMockRecorder) GetNodeID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeID", reflect.TypeOf((*MockNodeClient)(nil).GetNodeID), varargs...)
}

// ProbeNode mocks base method
func (m *MockNodeClient) ProbeNode(ctx context.Context, in *ProbeNodeRequest, opts ...grpc.CallOption) (*ProbeNodeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProbeNode", varargs...)
	ret0, _ := ret[0].(*ProbeNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProbeNode indicates an expected call of ProbeNode
func (mr *MockNodeClientMockRecorder) ProbeNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbeNode", reflect.TypeOf((*MockNodeClient)(nil).ProbeNode), varargs...)
}

// NodeGetCapabilities mocks base method
func (m *MockNodeClient) NodeGetCapabilities(ctx context.Context, in *NodeGetCapabilitiesRequest, opts ...grpc.CallOption) (*NodeGetCapabilitiesResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeGetCapabilities", varargs...)
	ret0, _ := ret[0].(*NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetCapabilities indicates an expected call of NodeGetCapabilities
func (mr *MockNodeClientMockRecorder) NodeGetCapabilities(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetCapabilities", reflect.TypeOf((*MockNodeClient)(nil).NodeGetCapabilities), varargs...)
}

// MockNodeServer is a mock of NodeServer interface
type MockNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServerMockRecorder
}

// MockNodeServerMockRecorder is the mock recorder for MockNodeServer
type MockNodeServerMockRecorder struct {
	mock *MockNodeServer
}

// NewMockNodeServer creates a new mock instance
func NewMockNodeServer(ctrl *gomock.Controller) *MockNodeServer {
	mock := &MockNodeServer{ctrl: ctrl}
	mock.recorder = &MockNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeServer) EXPECT() *MockNodeServerMockRecorder {
	return m.recorder
}

// NodePublishVolume mocks base method
func (m *MockNodeServer) NodePublishVolume(arg0 context.Context, arg1 *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error) {
	ret := m.ctrl.Call(m, "NodePublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodePublishVolume indicates an expected call of NodePublishVolume
func (mr *MockNodeServerMockRecorder) NodePublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePublishVolume", reflect.TypeOf((*MockNodeServer)(nil).NodePublishVolume), arg0, arg1)
}

// NodeUnpublishVolume mocks base method
func (m *MockNodeServer) NodeUnpublishVolume(arg0 context.Context, arg1 *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error) {
	ret := m.ctrl.Call(m, "NodeUnpublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnpublishVolume indicates an expected call of NodeUnpublishVolume
func (mr *MockNodeServerMockRecorder) NodeUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnpublishVolume", reflect.TypeOf((*MockNodeServer)(nil).NodeUnpublishVolume), arg0, arg1)
}

// GetNodeID mocks base method
func (m *MockNodeServer) GetNodeID(arg0 context.Context, arg1 *GetNodeIDRequest) (*GetNodeIDResponse, error) {
	ret := m.ctrl.Call(m, "GetNodeID", arg0, arg1)
	ret0, _ := ret[0].(*GetNodeIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeID indicates an expected call of GetNodeID
func (mr *MockNodeServerMockRecorder) GetNodeID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeID", reflect.TypeOf((*MockNodeServer)(nil).GetNodeID), arg0, arg1)
}

// ProbeNode mocks base method
func (m *MockNodeServer) ProbeNode(arg0 context.Context, arg1 *ProbeNodeRequest) (*ProbeNodeResponse, error) {
	ret := m.ctrl.Call(m, "ProbeNode", arg0, arg1)
	ret0, _ := ret[0].(*ProbeNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProbeNode indicates an expected call of ProbeNode
func (mr *MockNodeServerMockRecorder) ProbeNode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProbeNode", reflect.TypeOf((*MockNodeServer)(nil).ProbeNode), arg0, arg1)
}

// NodeGetCapabilities mocks base method
func (m *MockNodeServer) NodeGetCapabilities(arg0 context.Context, arg1 *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error) {
	ret := m.ctrl.Call(m, "NodeGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetCapabilities indicates an expected call of NodeGetCapabilities
func (mr *MockNodeServerMockRecorder) NodeGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetCapabilities", reflect.TypeOf((*MockNodeServer)(nil).NodeGetCapabilities), arg0, arg1)
}
