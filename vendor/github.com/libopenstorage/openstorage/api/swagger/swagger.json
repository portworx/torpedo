{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "OpenStorage is a clustered implementation of the Open Storage specification and relies on the OCI runtime.\nIt allows you to run stateful services in containers in a multi-host clustered environment.\nThis document represents the API documentaton of Openstorage, for the GO client please visit:\nhttps://github.com/libopenstorage/openstorage",
    "title": "OSD API.",
    "contact": {
      "url": "https://github.com/libopenstorage/openstorage"
    },
    "license": {
      "name": "APACHE2",
      "url": "https://opensource.org/licenses/Apache-2.0"
    },
    "version": "2.0.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/cluster/alerts/{resource}": {
      "get": {
        "description": "This will return a list of alerts for the requested resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "enumerateAlerts",
        "parameters": [
          {
            "type": "integer",
            "description": "Resourcetype to get alerts with.\n0: All\n1: Volume\n2: Node\n3: Cluster\n4: Drive\n",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts object",
            "schema": {
              "$ref": "#/definitions/Alerts"
            }
          }
        }
      }
    },
    "/cluster/alerts/{resource}/{id}": {
      "delete": {
        "description": "This delete clear alert {id} with resourcetype {resource}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "deleteAlert",
        "parameters": [
          {
            "type": "integer",
            "description": "resourcetype to get alerts with.\n0: All\n1: Volume\n2: Node\n3: Cluster\n4: Drive\n",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "id to get alerts with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts object",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/enumerate": {
      "get": {
        "description": "This will return the entire cluster object and it's nodes.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "Lists cluster Nodes.",
        "operationId": "enumerateCluster",
        "responses": {
          "200": {
            "description": "current cluster state",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cluster"
              }
            }
          }
        }
      }
    },
    "/cluster/getnodeidfromip/{idip}": {
      "get": {
        "description": "this will return the node ID for the given node IP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "GetNodeIdFromIp",
        "parameters": [
          {
            "type": "string",
            "description": "cluster node ip or id",
            "name": "idip",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "cluster node ID",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/inspect/{id}": {
      "get": {
        "description": "This will return the requested node object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "Inspect cluster Nodes.",
        "operationId": "inspectNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "a node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        }
      }
    },
    "/cluster/nodehealth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "This will return node health.",
        "operationId": "nodeHealth",
        "responses": {
          "200": {
            "description": "node health of responding node.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/nodestatus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "This will return the node status .",
        "operationId": "nodeStatus",
        "responses": {
          "200": {
            "description": "node status of responding node.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/objectstore": {
      "get": {
        "description": "This will list current objectstores",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Lists Objectstore",
        "operationId": "objectStoreInspect",
        "parameters": [
          {
            "type": "string",
            "description": "ID of objectstore to inspect",
            "name": "ID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ObjectstoreInfo"
            }
          }
        }
      },
      "put": {
        "description": "This will enable/disable object store functionality.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Updates object store",
        "operationId": "objectStoreUpdate",
        "parameters": [
          {
            "type": "boolean",
            "description": "enable/disable flag for object store",
            "name": "enable",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ID of objectstore to update",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      },
      "post": {
        "description": "This creates the volumes required to run the object store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Create an Object store",
        "operationId": "objectStoreCreate",
        "parameters": [
          {
            "type": "string",
            "description": "volume on which object store to run",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ObjectstoreInfo"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete object store on node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Delete object store",
        "operationId": "objectStoreDelete",
        "parameters": [
          {
            "type": "string",
            "description": "ID of objectstore to delete",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/peerstatus": {
      "get": {
        "description": "This will return the peer node status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "operationId": "peerStatus",
        "parameters": [
          {
            "type": "integer",
            "description": "id of the node we want to check.",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "node status of requested node",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/schedpolicy": {
      "get": {
        "description": "This will list all of schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "List schedule policies",
        "operationId": "schedPolicyEnumerate",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchedPolicy"
              }
            }
          }
        }
      },
      "put": {
        "description": "This will update specified schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Update schedule policy",
        "operationId": "schedPolicyUpdate",
        "parameters": [
          {
            "description": "policy name and schedule to update",
            "name": "schedpolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      },
      "post": {
        "description": "This creates scheudle policy which will allow user to create snapshot schedule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Create schedule policy",
        "operationId": "schedPolicyCreate",
        "parameters": [
          {
            "description": "policy name and schedule to create",
            "name": "schedpolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/schedpolicy/{name}": {
      "get": {
        "description": "This will return the requested schedule policy details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Get policy details",
        "operationId": "schedPolicyGet",
        "parameters": [
          {
            "type": "string",
            "description": "Retrive details of given policy name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete specified schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Delete schedule policy",
        "operationId": "shedPolicyDelete",
        "parameters": [
          {
            "type": "string",
            "description": "policy name and schedule to delete",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/": {
      "get": {
        "description": "This will return the value/data for given secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Get the seceret value/data for given key",
        "operationId": "getSecret",
        "parameters": [
          {
            "type": "string",
            "description": "secret id/key whose value to be retrived",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns the value/data for given key",
            "schema": {
              "$ref": "#/definitions/GetSecretResponse"
            }
          }
        }
      },
      "put": {
        "description": "This will set secrets data/value against given key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Set Secret Value",
        "operationId": "setSeceret",
        "parameters": [
          {
            "type": "string",
            "description": "key/id for secrets",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "description": "value/data for secrets",
            "name": "secretvalue",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetSecretRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/defaultsecretkey": {
      "get": {
        "description": "This will return the cluster wide secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Get cluster secret key",
        "operationId": "getDefaultSecretKey",
        "responses": {
          "200": {
            "description": "returns cluster wide secret key",
            "schema": {
              "$ref": "#/definitions/GetSecretResponse"
            }
          }
        }
      },
      "put": {
        "description": "This will set the cluster wide default secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Set cluster secret key",
        "operationId": "setDefaultSecretKey",
        "parameters": [
          {
            "description": "default secret key",
            "name": "defaultkey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DefaultSecretKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/login": {
      "post": {
        "description": "This will initiate session with secret store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Start session with secret store",
        "operationId": "secretsLogin",
        "parameters": [
          {
            "description": "config for login to secret store",
            "name": "SecretLoginConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/verify": {
      "get": {
        "description": "This will return error if session is not estabilished with secrets store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Validates session with secret store",
        "operationId": "secretLoginCheck",
        "responses": {
          "200": {
            "description": "validates session with secret store"
          }
        }
      }
    },
    "/cluster/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "this will return the cluster status.",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "cluster status",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/versions": {
      "get": {
        "description": "Lists API Versions supported by this cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "enumerateVersions",
        "responses": {
          "200": {
            "description": "Supported versions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/cluster/{id}": {
      "put": {
        "description": "This will shutdown a node (Not Implemented)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "shutdownNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "shutdown success",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete a node from the cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "deleteNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "forceRemove node",
            "name": "forceRemove",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "delete node success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/config/cluster": {
      "get": {
        "description": "This will return the requested cluster configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get cluster configuration.",
        "operationId": "getClusterConfig",
        "responses": {
          "200": {
            "description": "a cluster config",
            "schema": {
              "$ref": "#/definitions/ClusterConfig"
            }
          }
        }
      },
      "post": {
        "description": "This will set the requested cluster configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Set cluster configuration.",
        "operationId": "setClusterConfig",
        "parameters": [
          {
            "description": "cluster config json",
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/config/enumerate": {
      "get": {
        "description": "This will return the node configuration for all nodes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get configuration for all nodes.",
        "operationId": "enumerate",
        "responses": {
          "200": {
            "description": "node config enumeration",
            "schema": {
              "$ref": "#/definitions/NodesConfig"
            }
          }
        }
      }
    },
    "/config/node": {
      "post": {
        "description": "This will set the requested node configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Set node configuration.",
        "operationId": "setNodeConfig",
        "parameters": [
          {
            "description": "node config json",
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/config/node/{id}": {
      "get": {
        "description": "This will return the requested node configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get node configuration.",
        "operationId": "getNodeConfig",
        "parameters": [
          {
            "type": "string",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "a node",
            "schema": {
              "$ref": "#/definitions/NodeConfig"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete the requested node configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Delete node configuration.",
        "operationId": "deleteNodeConfig",
        "parameters": [
          {
            "type": "string",
            "description": "id to reference node",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/osd-snapshots": {
      "get": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "summary": "Enumerate snapshots.",
        "operationId": "enumerateSnaps",
        "parameters": [
          {
            "type": "string",
            "description": "Volume name that maps to this snap",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated volume labels\nexample: {\"label1\",\"label2\"}\n",
            "name": "VolumeLabels",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Comma separated snap labels\nexample: {\"label1\",\"label2\"}\n",
            "name": "SnapLabels",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Snap UUID",
            "name": "uuid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "an array of snapshots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Volume"
              }
            }
          }
        }
      },
      "post": {
        "description": "Take a snapshot of volume in SnapCreateRequest",
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "operationId": "createSnap",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "description": "spec to create snap with",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an array of volumes",
            "schema": {
              "$ref": "#/definitions/SnapCreateResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/SnapCreateResponse"
            }
          }
        }
      }
    },
    "/osd-snapshots/groupsnap": {
      "post": {
        "description": "Take a snapshot of volumegroup",
        "produces": [
          "application/json"
        ],
        "tags": [
          "volumegroup"
        ],
        "operationId": "snapVolumeGroup",
        "parameters": [
          {
            "description": "GroupSnap create request",
            "name": "groupspec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "group snap create response",
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateResponse"
            }
          }
        }
      }
    },
    "/osd-snapshots/restore/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "summary": "Restore snapshot with specified id.",
        "operationId": "restoreSnap",
        "parameters": [
          {
            "type": "integer",
            "description": "id of snapshot to restore",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Restored volume",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes": {
      "get": {
        "description": "Enumerate all volumes",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "operationId": "enumerateVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "User specified volume name (Case Sensitive)",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated name value pairs\nexample: {\"label1\",\"label2\"}\n",
            "name": "Label",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Comma separated name value pairs\nexample: {\"label1\",\"label2\"}\n",
            "name": "ConfigLabel",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Volume UUID",
            "name": "VolumeID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "an array of volumes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Volume"
              }
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Creates a single volume with given spec.",
        "operationId": "createVolume",
        "parameters": [
          {
            "description": "spec to create volume with",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "volume create response",
            "schema": {
              "$ref": "#/definitions/VolumeCreateResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeCreateResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/catalog/{id}": {
      "get": {
        "description": "Path is optional and default the behaviour is a catalog on the root of the volume.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Catalog lists the files and folders on volume with specified id.",
        "operationId": "catalogVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional path inside mount to catalog.",
            "name": "subfolder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Folder depth we wish to return, default is all.",
            "name": "depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "volume catalog response",
            "schema": {
              "$ref": "#/definitions/CatalogResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/quiesce/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Quiesce volume with specified id.",
        "operationId": "quiesceVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/requests/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get Requests for volume with specified id.",
        "operationId": "requestsVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/ActiveRequests"
            }
          }
        }
      }
    },
    "/osd-volumes/stats/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get stats for volume with specified id.",
        "operationId": "statsVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          }
        }
      }
    },
    "/osd-volumes/unquiesce/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Unquiesce volume with specified id.",
        "operationId": "unquiesceVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/usedsize/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get Used size of volume with specified id.",
        "operationId": "usedSizeVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response"
          }
        }
      }
    },
    "/osd-volumes/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Lists API versions supported by this volumeDriver.",
        "operationId": "listVersions",
        "responses": {
          "200": {
            "description": "Supported versions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/osd-volumes/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Inspect volume with specified id.",
        "operationId": "inspectVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume get response",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Updates a single volume with given spec.",
        "operationId": "setVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "spec to set volume with",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeSetResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeSetResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Delete volume with specified id.",
        "operationId": "deleteVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AWSConfig": {
      "description": "AWS configuration parameters struct",
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string",
          "x-go-name": "AccessKeyId"
        },
        "aws_cmk": {
          "type": "string",
          "x-go-name": "Cmk"
        },
        "aws_region": {
          "type": "string",
          "x-go-name": "Region"
        },
        "aws_secret_access_key": {
          "type": "string",
          "x-go-name": "SecretAccessKey"
        },
        "aws_secret_token_key": {
          "type": "string",
          "x-go-name": "SecretTokenKey"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "ActiveRequest": {
      "description": "Active Request",
      "type": "object",
      "properties": {
        "ReqestKV": {}
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ActiveRequests": {
      "description": "Active Requests",
      "type": "object",
      "properties": {
        "ActiveRequest": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActiveRequest"
          }
        },
        "RequestCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Alert": {
      "description": "Alert is a structure that represents an alert object",
      "type": "object",
      "properties": {
        "alert_type": {
          "description": "AlertType user defined alert type",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlertType"
        },
        "cleared": {
          "description": "Cleared Flag",
          "type": "boolean",
          "x-go-name": "Cleared"
        },
        "count": {
          "description": "Count of such alerts raised so far.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "first_seen": {
          "$ref": "#/definitions/Timestamp"
        },
        "id": {
          "description": "Id for Alert",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "message": {
          "description": "Message describing the Alert",
          "type": "string",
          "x-go-name": "Message"
        },
        "resource": {
          "$ref": "#/definitions/ResourceType"
        },
        "resource_id": {
          "description": "ResourceId where Alert occured",
          "type": "string",
          "x-go-name": "ResourceId"
        },
        "severity": {
          "$ref": "#/definitions/SeverityType"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "ttl": {
          "description": "Time-to-live in seconds for this Alert",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Ttl"
        },
        "unique_tag": {
          "description": "UniqueTag helps identify a unique alert for a given resouce",
          "type": "string",
          "x-go-name": "UniqueTag"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "AlertActionType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Alerts": {
      "description": "Alerts is an array of Alert objects",
      "type": "object",
      "properties": {
        "alert": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alert"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "AttachState": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "LastModified": {
          "$ref": "#/definitions/Timestamp"
        },
        "children": {
          "description": "Children",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Catalog"
          },
          "x-go-name": "Children"
        },
        "name": {
          "description": "Name of the Directory/File",
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "description": "Full Path of the Directory/File",
          "type": "string",
          "x-go-name": "Path"
        },
        "size": {
          "description": "File or Directory Size",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "type": {
          "description": "Type Directory or File",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CatalogResponse": {
      "type": "object",
      "properties": {
        "report": {
          "$ref": "#/definitions/Report"
        },
        "root": {
          "$ref": "#/definitions/Catalog"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCatalogRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud",
          "type": "string"
        },
        "ID": {
          "description": "ID is Backup ID in the cloud",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCatalogResponse": {
      "type": "object",
      "properties": {
        "Contents": {
          "description": "Contents is listing of backup contents",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used for backup",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean"
        },
        "VolumeID": {
          "description": "VolumeID of the volume for which cloudbackup is requested",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupDeleteAllRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupDeleteRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "Force": {
          "description": "Force Delete cloudbackup even if there are dependencies",
          "type": "boolean"
        },
        "ID": {
          "description": "ID is the ID of the cloud backup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupEnumerateRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupEnumerateResponse": {
      "type": "object",
      "properties": {
        "Backups": {
          "description": "Backups is list of backups in cloud for given volume/cluster/s",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudBackupInfo"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGenericRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGroupCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used for backup",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates backup request for a volumegroup with this group id",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates backup request for a volume group with these labels\nIf both GroupID and Labels are specified, volumes matching both\ncriteria are backed up to cloud",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGroupSchedCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for which cloudbackup schedule is\nbeing created",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for which this group cloudsnap schedule is\nbeing created. If this is provided GroupId is not needed and vice-versa.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequency of backup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryItem": {
      "type": "object",
      "properties": {
        "SrcVolumeID": {
          "description": "SrcVolumeID is volume ID which was backedup",
          "type": "string"
        },
        "Status": {
          "description": "Status indicates whether backup was completed/failed",
          "type": "string"
        },
        "Timestamp": {
          "description": "TimeStamp is the time at which either backup completed/failed",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryRequest": {
      "type": "object",
      "properties": {
        "SrcVolumeID": {
          "description": "SrcVolumeID is volumeID for which history of backup/restore\nis being requested",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryResponse": {
      "type": "object",
      "properties": {
        "HistoryList": {
          "description": "HistoryList is list of past backup/restores in the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudBackupHistoryItem"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupInfo": {
      "type": "object",
      "properties": {
        "ID": {
          "description": "ID is the ID of the cloud backup",
          "type": "string"
        },
        "Metadata": {
          "description": "Metadata associated with the backup",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is Source volumeID of the backup",
          "type": "string"
        },
        "SrcVolumeName": {
          "description": "SrcvolumeName is name of the sourceVolume of the backup",
          "type": "string"
        },
        "Status": {
          "description": "Status indicates the status of the backup",
          "type": "string"
        },
        "Timestamp": {
          "description": "Timestamp is the timestamp at which the source volume\nwas backed up to cloud",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupOpType": {
      "type": "string",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupRestoreRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential to be used for restore operation",
          "type": "string"
        },
        "ID": {
          "description": "ID is the backup ID being restored",
          "type": "string"
        },
        "NodeID": {
          "description": "NodeID is the optional NodeID for provisioning restore\nvolume (ResoreVolumeName should not be specified)",
          "type": "string"
        },
        "RestoreVolumeName": {
          "description": "RestoreVolumeName is optional volume Name of the new volume to be created\nin the cluster for restoring the cloudbackup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupRestoreResponse": {
      "type": "object",
      "properties": {
        "RestoreVolumeID": {
          "description": "RestoreVolumeID is the volumeID to which the backup is being restored",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the cloud credential used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for this cloudbackup schedule",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for this cloudsnap schedule",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequence of backup",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is the schedule's source volume",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedCreateResponse": {
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID is the UUID of the newly created schedule",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedDeleteRequest": {
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID is UUID of the schedule to be deleted",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedEnumerateResponse": {
      "type": "object",
      "properties": {
        "Schedules": {
          "description": "Schedule is map of schedule uuid to scheduleInfo",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CloudBackupScheduleInfo"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupScheduleInfo": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the cloud credential used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for this cloudbackup schedule",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for this cloudsnap schedule",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequence of backup",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is the schedule's source volume",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStateChangeRequest": {
      "type": "object",
      "properties": {
        "RequestedState": {
          "description": "RequestedState is desired state of the op\ncan be pause/resume/stop",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is volume ID on which backup/restore\nstate change is being requested",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatus": {
      "type": "object",
      "properties": {
        "BytesDone": {
          "description": "BytesDone indicates total Bytes uploaded/downloaded",
          "type": "integer",
          "format": "uint64"
        },
        "CompletedTime": {
          "description": "CompletedTime indicates Op's completed time",
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "description": "ID is the ID for the operation",
          "type": "string"
        },
        "NodeID": {
          "description": "NodeID is the ID of the node where this Op is active",
          "type": "string"
        },
        "OpType": {
          "$ref": "#/definitions/CloudBackupOpType"
        },
        "StartTime": {
          "description": "StartTime indicates Op's start time",
          "type": "string",
          "format": "date-time"
        },
        "Status": {
          "$ref": "#/definitions/CloudBackupStatusType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusRequest": {
      "type": "object",
      "properties": {
        "Local": {
          "description": "Local indicates if only those backups/restores that are\nactive on current node must be returned",
          "type": "boolean"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID optional volumeID to list status of backup/restore",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusResponse": {
      "type": "object",
      "properties": {
        "Statuses": {
          "description": "statuses is list of currently active/failed/done backup/restores",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CloudBackupStatus"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusType": {
      "type": "string",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrate": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateCancelRequest": {
      "description": "Request to stop a cloud migration",
      "type": "object",
      "properties": {
        "task_id": {
          "description": "The id of the task to cancel",
          "type": "string",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateInfo": {
      "type": "object",
      "properties": {
        "cloudbackup_id": {
          "description": "ID of the cloudbackup used for the migration",
          "type": "string",
          "x-go-name": "CloudbackupId"
        },
        "cluster_id": {
          "description": "ID of the cluster where the volume is being migrated",
          "type": "string",
          "x-go-name": "ClusterId"
        },
        "current_stage": {
          "$ref": "#/definitions/CloudMigrate_Stage"
        },
        "last_success": {
          "$ref": "#/definitions/Timestamp"
        },
        "last_update": {
          "$ref": "#/definitions/Timestamp"
        },
        "local_volume_id": {
          "description": "ID of the volume on the local cluster",
          "type": "string",
          "x-go-name": "LocalVolumeId"
        },
        "local_volume_name": {
          "description": "Name of the volume on the local cluster",
          "type": "string",
          "x-go-name": "LocalVolumeName"
        },
        "remote_volume_id": {
          "description": "ID of the volume on the remote cluster",
          "type": "string",
          "x-go-name": "RemoteVolumeId"
        },
        "status": {
          "$ref": "#/definitions/CloudMigrate_Status"
        },
        "task_id": {
          "description": "Task id associated with this migration",
          "type": "string",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateInfoList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudMigrateInfo"
          },
          "x-go-name": "List"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateStartRequest": {
      "description": "Request to start a cloud migration",
      "type": "object",
      "properties": {
        "cluster_id": {
          "description": "ID of the cluster to which volumes are to be migrated",
          "type": "string",
          "x-go-name": "ClusterId"
        },
        "operation": {
          "$ref": "#/definitions/CloudMigrate_OperationType"
        },
        "target_id": {
          "description": "Depending on the operation type this can be a VolumeID or VolumeGroupID",
          "type": "string",
          "x-go-name": "TargetId"
        },
        "task_id": {
          "description": "(Optional) Unique TaskId assocaiated with this migration. If not provided one will\nbe generated and returned in the response",
          "type": "string",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateStartResponse": {
      "description": "Response to start a cloud migration",
      "type": "object",
      "properties": {
        "task_id": {
          "description": "TaskId assocaiated with the migration that was started",
          "type": "string",
          "x-go-name": "TaskId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrateStatusResponse": {
      "description": "Response with a status of the cloud migration operations",
      "type": "object",
      "properties": {
        "info": {
          "description": "Map of cluster id to the status of volumes being migrated",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CloudMigrateInfoList"
          },
          "x-go-name": "Info"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrate_OperationType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrate_Stage": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudMigrate_Status": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Cluster": {
      "type": "object",
      "title": "Cluster represents the state of the cluster.",
      "required": [
        "Id"
      ],
      "properties": {
        "FluentDConfig": {
          "$ref": "#/definitions/FluentDConfig"
        },
        "Id": {
          "description": "Id of the cluster.",
          "type": "string"
        },
        "LoggingURL": {
          "description": "Logging url for the cluster.",
          "type": "string"
        },
        "ManagementURL": {
          "description": "Management url for the cluster",
          "type": "string"
        },
        "NodeId": {
          "description": "Id of the node on which this cluster object is initialized",
          "type": "string"
        },
        "Nodes": {
          "description": "array of all the nodes in the cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "TunnelConfig": {
          "$ref": "#/definitions/TunnelConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterConfig": {
      "type": "object",
      "properties": {
        "ClusterId": {
          "type": "string"
        },
        "ClusterUuid": {
          "type": "string"
        },
        "DataIface": {
          "type": "string"
        },
        "DataIp": {
          "type": "string"
        },
        "DefaultDriver": {
          "type": "string"
        },
        "FluentDHost": {
          "type": "string"
        },
        "LoggingURL": {
          "type": "string"
        },
        "ManagementURL": {
          "type": "string"
        },
        "MgmtIp": {
          "type": "string"
        },
        "MgtIface": {
          "type": "string"
        },
        "NodeId": {
          "type": "string"
        },
        "SchedulerNodeName": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/config"
    },
    "ClusterNotify": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairCreateRequest": {
      "description": "Used to send a request to create a cluster pair",
      "type": "object",
      "properties": {
        "remote_cluster_ip": {
          "description": "IP of the remote cluster",
          "type": "string",
          "x-go-name": "RemoteClusterIp"
        },
        "remote_cluster_port": {
          "description": "Port for the remote cluster",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "RemoteClusterPort"
        },
        "remote_cluster_token": {
          "description": "Token used to authenticate with the remote cluster",
          "type": "string",
          "x-go-name": "RemoteClusterToken"
        },
        "set_default": {
          "description": "Set the new pair as the default",
          "type": "boolean",
          "x-go-name": "SetDefault"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairCreateResponse": {
      "description": "Response for a pair request",
      "type": "object",
      "properties": {
        "remote_cluster_id": {
          "description": "ID of the remote cluster",
          "type": "string",
          "x-go-name": "RemoteClusterId"
        },
        "remote_cluster_name": {
          "description": "Name of the remote cluster",
          "type": "string",
          "x-go-name": "RemoteClusterName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairDeleteRequest": {
      "description": "Request to to delete a cluster pair",
      "type": "object",
      "properties": {
        "cluster_id": {
          "description": "ID of the cluster pair to be deleted",
          "type": "string",
          "x-go-name": "ClusterId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairGetRequest": {
      "description": "Request to get a cluster pair",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the cluster, if empty gets the default pair",
          "type": "string",
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairGetResponse": {
      "description": "Reponse to get a cluster pair",
      "type": "object",
      "properties": {
        "pair_info": {
          "$ref": "#/definitions/ClusterPairInfo"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairInfo": {
      "description": "Information about a cluster pair",
      "type": "object",
      "properties": {
        "endpoints": {
          "description": "Endpoints of the cluster",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Endpoints"
        },
        "id": {
          "description": "ID of the cluster",
          "type": "string",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Name of the cluster",
          "type": "string",
          "x-go-name": "Name"
        },
        "options": {
          "description": "Key/value pair of options associated with the cluster\nOpaque to openstorage and interpreted by the drivers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Options"
        },
        "secure": {
          "description": "Flag used to determine if communication is over a secure channel",
          "type": "boolean",
          "x-go-name": "Secure"
        },
        "token": {
          "description": "Token associated with cluster",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairProcessRequest": {
      "description": "Used to process a pair request from a remote cluster",
      "type": "object",
      "properties": {
        "remote_cluster_token": {
          "description": "Token used to authenticate with the remote cluster",
          "type": "string",
          "x-go-name": "RemoteClusterToken"
        },
        "source_cluster_id": {
          "description": "ID of the cluster requesting the pairing",
          "type": "string",
          "x-go-name": "SourceClusterId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairProcessResponse": {
      "description": "Response after a pairing has been processed",
      "type": "object",
      "properties": {
        "options": {
          "description": "Key/value pair of options returned on successful pairing\nOpaque to openstorage and interpreted by the drivers\n\nin: body",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Options"
        },
        "remote_cluster_endpoints": {
          "description": "List of endpoints that can be used to communicate with the cluster\n\nin: body",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RemoteClusterEndpoints"
        },
        "remote_cluster_id": {
          "description": "ID of the cluster which processed the pair request\n\nin: body",
          "type": "string",
          "x-go-name": "RemoteClusterId"
        },
        "remote_cluster_name": {
          "description": "Name of the cluster which processed the pair request\n\nin: body",
          "type": "string",
          "x-go-name": "RemoteClusterName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairTokenGetRequest": {
      "description": "Request to get the token for a cluster",
      "type": "object",
      "properties": {
        "reset_token": {
          "description": "Reset token if already preset",
          "type": "boolean",
          "x-go-name": "ResetToken"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairTokenGetResponse": {
      "description": "Response to get the cluster token",
      "type": "object",
      "properties": {
        "token": {
          "description": "Token used to authenticate clusters",
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterPairsEnumerateResponse": {
      "description": "Response to enumerate all the cluster pairs",
      "type": "object",
      "properties": {
        "default_id": {
          "description": "ID of the default cluster pair\n\nin: body",
          "type": "string",
          "x-go-name": "DefaultId"
        },
        "pairs": {
          "description": "Pairs Info about the cluster pairs\n\nin: body",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ClusterPairInfo"
          },
          "x-go-name": "Pairs"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterResponse": {
      "description": "ClusterResponse specifies a response that gets returned when requesting the cluster",
      "type": "object",
      "properties": {
        "error": {
          "description": "Error code\n\nin: body",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Config": {
      "type": "object",
      "properties": {
        "Osd": {
          "type": "object",
          "properties": {
            "ClusterConfig": {
              "$ref": "#/definitions/ClusterConfig"
            },
            "Drivers": {
              "description": "map[string]string is volume.VolumeParams equivalent",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "GraphDrivers": {
              "description": "map[string]string is volume.VolumeParams equivalent",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/config"
    },
    "CosType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CredCreateRequest": {
      "description": "CredCreateRequest is the input for CredCreate command",
      "type": "object",
      "properties": {
        "InputParams": {
          "description": "InputParams is map describing cloud provide",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CredCreateResponse": {
      "description": "CredCreateResponse is returned for CredCreate command",
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID of the credential that was just created",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "DefaultSecretKeyRequest": {
      "description": "DefaultSecretKeyRequest specify request to set cluster secret key",
      "type": "object",
      "properties": {
        "DefaultSecretKey": {
          "type": "string"
        },
        "Override": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "DriverType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "FSType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "FluentDConfig": {
      "description": "DEPRECATED",
      "type": "object",
      "title": "FluentDConfig describes ip and port of a fluentdhost.",
      "properties": {
        "ip": {
          "type": "string",
          "x-go-name": "IP"
        },
        "port": {
          "type": "string",
          "x-go-name": "Port"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "GeoConfig": {
      "description": "GeoConfig holds geographic information",
      "type": "object",
      "properties": {
        "rack": {
          "type": "string",
          "x-go-name": "Rack"
        },
        "region": {
          "type": "string",
          "x-go-name": "Region"
        },
        "zone": {
          "type": "string",
          "x-go-name": "Zone"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "GetSecretResponse": {
      "description": "GetSecretResponse gets secret value for given key",
      "type": "object",
      "properties": {
        "SecretValue": {
          "type": "object"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "GraphDriverChangeType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "GraphDriverChanges": {
      "description": "GraphDriverChanges represent a list of changes between the filesystem layers\nspecified by the ID and Parent.  // Parent may be an empty string, in which\ncase there is no parent.\nWhere the Path is the filesystem path within the layered filesystem",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/GraphDriverChangeType"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Group": {
      "description": "Group represents VolumeGroup / namespace\nAll volumes in the same group share this object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id common identifier across volumes that have the same group.",
          "type": "string",
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "GroupSnapCreateRequest": {
      "type": "object",
      "title": "GroupSnapCreateRequest specifies a request to create a snapshot of given group.",
      "properties": {
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "GroupSnapCreateResponse": {
      "type": "object",
      "title": "GroupSnapCreateRequest specifies a response that get's returned when creating a group snapshot.",
      "required": [
        "snapshots",
        "error"
      ],
      "properties": {
        "error": {
          "description": "Error message\n\nin: body",
          "type": "string",
          "x-go-name": "Error"
        },
        "snapshots": {
          "description": "Created snapshots\n\nin: body",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SnapCreateResponse"
          },
          "x-go-name": "Snapshots"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "IoProfile": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "IoStrategy": {
      "type": "object",
      "title": "IoStrategy defines how I/O should be performed to backing storage media.",
      "properties": {
        "async_io": {
          "description": "AsyncIO enables kaio.",
          "type": "boolean",
          "x-go-name": "AsyncIo"
        },
        "early_ack": {
          "description": "EarlyAck enables acks for async I/O at the source.",
          "type": "boolean",
          "x-go-name": "EarlyAck"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "KvdbConfig": {
      "description": "KvdbConfig stores parameters defining kvdb configuration",
      "type": "object",
      "properties": {
        "acl_token": {
          "type": "string",
          "x-go-name": "AclToken"
        },
        "ca_auth_address": {
          "type": "string",
          "x-go-name": "CAAuthAddress"
        },
        "ca_file": {
          "type": "string",
          "x-go-name": "CAFile"
        },
        "cert_file": {
          "type": "string",
          "x-go-name": "CertFile"
        },
        "cert_key_file": {
          "type": "string",
          "x-go-name": "CertKeyFile"
        },
        "client_cert_auth": {
          "type": "string",
          "x-go-name": "ClientCertAuth"
        },
        "discovery": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Discovery"
        },
        "insecure_skip_verify": {
          "type": "boolean",
          "x-go-name": "InsecureSkipVerify"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "transport_scheme": {
          "type": "string",
          "x-go-name": "TransportScheme"
        },
        "trusted_ca_file": {
          "type": "string",
          "x-go-name": "TrustedCAFile"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "LocateResponse": {
      "description": "Locate response woul be used to return a set of mounts\nand/or Container IDs and their mount paths",
      "type": "object",
      "properties": {
        "dockerids": {
          "description": "Map of docker id's and their mounts\n\u003ccontainerid\u003e: /var/www",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Dockerids"
        },
        "mounts": {
          "description": "Map of mounts\n\u003chost\u003e: /var/lib/osd/\u003cvolumemount\u003e",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Mounts"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "NetworkConfig": {
      "description": "NetworkConfig is a network configuration parameters struct",
      "type": "object",
      "properties": {
        "data_interface": {
          "type": "string",
          "x-go-name": "DataIface"
        },
        "mgt_interface": {
          "type": "string",
          "x-go-name": "MgtIface"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "Node": {
      "description": "It includes the current physical state (CPU, memory, storage, network usage) as\nwell as the containers running on the system.",
      "type": "object",
      "title": "Node describes the state of a node.",
      "properties": {
        "Avgload": {
          "description": "Average load (percentage)",
          "type": "integer",
          "format": "int64"
        },
        "Cpu": {
          "description": "Cpu usage of the node.",
          "type": "number",
          "format": "double"
        },
        "DataIp": {
          "description": "Data IP",
          "type": "string"
        },
        "Disks": {
          "description": "List of disks on this node.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StorageResource"
          }
        },
        "GenNumber": {
          "description": "GenNumber of the node",
          "type": "integer",
          "format": "uint64"
        },
        "Hostname": {
          "description": "Hostname of this node",
          "type": "string"
        },
        "Id": {
          "description": "Id of the node.",
          "type": "string"
        },
        "MemFree": {
          "description": "Free Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MemTotal": {
          "description": "Total Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MemUsed": {
          "description": "Used Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MgmtIp": {
          "description": "Management IP",
          "type": "string"
        },
        "NodeData": {
          "description": "Node data for this node (EX: Public IP, Provider, City..)",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "NodeLabels": {
          "description": "User defined labels for node. Key Value pairs",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Pools": {
          "description": "List of storage pools this node supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoragePool"
          }
        },
        "SchedulerNodeName": {
          "description": "SchedulerNodeName is name of the node in scheduler context. It can be\nempty if unable to get the name from the scheduler.",
          "type": "string"
        },
        "StartTime": {
          "description": "Start time of this node",
          "type": "string",
          "format": "date-time"
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "Timestamp": {
          "description": "Timestamp",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "NodeConfig": {
      "description": "NodeConfig is a node level config data",
      "type": "object",
      "properties": {
        "csi_endpoint": {
          "type": "string",
          "x-go-name": "CSIEndpoint"
        },
        "geo": {
          "$ref": "#/definitions/GeoConfig"
        },
        "network": {
          "$ref": "#/definitions/NetworkConfig"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "private": {
          "type": "object",
          "x-go-name": "Private"
        },
        "storage": {
          "$ref": "#/definitions/StorageConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "NodesConfig": {
      "description": "NodesConfig contains all of node level data",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NodeConfig"
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "ObjectstoreInfo": {
      "description": "ObjectstoreInfo is a structure that has current objectstore info",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "AccessKey for login into objectstore",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "access_port": {
          "description": "AccessPort is objectstore server port",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccessPort"
        },
        "action": {
          "description": "Action being taken on this objectstore",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Action"
        },
        "current_endpoint": {
          "description": "CurrentEndpoint on which objectstore server is accessible",
          "type": "string",
          "x-go-name": "CurrentEndpoint"
        },
        "enabled": {
          "description": "Enable/Disable created objectstore",
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "endpoints": {
          "description": "Endpoints for accessing objectstore",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Endpoints"
        },
        "region": {
          "description": "Region for this objectstore",
          "type": "string",
          "x-go-name": "Region"
        },
        "secret_key": {
          "description": "SecretKey for login into objectstore",
          "type": "string",
          "x-go-name": "SecretKey"
        },
        "status": {
          "description": "Status of objectstore running/failed",
          "type": "string",
          "x-go-name": "Status"
        },
        "uuid": {
          "description": "UUID of objectstore",
          "type": "string",
          "x-go-name": "Uuid"
        },
        "volume_id": {
          "description": "VolumeID of volume used by object store",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageAlertsClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageAlertsServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageCloudBackupClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageCloudBackupServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageClusterClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageClusterServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageCredentialsClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageCredentialsServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageIdentityClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageIdentityServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageMountAttachClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageMountAttachServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageNodeClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageNodeServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageObjectstoreClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageObjectstoreServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageSchedulePolicyClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageSchedulePolicyServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageVolumeClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OpenStorageVolumeServer": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "OperationFlags": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ReplicaSet": {
      "description": "ReplicaSet set of machine IDs (nodes) to which part of this volume is erasure\ncoded - for clustered storage arrays",
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Nodes"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Report": {
      "type": "object",
      "properties": {
        "directories": {
          "description": "Directory count",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Directories"
        },
        "files": {
          "description": "File count",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Files"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ResourceType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "RuntimeStateMap": {
      "description": "RuntimeStateMap is a list of name value mapping of driver specific runtime\ninformation.",
      "type": "object",
      "properties": {
        "runtime_state": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "RuntimeState"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SchedPolicy": {
      "description": "SchedPolicy specify name and schedule to create/update/list schedule policy",
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Schedule": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/schedpolicy"
    },
    "SdkAlertsAlertTypeQuery": {
      "description": "SdkAlertsAlertTypeQuery queries for alerts using alert type\nand it requires that resource type be provided as well.",
      "type": "object",
      "properties": {
        "alert_type": {
          "description": "Alert type used to build query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlertType"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsCountSpan": {
      "type": "object",
      "title": "SdkAlertsCountSpan to store count range information.",
      "properties": {
        "max_count": {
          "description": "Max count of such alerts raised so far.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxCount"
        },
        "min_count": {
          "description": "Min count of such alerts raised so far.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinCount"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsDeleteRequest": {
      "type": "object",
      "title": "SdkAlertsDeleteRequest is a request message to delete alerts.",
      "properties": {
        "queries": {
          "description": "It takes a list of queries to find matching alerts.\nMatching alerts are deleted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkAlertsQuery"
          },
          "x-go-name": "Queries"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsDeleteResponse": {
      "type": "object",
      "title": "SdkAlertsDeleteResponse is empty.",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsEnumerateRequest": {
      "type": "object",
      "title": "SdkAlertsEnumerateRequest is a request message to enumerate alerts.",
      "properties": {
        "queries": {
          "description": "It is a list of queries to find matching alerts.\nOutput of each of these queries is added to a global pool\nand returned as output of an RPC call.\nIn that sense alerts are fetched if they match any of the\nqueries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkAlertsQuery"
          },
          "x-go-name": "Queries"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsEnumerateResponse": {
      "type": "object",
      "title": "SdkAlertsEnumerateResponse is a list of alerts.",
      "properties": {
        "alerts": {
          "description": "Response contains a list of alerts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          },
          "x-go-name": "Alerts"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsOption": {
      "type": "object",
      "title": "SdkAlertsOption contains options for filtering alerts.",
      "properties": {
        "Opt": {
          "$ref": "#/definitions/isSdkAlertsOption_Opt"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsOption_CountSpan": {
      "type": "object",
      "properties": {
        "CountSpan": {
          "$ref": "#/definitions/SdkAlertsCountSpan"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsOption_IsCleared": {
      "type": "object",
      "properties": {
        "IsCleared": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsOption_MinSeverityType": {
      "type": "object",
      "properties": {
        "MinSeverityType": {
          "$ref": "#/definitions/SeverityType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsOption_TimeSpan": {
      "type": "object",
      "properties": {
        "TimeSpan": {
          "$ref": "#/definitions/SdkAlertsTimeSpan"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsQuery": {
      "description": "Each query object is one of the three query types and a list of\noptions.",
      "type": "object",
      "title": "SdkAlertsQuery is one of the query types and a list of options.",
      "properties": {
        "Query": {
          "$ref": "#/definitions/isSdkAlertsQuery_Query"
        },
        "opts": {
          "description": "Opts is a list of options associated with one of the queries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkAlertsOption"
          },
          "x-go-name": "Opts"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsQuery_AlertTypeQuery": {
      "type": "object",
      "properties": {
        "AlertTypeQuery": {
          "$ref": "#/definitions/SdkAlertsAlertTypeQuery"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsQuery_ResourceIdQuery": {
      "type": "object",
      "properties": {
        "ResourceIdQuery": {
          "$ref": "#/definitions/SdkAlertsResourceIdQuery"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsQuery_ResourceTypeQuery": {
      "type": "object",
      "properties": {
        "ResourceTypeQuery": {
          "$ref": "#/definitions/SdkAlertsResourceTypeQuery"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsResourceIdQuery": {
      "description": "SdkAlertsResourceIdQuery queries for alerts using resource id\nand it requires that both alert type and resource type be provided\nas well.",
      "type": "object",
      "properties": {
        "alert_type": {
          "description": "Alert type used to build query.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AlertType"
        },
        "resource_id": {
          "description": "Resource ID used to build query.",
          "type": "string",
          "x-go-name": "ResourceId"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsResourceTypeQuery": {
      "type": "object",
      "title": "SdkAlertsResourceTypeQuery queries for alerts using only resource id.",
      "properties": {
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAlertsTimeSpan": {
      "type": "object",
      "title": "SdkAlertsTimeSpan to store time window information.",
      "properties": {
        "end_time": {
          "$ref": "#/definitions/Timestamp"
        },
        "start_time": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAwsCredentialRequest": {
      "description": "Defines credentials for Aws/S3 endpoints",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "disable_ssl": {
          "description": "(optional) Disable SSL connection",
          "type": "boolean",
          "x-go-name": "DisableSsl"
        },
        "endpoint": {
          "description": "Endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "region": {
          "description": "Region",
          "type": "string",
          "x-go-name": "Region"
        },
        "secret_key": {
          "description": "Secret key",
          "type": "string",
          "x-go-name": "SecretKey"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAwsCredentialResponse": {
      "description": "Defines the response for AWS/S3 credentials",
      "type": "object",
      "properties": {
        "access_key": {
          "description": "Access key",
          "type": "string",
          "x-go-name": "AccessKey"
        },
        "disable_ssl": {
          "description": "(optional) Disable SSL connection",
          "type": "boolean",
          "x-go-name": "DisableSsl"
        },
        "endpoint": {
          "description": "Endpoint",
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "region": {
          "description": "Region",
          "type": "string",
          "x-go-name": "Region"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAzureCredentialRequest": {
      "description": "Defines credentials for Azure",
      "type": "object",
      "properties": {
        "account_key": {
          "description": "Account key",
          "type": "string",
          "x-go-name": "AccountKey"
        },
        "account_name": {
          "description": "Account name",
          "type": "string",
          "x-go-name": "AccountName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkAzureCredentialResponse": {
      "description": "Defines the response for Azure credentials",
      "type": "object",
      "properties": {
        "account_name": {
          "description": "Account name",
          "type": "string",
          "x-go-name": "AccountName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupCatalogRequest": {
      "description": "Defines a request to get catalog of a backup stored by a cloud provider",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Id of the backup",
          "type": "string",
          "x-go-name": "BackupId"
        },
        "credential_id": {
          "description": "Credential id describe the credentials for the cloud",
          "type": "string",
          "x-go-name": "CredentialId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupCatalogResponse": {
      "description": "Defines a response containing the contents of a backup stored by a cloud provider",
      "type": "object",
      "properties": {
        "contents": {
          "description": "Contents is listing of backup contents",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Contents"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupCreateRequest": {
      "description": "Defines a request to create a backup of a volume to the cloud",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Credential id refers to the cloud credentials needed to backup",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "full": {
          "description": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean",
          "x-go-name": "Full"
        },
        "volume_id": {
          "description": "VolumeID of the volume for which cloudbackup is requested",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupCreateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupDeleteAllRequest": {
      "description": "Defines a request to delete all the backups stored by a cloud provider\nfor a specified volume",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Credential id is the credential for cloud to be used for the request",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "src_volume_id": {
          "description": "id of the volume for the request",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupDeleteAllResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupDeleteRequest": {
      "description": "Defines a request to delete a single backup stored by a cloud provider",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "ID is the ID of the cloud backup",
          "type": "string",
          "x-go-name": "BackupId"
        },
        "credential_id": {
          "description": "Credential id is the credential for cloud to be used for the request",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "force": {
          "description": "Force Delete cloudbackup even if there are dependencies. This may be\nneeded if the backup is an incremental backup and subsequent backups\ndepend on this backup specified by `backup_id`.",
          "type": "boolean",
          "x-go-name": "Force"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupEnumerateRequest": {
      "description": "For a specific volume in current cluster: Set `src_volume_id` to your desired volume id\nand do not provide `cluster_id` and `all`.\nFor a specific volume in a specific cluster: Set `src_volume_id` to your desired volume id\nand specify `cluster_id`.\nFor a specific volume in all clusters: Set `src_volume_id` to your desired volume id\nand set `all` to true, do not provide `cluster_id`.\nFor all volumes in current cluster: do not provide `cluster_id`, `volume_id` and `all`.\nFor all volumes in a specific cluster: Set `cluster_id` to your desired cluster id\nand do not provide `volume_id` and `all`.\nFor all volumes in all clusters: Set `all` to true do not provide `volume_id` and `cluster_id`.",
      "type": "object",
      "title": "Defines a request to list the backups stored by a cloud provider.\nThe following combinations can be used to get cloud backup information:",
      "properties": {
        "all": {
          "description": "(optional) All indicates if the request should show cloud backups for all clusters or the current cluster.",
          "type": "boolean",
          "x-go-name": "All"
        },
        "cluster_id": {
          "description": "(optional) Cluster id specifies the cluster for the request",
          "type": "string",
          "x-go-name": "ClusterId"
        },
        "credential_id": {
          "description": "Credential id is the credential for cloud to be used for the request",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "src_volume_id": {
          "description": "(optional) Source id of the volume for the request.",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupEnumerateResponse": {
      "description": "Defines a response which lists all the backups stored by a cloud provider",
      "type": "object",
      "properties": {
        "backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkCloudBackupInfo"
          },
          "x-go-name": "Backups"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupHistoryItem": {
      "description": "SdkCloudBackupHistoryItem contains information about a backup for a\nspecific volume",
      "type": "object",
      "properties": {
        "src_volume_id": {
          "description": "SrcVolumeID is volume ID which was backedup",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        },
        "status": {
          "$ref": "#/definitions/SdkCloudBackupStatusType"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupHistoryRequest": {
      "description": "Defines a request to retreive the history of the backups for\na specific volume to a cloud provider",
      "type": "object",
      "properties": {
        "src_volume_id": {
          "description": "This optional value defines which history of backups is being\nrequested. If not provided, it will return the history for all volumes.",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupHistoryResponse": {
      "description": "Defines a response containing a list of history of backups to a cloud provider",
      "type": "object",
      "properties": {
        "history_list": {
          "description": "HistoryList is list of past backups on this volume",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkCloudBackupHistoryItem"
          },
          "x-go-name": "HistoryList"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupInfo": {
      "description": "SdkCloudBackupInfo has information about a backup stored by a cloud provider",
      "type": "object",
      "properties": {
        "id": {
          "description": "This is the id as represented by the cloud provider",
          "type": "string",
          "x-go-name": "Id"
        },
        "metadata": {
          "description": "Metadata associated with the backup",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Metadata"
        },
        "src_volume_id": {
          "description": "Source volumeID of the backup",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        },
        "src_volume_name": {
          "description": "Name of the sourceVolume of the backup",
          "type": "string",
          "x-go-name": "SrcVolumeName"
        },
        "status": {
          "$ref": "#/definitions/SdkCloudBackupStatusType"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupOpType": {
      "description": "CloudBackup operations types",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupRequestedState": {
      "description": "SdkCloudBackupRequestedState defines states to set a specified backup or restore\nto or from a cloud provider",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupRestoreRequest": {
      "description": "Defines a request to restore a volume from an existing backup stored by\na cloud provider",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Backup ID being restored",
          "type": "string",
          "x-go-name": "BackupId"
        },
        "credential_id": {
          "description": "The credential to be used for restore operation",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "node_id": {
          "description": "Optional for provisioning restore\nvolume (ResoreVolumeName should not be specified)",
          "type": "string",
          "x-go-name": "NodeId"
        },
        "restore_volume_name": {
          "description": "Optional volume Name of the new volume to be created\nin the cluster for restoring the cloudbackup",
          "type": "string",
          "x-go-name": "RestoreVolumeName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupRestoreResponse": {
      "description": "Defines a response when restoring a volume from a backup stored by\na cloud provider",
      "type": "object",
      "properties": {
        "restore_volume_id": {
          "description": "VolumeID to which the backup is being restored",
          "type": "string",
          "x-go-name": "RestoreVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedCreateRequest": {
      "description": "Defines a request to create a schedule for volume backups to a\ncloud provider",
      "type": "object",
      "properties": {
        "cloud_sched_info": {
          "$ref": "#/definitions/SdkCloudBackupScheduleInfo"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedCreateResponse": {
      "description": "Defines a response containing the id of a schedule for a volume backup\nto a cloud provider",
      "type": "object",
      "properties": {
        "backup_schedule_id": {
          "description": "Id of newly created backup schedule",
          "type": "string",
          "x-go-name": "BackupScheduleId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedDeleteRequest": {
      "description": "Defines a request to delete a backup schedule",
      "type": "object",
      "properties": {
        "backup_schedule_id": {
          "description": "Id of cloud backup to delete",
          "type": "string",
          "x-go-name": "BackupScheduleId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedEnumerateRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupSchedEnumerateResponse": {
      "description": "Defines a response containing a map listing the schedules for volume\nbackups to a cloud provider",
      "type": "object",
      "properties": {
        "cloud_sched_list": {
          "description": "Returns list of backup schedules",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SdkCloudBackupScheduleInfo"
          },
          "x-go-name": "CloudSchedList"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupScheduleInfo": {
      "description": "SdkCloudBackupScheduleInfo describes a schedule for volume backups to\na cloud provider",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "The cloud credential used with this schedule",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "full": {
          "description": "Full indicates if scheduled backups should always be full and never incremental.",
          "type": "boolean",
          "x-go-name": "Full"
        },
        "max_backups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxBackups"
        },
        "schedules": {
          "description": "Schedules are the frequencies of the backup",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkSchedulePolicyInterval"
          },
          "x-go-name": "Schedules"
        },
        "src_volume_id": {
          "description": "The schedule's source volume",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStateChangeRequest": {
      "description": "Defines a request to change the state of a backup or restore to or\nfrom a cloud provider",
      "type": "object",
      "properties": {
        "requested_state": {
          "$ref": "#/definitions/SdkCloudBackupRequestedState"
        },
        "src_volume_id": {
          "description": "Describes the volume id on which backup/restore\nstate change is being requested",
          "type": "string",
          "x-go-name": "SrcVolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStateChangeResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStatus": {
      "description": "SdkCloudBackupStatus defines the status of a backup stored by a cloud provider",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "This is the id as represented by the cloud provider",
          "type": "string",
          "x-go-name": "BackupId"
        },
        "bytes_done": {
          "description": "BytesDone indicates total Bytes uploaded/downloaded",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BytesDone"
        },
        "completed_time": {
          "$ref": "#/definitions/Timestamp"
        },
        "node_id": {
          "description": "NodeID is the ID of the node where this Op is active",
          "type": "string",
          "x-go-name": "NodeId"
        },
        "optype": {
          "$ref": "#/definitions/SdkCloudBackupOpType"
        },
        "start_time": {
          "$ref": "#/definitions/Timestamp"
        },
        "status": {
          "$ref": "#/definitions/SdkCloudBackupStatusType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStatusRequest": {
      "description": "Defines a request to retreive the status of a backup or restore for a\nspecified volume",
      "type": "object",
      "properties": {
        "local": {
          "description": "Local indicates if only those backups/restores that are\nactive on current node must be returned",
          "type": "boolean",
          "x-go-name": "Local"
        },
        "volume_id": {
          "description": "This is an optional value which is used to get information on the\nstatus of a backup for the specified volume. If no volume id is provided,\nthen status for all volumes is returned.",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStatusResponse": {
      "description": "Defines a response containing the status of the backups for a specified volume",
      "type": "object",
      "properties": {
        "statuses": {
          "description": "Statuses is list of currently active/failed/done backup/restores where\nthe key is the volume ids of current volumes being backed up or restored",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SdkCloudBackupStatus"
          },
          "x-go-name": "Statuses"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCloudBackupStatusType": {
      "description": "CloudBackup status types",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkClusterInspectCurrentRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkClusterInspectCurrentResponse": {
      "description": "Defines a response when inspecting the current cluster",
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/StorageCluster"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialCreateRequest": {
      "description": "Defines a request to create credentials",
      "type": "object",
      "properties": {
        "CredentialType": {
          "$ref": "#/definitions/isSdkCredentialCreateRequest_CredentialType"
        },
        "bucket": {
          "description": "(optional) Name of bucket",
          "type": "string",
          "x-go-name": "Bucket"
        },
        "encryption_key": {
          "description": "(optional) Key used to encrypt the data",
          "type": "string",
          "x-go-name": "EncryptionKey"
        },
        "name": {
          "description": "Name of the credential",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialCreateRequest_AwsCredential": {
      "type": "object",
      "properties": {
        "AwsCredential": {
          "$ref": "#/definitions/SdkAwsCredentialRequest"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialCreateRequest_AzureCredential": {
      "type": "object",
      "properties": {
        "AzureCredential": {
          "$ref": "#/definitions/SdkAzureCredentialRequest"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialCreateRequest_GoogleCredential": {
      "type": "object",
      "properties": {
        "GoogleCredential": {
          "$ref": "#/definitions/SdkGoogleCredentialRequest"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialCreateResponse": {
      "description": "Defines a response from creating a credential",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Id of the credentials",
          "type": "string",
          "x-go-name": "CredentialId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialDeleteRequest": {
      "description": "Defines the request to delete credentials",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Id for credentials",
          "type": "string",
          "x-go-name": "CredentialId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialEnumerateRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialEnumerateResponse": {
      "description": "Defines response for a enumeration of credentials",
      "type": "object",
      "properties": {
        "credential_ids": {
          "description": "List of credentials",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "CredentialIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialInspectRequest": {
      "description": "Defines the request to inspection for credentials",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Id of the credential",
          "type": "string",
          "x-go-name": "CredentialId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialInspectResponse": {
      "description": "This response uses OneOf proto style. Depending on your programming language\nyou will need to check if the value of credential_type is one of the ones below.",
      "type": "object",
      "title": "Defines the response to an inspection of a credential.",
      "properties": {
        "CredentialType": {
          "$ref": "#/definitions/isSdkCredentialInspectResponse_CredentialType"
        },
        "bucket": {
          "description": "(optional) Name of bucket",
          "type": "string",
          "x-go-name": "Bucket"
        },
        "credential_id": {
          "description": "Credential id",
          "type": "string",
          "x-go-name": "CredentialId"
        },
        "name": {
          "description": "Name of the credential",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialInspectResponse_AwsCredential": {
      "type": "object",
      "properties": {
        "AwsCredential": {
          "$ref": "#/definitions/SdkAwsCredentialResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialInspectResponse_AzureCredential": {
      "type": "object",
      "properties": {
        "AzureCredential": {
          "$ref": "#/definitions/SdkAzureCredentialResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialInspectResponse_GoogleCredential": {
      "type": "object",
      "properties": {
        "GoogleCredential": {
          "$ref": "#/definitions/SdkGoogleCredentialResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialValidateRequest": {
      "description": "Defines a request to validate credentials",
      "type": "object",
      "properties": {
        "credential_id": {
          "description": "Id of the credentials",
          "type": "string",
          "x-go-name": "CredentialId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkCredentialValidateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkGoogleCredentialRequest": {
      "description": "Defines credentials for Google",
      "type": "object",
      "properties": {
        "json_key": {
          "description": "JSON Key",
          "type": "string",
          "x-go-name": "JsonKey"
        },
        "project_id": {
          "description": "Project ID",
          "type": "string",
          "x-go-name": "ProjectId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkGoogleCredentialResponse": {
      "description": "Defines the response for Google credentials",
      "type": "object",
      "properties": {
        "project_id": {
          "description": "Project ID",
          "type": "string",
          "x-go-name": "ProjectId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkIdentityCapabilitiesRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkIdentityCapabilitiesResponse": {
      "description": "Defines a response containing the capabilites of the cluster",
      "type": "object",
      "properties": {
        "capabilities": {
          "description": "Provides all the capabilites supported by the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkServiceCapability"
          },
          "x-go-name": "Capabilities"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkIdentityVersionRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkIdentityVersionResponse": {
      "description": "Defines a response containing version information",
      "type": "object",
      "properties": {
        "sdk_version": {
          "$ref": "#/definitions/SdkVersion"
        },
        "version": {
          "$ref": "#/definitions/StorageVersion"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeEnumerateRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeEnumerateResponse": {
      "description": "Defines a response with a list of nodes",
      "type": "object",
      "properties": {
        "node_ids": {
          "description": "List of all the node ids in the cluster",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NodeIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeInspectCurrentRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeInspectCurrentResponse": {
      "description": "Defines a response when inspecting a node",
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/StorageNode"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeInspectRequest": {
      "description": "Defines a request when inspecting a node",
      "type": "object",
      "properties": {
        "node_id": {
          "description": "Id of node to inspect",
          "type": "string",
          "x-go-name": "NodeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkNodeInspectResponse": {
      "description": "Defines a response when inspecting a node",
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/StorageNode"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreCreateRequest": {
      "description": "Defines a request to create an object store",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Volume on which objectstore will be running",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreCreateResponse": {
      "description": "Defines a response when an object store has been created for a\nspecified volume",
      "type": "object",
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/ObjectstoreInfo"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreDeleteRequest": {
      "description": "Defines a request to delete an object store service from a volume",
      "type": "object",
      "properties": {
        "objectstore_id": {
          "description": "Id of the object store to delete",
          "type": "string",
          "x-go-name": "ObjectstoreId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreInspectRequest": {
      "description": "Defines a request to get information about an object store endpoint",
      "type": "object",
      "properties": {
        "objectstore_id": {
          "description": "Id of the object store",
          "type": "string",
          "x-go-name": "ObjectstoreId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreInspectResponse": {
      "description": "Defines a response when inspecting an object store endpoint",
      "type": "object",
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/ObjectstoreInfo"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreUpdateRequest": {
      "description": "Defines a request to update an object store",
      "type": "object",
      "properties": {
        "enable": {
          "description": "enable/disable objectstore",
          "type": "boolean",
          "x-go-name": "Enable"
        },
        "objectstore_id": {
          "description": "Objectstore Id to update",
          "type": "string",
          "x-go-name": "ObjectstoreId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkObjectstoreUpdateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicy": {
      "description": "Defines a schedule policy",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the schedule policy",
          "type": "string",
          "x-go-name": "Name"
        },
        "schedules": {
          "description": "Schedule policies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkSchedulePolicyInterval"
          },
          "x-go-name": "Schedules"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyCreateRequest": {
      "description": "Define a schedule policy request",
      "type": "object",
      "properties": {
        "schedule_policy": {
          "$ref": "#/definitions/SdkSchedulePolicy"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyCreateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyDeleteRequest": {
      "description": "Define schedule policy deletion request",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the schedule policy",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyEnumerateRequest": {
      "description": "Empty request",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyEnumerateResponse": {
      "description": "Defines a schedule policy enumerate response",
      "type": "object",
      "properties": {
        "policies": {
          "description": "List of Schedule Policy",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SdkSchedulePolicy"
          },
          "x-go-name": "Policies"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInspectRequest": {
      "description": "Define a schedule policy inspection request",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the schedule Policy",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInspectResponse": {
      "description": "Defines a schedule policy inspection response",
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/SdkSchedulePolicy"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInterval": {
      "description": "Defines a schedule policy interval",
      "type": "object",
      "properties": {
        "PeriodType": {
          "$ref": "#/definitions/isSdkSchedulePolicyInterval_PeriodType"
        },
        "retain": {
          "description": "Number of instances to retain",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Retain"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyIntervalDaily": {
      "description": "Defines a daily schedule",
      "type": "object",
      "properties": {
        "hour": {
          "description": "Range: 0-23",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Hour"
        },
        "minute": {
          "description": "Range: 0-59",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Minute"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyIntervalMonthly": {
      "description": "Defines a monthly schedule",
      "type": "object",
      "properties": {
        "day": {
          "description": "Range: 1-28",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Day"
        },
        "hour": {
          "description": "Range: 0-59",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Hour"
        },
        "minute": {
          "description": "Range: 0-59",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Minute"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyIntervalPeriodic": {
      "description": "Defines a periodic schedule",
      "type": "object",
      "properties": {
        "seconds": {
          "description": "Specify the number of seconds between intervals",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyIntervalWeekly": {
      "description": "Defines a weekly schedule",
      "type": "object",
      "properties": {
        "day": {
          "$ref": "#/definitions/SdkTimeWeekday"
        },
        "hour": {
          "description": "Range: 0-23",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Hour"
        },
        "minute": {
          "description": "Range: 0-59",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Minute"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInterval_Daily": {
      "type": "object",
      "properties": {
        "Daily": {
          "$ref": "#/definitions/SdkSchedulePolicyIntervalDaily"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInterval_Monthly": {
      "type": "object",
      "properties": {
        "Monthly": {
          "$ref": "#/definitions/SdkSchedulePolicyIntervalMonthly"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInterval_Periodic": {
      "type": "object",
      "properties": {
        "Periodic": {
          "$ref": "#/definitions/SdkSchedulePolicyIntervalPeriodic"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyInterval_Weekly": {
      "type": "object",
      "properties": {
        "Weekly": {
          "$ref": "#/definitions/SdkSchedulePolicyIntervalWeekly"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyUpdateRequest": {
      "description": "Define a request to update a schedule policy",
      "type": "object",
      "properties": {
        "schedule_policy": {
          "$ref": "#/definitions/SdkSchedulePolicy"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkSchedulePolicyUpdateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkServiceCapability": {
      "description": "Defines a capability of he cluster",
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/isSdkServiceCapability_Type"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkServiceCapability_OpenStorageService": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SdkServiceCapability_OpenStorageService_Type"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkServiceCapability_OpenStorageService_Type": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkServiceCapability_Service": {
      "type": "object",
      "properties": {
        "Service": {
          "$ref": "#/definitions/SdkServiceCapability_OpenStorageService"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkTimeWeekday": {
      "description": "Defines times of day",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVersion": {
      "description": "SDK version in Major.Minor.Patch format. The goal of this\nmessage is to provide clients a method to determine the SDK\nversion run by an SDK server.",
      "type": "object",
      "properties": {
        "major": {
          "description": "SDK version major number",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Major"
        },
        "minor": {
          "description": "SDK version minor number",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Minor"
        },
        "patch": {
          "description": "SDK version patch number",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Patch"
        },
        "version": {
          "description": "String representation of the SDK version. Must be\nin `major.minor.patch` format.",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVersion_Version": {
      "description": "These values are constants that can be used by the\nclient and server applications",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeAttachRequest": {
      "description": "Defines a request to attach a volume to the node receiving this request",
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/SdkVolumeAttachRequest_Options"
        },
        "volume_id": {
          "description": "Id of volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeAttachRequest_Options": {
      "description": "Options to attach device",
      "type": "object",
      "properties": {
        "secret_context": {
          "description": "It indicates the additional context which could be used to retrieve the secret.\nIn case of Kubernetes, this is the namespace in which the secret is created.",
          "type": "string",
          "x-go-name": "SecretContext"
        },
        "secret_key": {
          "description": "In case of Kubernetes, this will be the key stored in the Kubernetes secret",
          "type": "string",
          "x-go-name": "SecretKey"
        },
        "secret_name": {
          "description": "Indicates the name of the secret stored in a secret store\nIn case of Hashicorp's Vault, it will be the key from the key-value pair stored in its kv backend.\nIn case of Kubernetes secret, it is the name of the secret object itself",
          "type": "string",
          "x-go-name": "SecretName"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeAttachResponse": {
      "description": "Defines a response from the node which received the request to attach",
      "type": "object",
      "properties": {
        "device_path": {
          "description": "Device path where device is exported",
          "type": "string",
          "x-go-name": "DevicePath"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeCloneRequest": {
      "description": "Defines a request to clone a volume or create a volume from a snapshot",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name of the volume. This will be used for idempotency.",
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "description": "Parent volume id or snapshot id will create a new volume as a clone of the parent.",
          "type": "string",
          "x-go-name": "ParentId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeCloneResponse": {
      "description": "Defines the response when creating a clone from a volume or a snapshot",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Id of new volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeCreateRequest": {
      "description": "Defines a request to create a volume. Use OpenStorageVolume.Update()\nto update any labels on the volume.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique name of the volume. This will be used for idempotency.",
          "type": "string",
          "x-go-name": "Name"
        },
        "spec": {
          "$ref": "#/definitions/VolumeSpec"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeCreateResponse": {
      "description": "Defines a response to the creation of a volume",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Id of new volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeDeleteRequest": {
      "description": "Defines the request to delete a volume",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Id of volume to delete",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeDeleteResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeDetachRequest": {
      "description": "Defines a request to detach a volume",
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/SdkVolumeDetachRequest_Options"
        },
        "volume_id": {
          "description": "Id of the volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeDetachRequest_Options": {
      "description": "Options to detach device",
      "type": "object",
      "properties": {
        "force": {
          "description": "Forcefully detach device from the kernel",
          "type": "boolean",
          "x-go-name": "Force"
        },
        "unmount_before_detach": {
          "description": "Unmount the volume before detaching",
          "type": "boolean",
          "x-go-name": "UnmountBeforeDetach"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeDetachResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeEnumerateRequest": {
      "description": "Defines a request to list volumes",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeEnumerateResponse": {
      "description": "Defines the response when listing volumes",
      "type": "object",
      "properties": {
        "volume_ids": {
          "description": "List of volumes matching label",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VolumeIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeEnumerateWithFiltersRequest": {
      "description": "Defines a request to list volumes",
      "type": "object",
      "properties": {
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeEnumerateWithFiltersResponse": {
      "description": "Defines the response when listing volumes",
      "type": "object",
      "properties": {
        "volume_ids": {
          "description": "List of volumes matching label",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VolumeIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeInspectRequest": {
      "description": "Defines the request to inspect a volume",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Id of volume to inspect",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeInspectResponse": {
      "description": "Defines the response when inspecting a volume",
      "type": "object",
      "properties": {
        "volume": {
          "$ref": "#/definitions/Volume"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeMountRequest": {
      "description": "Defines a request to mount a volume to the node receiving this request",
      "type": "object",
      "properties": {
        "mount_path": {
          "description": "Mount path for mounting the volume.",
          "type": "string",
          "x-go-name": "MountPath"
        },
        "volume_id": {
          "description": "Id of the volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeMountResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotCreateRequest": {
      "type": "object",
      "title": "Defines the request when creating a snapshot from a volume.",
      "properties": {
        "labels": {
          "description": "Labels to apply to snapshot",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the snapshot.",
          "type": "string",
          "x-go-name": "Name"
        },
        "volume_id": {
          "description": "Id of volume to take the snapshot from",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotCreateResponse": {
      "description": "Defines a response after creating a snapshot of a volume",
      "type": "object",
      "properties": {
        "snapshot_id": {
          "description": "Id of immutable snapshot",
          "type": "string",
          "x-go-name": "SnapshotId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotEnumerateRequest": {
      "description": "Defines a request to list the snaphots",
      "type": "object",
      "properties": {
        "volume_id": {
          "description": "Get the snapshots for this volume id",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotEnumerateResponse": {
      "description": "Defines a response when listing snapshots",
      "type": "object",
      "properties": {
        "volume_snapshot_ids": {
          "description": "List of immutable snapshots",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VolumeSnapshotIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotEnumerateWithFiltersRequest": {
      "description": "Defines a request to list the snaphots",
      "type": "object",
      "properties": {
        "labels": {
          "description": "(optional) Get snapshots that match these labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "volume_id": {
          "description": "(optional) Get the snapshots for this volume id",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotEnumerateWithFiltersResponse": {
      "description": "Defines a response when listing snapshots",
      "type": "object",
      "properties": {
        "volume_snapshot_ids": {
          "description": "List of immutable snapshots",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VolumeSnapshotIds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotRestoreRequest": {
      "description": "Defines a request to restore a volume to a snapshot",
      "type": "object",
      "properties": {
        "snapshot_id": {
          "description": "Snapshot id to apply to `volume_id`",
          "type": "string",
          "x-go-name": "SnapshotId"
        },
        "volume_id": {
          "description": "Id of volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotRestoreResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotScheduleUpdateRequest": {
      "description": "Defines a request to update the snapshot schedule of a volume",
      "type": "object",
      "properties": {
        "snapshot_schedule_names": {
          "description": "Names of schedule policies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SnapshotScheduleNames"
        },
        "volume_id": {
          "description": "Id of volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeSnapshotScheduleUpdateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeStatsRequest": {
      "description": "Defines a request to retreive volume statistics",
      "type": "object",
      "properties": {
        "not_cumulative": {
          "description": "When set to false the stats are in /proc/diskstats style stats.\nWhen set to true the stats are stats for a specific duration.",
          "type": "boolean",
          "x-go-name": "NotCumulative"
        },
        "volume_id": {
          "description": "Id of the volume to get statistics",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeStatsResponse": {
      "description": "Defines a response containing drive statistics",
      "type": "object",
      "properties": {
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeUnmountRequest": {
      "description": "Defines a request to unmount a volume on the node receiving this request",
      "type": "object",
      "properties": {
        "mount_path": {
          "description": "MountPath for device",
          "type": "string",
          "x-go-name": "MountPath"
        },
        "options": {
          "$ref": "#/definitions/SdkVolumeUnmountRequest_Options"
        },
        "volume_id": {
          "description": "Id of volume",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeUnmountRequest_Options": {
      "description": "Options to unmount device",
      "type": "object",
      "properties": {
        "delete_mount_path": {
          "description": "Delete the mount path on the node after unmounting",
          "type": "boolean",
          "x-go-name": "DeleteMountPath"
        },
        "no_delay_before_deleting_mount_path": {
          "description": "Do not wait for a delay before deleting path.\nNormally a storage driver may delay before deleting the mount path,\nwhich may be necessary to reduce the risk of race conditions. This\nchoice will remove that delay. This value is only usable when\n`delete_mount_path` is set.",
          "type": "boolean",
          "x-go-name": "NoDelayBeforeDeletingMountPath"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeUnmountResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeUpdateRequest": {
      "description": "This request is used to adjust or set new values in the volume",
      "type": "object",
      "properties": {
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        },
        "spec": {
          "$ref": "#/definitions/VolumeSpecUpdate"
        },
        "volume_id": {
          "description": "Id of the volume to update",
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SdkVolumeUpdateResponse": {
      "description": "Empty response",
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SecretLoginRequest": {
      "description": "SecretLoginRequest specify secret store and config to initiate\nsecret store session",
      "type": "object",
      "properties": {
        "SecretConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SecretType": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "SecretsConfig": {
      "description": "SecretsConfig is a secrets configuration parameters struct",
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSConfig"
        },
        "cluster_secret_key": {
          "type": "string",
          "x-go-name": "ClusterSecretKey"
        },
        "secret_type": {
          "type": "string",
          "x-go-name": "SecretType"
        },
        "vault": {
          "$ref": "#/definitions/VaultConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "SetSecretRequest": {
      "description": "SetSecretRequest stores the given value/data against the key",
      "type": "object",
      "properties": {
        "SecretValue": {
          "type": "object"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "SeverityType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SnapCreateRequest": {
      "type": "object",
      "title": "SnapCreateRequest specifies a request to create a snapshot of given volume.",
      "properties": {
        "id": {
          "description": "volume id",
          "type": "string",
          "x-go-name": "Id"
        },
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        },
        "no_retry": {
          "description": "NoRetry indicates not to retry snapshot creation in the background.",
          "type": "boolean",
          "x-go-name": "NoRetry"
        },
        "readonly": {
          "type": "boolean",
          "x-go-name": "Readonly"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "SnapCreateResponse": {
      "type": "object",
      "title": "SnapCreateRequest specifies a response that get's returned when creating a snapshot.",
      "required": [
        "volume_create_response"
      ],
      "properties": {
        "volume_create_response": {
          "$ref": "#/definitions/VolumeCreateResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Source": {
      "description": "Source is a structure that can be given to a volume\nto seed the volume with data.",
      "type": "object",
      "properties": {
        "parent": {
          "description": "A volume id, if specified will create a clone of the parent.",
          "type": "string",
          "x-go-name": "Parent"
        },
        "seed": {
          "description": "Seed will seed the volume from the specified URI\nAny additional config for the source comes from the labels in the spec",
          "type": "string",
          "x-go-name": "Seed"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StatPoint": {
      "description": "StatPoint represents the basic structure of a single Stat reported\nTODO: This is the first step to introduce stats in openstorage.\nFollow up task is to introduce an API for logging stats",
      "type": "object",
      "properties": {
        "Fields": {
          "description": "Fields and values of the stat",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Name": {
          "description": "Name of the Stat",
          "type": "string"
        },
        "Tags": {
          "description": "Tags for the Stat",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Timestamp": {
          "description": "Timestamp in Unix format",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Stats": {
      "description": "Stats is a structure that represents last collected stats for a volume",
      "type": "object",
      "properties": {
        "bytes_used": {
          "description": "BytesUsed",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "BytesUsed"
        },
        "interval_ms": {
          "description": "Interval in ms during which stats were collected",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "IntervalMs"
        },
        "io_ms": {
          "description": "Time spent doing IOs ms",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "IoMs"
        },
        "io_progress": {
          "description": "IOs curently in progress",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "IoProgress"
        },
        "read_bytes": {
          "description": "Number of bytes read",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ReadBytes"
        },
        "read_ms": {
          "description": "Time spent in reads in ms",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ReadMs"
        },
        "reads": {
          "description": "Reads completed successfully",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Reads"
        },
        "write_bytes": {
          "description": "Number of bytes written",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "WriteBytes"
        },
        "write_ms": {
          "description": "Time spent in writes in ms",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "WriteMs"
        },
        "writes": {
          "description": "Writes completed successfully",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Writes"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Status": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageCluster": {
      "description": "StorageCluster represents the state and information about the cluster",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the cluster",
          "type": "string",
          "x-go-name": "Id"
        },
        "name": {
          "description": "Name of the cluster",
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageConfig": {
      "description": "StorageConfig is a storage configuration parameters struct",
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Devices"
        },
        "devices_md": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DevicesMd"
        },
        "max_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxCount"
        },
        "max_drive_set_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxDriveSetCount"
        },
        "raid_level": {
          "type": "string",
          "x-go-name": "RaidLevel"
        },
        "raid_level_md": {
          "type": "string",
          "x-go-name": "RaidLevelMd"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "StorageMedium": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageNode": {
      "description": "StorageNode describes the state of the node",
      "type": "object",
      "properties": {
        "avg_load": {
          "description": "Average load (percentage)",
          "type": "integer",
          "format": "int64",
          "x-go-name": "AvgLoad"
        },
        "cpu": {
          "description": "Cpu usage of the node",
          "type": "number",
          "format": "double",
          "x-go-name": "Cpu"
        },
        "data_ip": {
          "description": "Data IP",
          "type": "string",
          "x-go-name": "DataIp"
        },
        "disks": {
          "description": "List of disks on the node",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StorageResource"
          },
          "x-go-name": "Disks"
        },
        "hostname": {
          "description": "Hostname of the node",
          "type": "string",
          "x-go-name": "Hostname"
        },
        "id": {
          "description": "Id of the node",
          "type": "string",
          "x-go-name": "Id"
        },
        "mem_free": {
          "description": "Free memory of the node",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MemFree"
        },
        "mem_total": {
          "description": "Total memory of the node",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MemTotal"
        },
        "mem_used": {
          "description": "Used memory of the node",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MemUsed"
        },
        "mgmt_ip": {
          "description": "Management IP",
          "type": "string",
          "x-go-name": "MgmtIp"
        },
        "node_labels": {
          "description": "User defined labels for the node",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "NodeLabels"
        },
        "pools": {
          "description": "List of storage pools this node supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoragePool"
          },
          "x-go-name": "Pools"
        },
        "scheduler_node_name": {
          "description": "SchedulerNodeName is name of the node in scheduler context. It can be\nempty if unable to get the name from the scheduler.",
          "type": "string",
          "x-go-name": "SchedulerNodeName"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StoragePool": {
      "description": "StoragePool groups different storage devices based on their CosType",
      "type": "object",
      "properties": {
        "Cos": {
          "$ref": "#/definitions/CosType"
        },
        "ID": {
          "description": "ID pool ID",
          "type": "integer",
          "format": "int32"
        },
        "Medium": {
          "$ref": "#/definitions/StorageMedium"
        },
        "RaidLevel": {
          "description": "RaidLevel storage raid level",
          "type": "string"
        },
        "TotalSize": {
          "description": "TotalSize of the pool",
          "type": "integer",
          "format": "uint64"
        },
        "Used": {
          "description": "Used size of the pool",
          "type": "integer",
          "format": "uint64"
        },
        "labels": {
          "description": "Labels is a list of user defined name-value pairs",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageResource": {
      "type": "object",
      "title": "StorageResource groups properties of a storage device.",
      "properties": {
        "id": {
          "description": "Id is the LUN identifier.",
          "type": "string",
          "x-go-name": "Id"
        },
        "iops": {
          "description": "IOPS",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Iops"
        },
        "last_scan": {
          "$ref": "#/definitions/Timestamp"
        },
        "medium": {
          "$ref": "#/definitions/StorageMedium"
        },
        "metadata": {
          "description": "True if dedicated for metadata.",
          "type": "boolean",
          "x-go-name": "Metadata"
        },
        "online": {
          "description": "True if this device is online.",
          "type": "boolean",
          "x-go-name": "Online"
        },
        "path": {
          "description": "Path device path for this storage resource.",
          "type": "string",
          "x-go-name": "Path"
        },
        "randRW": {
          "description": "RandRW",
          "type": "number",
          "format": "double",
          "x-go-name": "RandRW"
        },
        "rotation_speed": {
          "description": "True if this device is rotational.",
          "type": "string",
          "x-go-name": "RotationSpeed"
        },
        "seq_read": {
          "description": "SeqRead",
          "type": "number",
          "format": "double",
          "x-go-name": "SeqRead"
        },
        "seq_write": {
          "description": "SeqWrite",
          "type": "number",
          "format": "double",
          "x-go-name": "SeqWrite"
        },
        "size": {
          "description": "Total size in bytes.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "used": {
          "description": "Physical Bytes used.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Used"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageVersion": {
      "description": "Version information about the storage system",
      "type": "object",
      "properties": {
        "details": {
          "description": "Extra information provided by the storage system",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "driver": {
          "description": "OpenStorage driver name",
          "type": "string",
          "x-go-name": "Driver"
        },
        "version": {
          "description": "Version of the server",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Timestamp": {
      "description": "# Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\nstruct timeval tv;\ngettimeofday(\u0026tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\nFILETIME ft;\nGetSystemTimeAsFileTime(\u0026ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\nA Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\nis 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n.setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample 5: Compute Timestamp from current time in Python.\n\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n\n# JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required, though only UTC (as indicated by \"Z\") is presently supported.\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)\nwith the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one\ncan use the Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--)\nto obtain a formatter capable of generating timestamps in this format.",
      "type": "object",
      "title": "A Timestamp represents a point in time independent of any time zone\nor calendar, represented as seconds and fractions of seconds at\nnanosecond resolution in UTC Epoch time. It is encoded using the\nProleptic Gregorian Calendar which extends the Gregorian calendar\nbackwards to year one. It is encoded assuming all minutes are 60\nseconds long, i.e. leap seconds are \"smeared\" so that no leap second\ntable is needed for interpretation. Range is from\n0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\nBy restricting to that range, we ensure that we can convert to\nand from  RFC 3339 date strings.\nSee [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).",
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/vendor/github.com/golang/protobuf/ptypes/timestamp"
    },
    "TunnelConfig": {
      "description": "TunnelConfig describes key, cert and endpoint of a reverse proxy tunnel\nDEPRECATED",
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "x-go-name": "Cert"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "tunnel_endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VaultConfig": {
      "description": "VaultConfig is a vault configuration parameters struct",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "backend_path": {
          "type": "string",
          "x-go-name": "BackendPath"
        },
        "base_path": {
          "type": "string",
          "x-go-name": "BasePath"
        },
        "ca_cert": {
          "type": "string",
          "x-go-name": "CACert"
        },
        "ca_path": {
          "type": "string",
          "x-go-name": "CAPath"
        },
        "client_cert": {
          "type": "string",
          "x-go-name": "ClientCert"
        },
        "client_key": {
          "type": "string",
          "x-go-name": "ClientKey"
        },
        "skip_verify": {
          "type": "string",
          "x-go-name": "TLSSkipVerify"
        },
        "tls_server_name": {
          "type": "string",
          "x-go-name": "TLSServerName"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "Volume": {
      "type": "object",
      "title": "Volume represents an abstract storage volume.",
      "properties": {
        "attach_info": {
          "description": "AttachInfo is a list of name value mappings that provides attach information.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "AttachInfo"
        },
        "attach_path": {
          "description": "AttachPath is the mounted path in the host namespace.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AttachPath"
        },
        "attached_on": {
          "description": "AttachedOn is the node instance identifier for clustered systems.",
          "type": "string",
          "x-go-name": "AttachedOn"
        },
        "attached_state": {
          "$ref": "#/definitions/AttachState"
        },
        "ctime": {
          "$ref": "#/definitions/Timestamp"
        },
        "device_path": {
          "description": "DevicePath is the device exported by block device implementations.",
          "type": "string",
          "x-go-name": "DevicePath"
        },
        "error": {
          "description": "Error is the Last recorded error.",
          "type": "string",
          "x-go-name": "Error"
        },
        "format": {
          "$ref": "#/definitions/FSType"
        },
        "fs_resize_required": {
          "description": "FsResizeRequired if an FS resize is required on the volume.",
          "type": "boolean",
          "x-go-name": "FsResizeRequired"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "Self referential volume ID.",
          "type": "string",
          "x-go-name": "Id"
        },
        "last_scan": {
          "$ref": "#/definitions/Timestamp"
        },
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        },
        "readonly": {
          "description": "Readonly is true if this volume is to be mounted with readonly access.",
          "type": "boolean",
          "x-go-name": "Readonly"
        },
        "replica_sets": {
          "description": "ReplicatSets storage for this volumefor clustered storage arrays.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplicaSet"
          },
          "x-go-name": "ReplicaSets"
        },
        "runtime_state": {
          "description": "RuntimeState is a lst of name value mapping of driver specific runtime\ninformation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeStateMap"
          },
          "x-go-name": "RuntimeState"
        },
        "secure_device_path": {
          "description": "SecureDevicePath is the device path for an encrypted volume.",
          "type": "string",
          "x-go-name": "SecureDevicePath"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "spec": {
          "$ref": "#/definitions/VolumeSpec"
        },
        "state": {
          "$ref": "#/definitions/VolumeState"
        },
        "status": {
          "$ref": "#/definitions/VolumeStatus"
        },
        "usage": {
          "description": "Usage is bytes consumed by vtheis volume.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Usage"
        },
        "volume_consumers": {
          "description": "VolumeConsumers are entities that consume this volume",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeConsumer"
          },
          "x-go-name": "VolumeConsumers"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeActionParam": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeConsumer": {
      "description": "VolumeConsumer identifies a consumer for a Volume. An example of a VolumeConsumer\nwould be a Pod in Kubernetes who has mounted the PersistentVolumeClaim for the\nVolume\nswagger: model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of the volume consumer",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Namespace is the namespace of the volume consumer",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "node_id": {
          "description": "NodeID is the identifier of the node on which the consumer is running. This\nidentifier would be from the perspective of the container runtime or\norchestrator under which the volume consumer resides. For example, NodeID\ncan be name of a minion in Kubernetes.",
          "type": "string",
          "x-go-name": "NodeId"
        },
        "owner_name": {
          "description": "OwnerName is the name of the entity who owns this volume consumer",
          "type": "string",
          "x-go-name": "OwnerName"
        },
        "owner_type": {
          "description": "OwnerType is the type of the entity who owns this volume consumer. The type would\nbe from the perspective of the container runtime or the orchestrator under which\nthe volume consumer resides. For e.g OwnerType can be a Deployment in Kubernetes.",
          "type": "string",
          "x-go-name": "OwnerType"
        },
        "type": {
          "description": "Type is the type of the consumer. E.g a Kubernetes pod",
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeCreateRequest": {
      "description": "VolumeCreateRequest is a structure that has the locator, source and spec\nto create a volume",
      "type": "object",
      "properties": {
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "spec": {
          "$ref": "#/definitions/VolumeSpec"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeCreateResponse": {
      "description": "VolumeCreateResponse",
      "type": "object",
      "required": [
        "id",
        "volume_response"
      ],
      "properties": {
        "id": {
          "description": "ID of the newly created volume\n\nin: body",
          "type": "string",
          "x-go-name": "Id"
        },
        "volume_response": {
          "$ref": "#/definitions/VolumeResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeInfo": {
      "description": "VolumeInfo",
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "storage": {
          "$ref": "#/definitions/VolumeSpec"
        },
        "volume_id": {
          "type": "string",
          "x-go-name": "VolumeId"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeLocator": {
      "description": "VolumeLocator is a structure that is attached to a volume\nand is used to carry opaque metadata.",
      "type": "object",
      "properties": {
        "name": {
          "description": "User friendly identifier",
          "type": "string",
          "x-go-name": "Name"
        },
        "volume_labels": {
          "description": "A set of name-value pairs that acts as search filters",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "VolumeLabels"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeResponse": {
      "type": "object",
      "title": "VolumeResponse is a structure that wraps an error.",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "Error message\n\nin: body",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSetRequest": {
      "type": "object",
      "title": "VolumeSet specifies a request to update a volume.",
      "properties": {
        "action": {
          "$ref": "#/definitions/VolumeStateAction"
        },
        "locator": {
          "$ref": "#/definitions/VolumeLocator"
        },
        "options": {
          "description": "additional options\nrequired for the Set operation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Options"
        },
        "spec": {
          "$ref": "#/definitions/VolumeSpec"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSetResponse": {
      "description": "VolumeSetResponse",
      "type": "object",
      "required": [
        "volume",
        "volume_response"
      ],
      "properties": {
        "volume": {
          "$ref": "#/definitions/Volume"
        },
        "volume_response": {
          "$ref": "#/definitions/VolumeResponse"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpec": {
      "type": "object",
      "title": "VolumeSpec has the properties needed to create a volume.",
      "properties": {
        "aggregation_level": {
          "description": "Aggregatiokn level Specifies the number of parts the volume can be aggregated from.",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "AggregationLevel"
        },
        "block_size": {
          "description": "BlockSize for the filesystem.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "BlockSize"
        },
        "cascaded": {
          "description": "Cascaded is true if this volume can be populated on any node from an external source.",
          "type": "boolean",
          "x-go-name": "Cascaded"
        },
        "compressed": {
          "description": "Compressed is true if this volume is to be compressed.",
          "type": "boolean",
          "x-go-name": "Compressed"
        },
        "cos": {
          "$ref": "#/definitions/CosType"
        },
        "dedupe": {
          "description": "Dedupe specifies if the volume data is to be de-duplicated.",
          "type": "boolean",
          "x-go-name": "Dedupe"
        },
        "encrypted": {
          "description": "Encrypted is true if this volume will be cryptographically secured.",
          "type": "boolean",
          "x-go-name": "Encrypted"
        },
        "ephemeral": {
          "description": "Ephemeral storage",
          "type": "boolean",
          "x-go-name": "Ephemeral"
        },
        "force_unsupported_fs_type": {
          "description": "Use to force a file system type which is not recommended.\nThe driver may still refuse to use the file system type.",
          "type": "boolean",
          "x-go-name": "ForceUnsupportedFsType"
        },
        "format": {
          "$ref": "#/definitions/FSType"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "group_enforced": {
          "description": "GroupEnforced is true if consistency group creation is enforced.",
          "type": "boolean",
          "x-go-name": "GroupEnforced"
        },
        "ha_level": {
          "description": "HaLevel specifies the number of copies of data.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "HaLevel"
        },
        "io_profile": {
          "$ref": "#/definitions/IoProfile"
        },
        "io_strategy": {
          "$ref": "#/definitions/IoStrategy"
        },
        "journal": {
          "description": "Journal is true if data for the volume goes into the journal.",
          "type": "boolean",
          "x-go-name": "Journal"
        },
        "nodiscard": {
          "description": "Nodiscard specifies if the volume will be mounted with discard support disabled.\ni.e. FS will not release allocated blocks back to the backing storage pool.",
          "type": "boolean",
          "x-go-name": "Nodiscard"
        },
        "passphrase": {
          "description": "Passphrase for an encrypted volume",
          "type": "string",
          "x-go-name": "Passphrase"
        },
        "queue_depth": {
          "description": "QueueDepth defines the desired block device queue depth",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "QueueDepth"
        },
        "replica_set": {
          "$ref": "#/definitions/ReplicaSet"
        },
        "scale": {
          "description": "Scale allows autocreation of volumes.",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Scale"
        },
        "shared": {
          "description": "Shared is true if this volume can be concurrently accessed by multiple users.",
          "type": "boolean",
          "x-go-name": "Shared"
        },
        "sharedv4": {
          "description": "Sharedv4 is true if this volume can be accessed via sharedv4.",
          "type": "boolean",
          "x-go-name": "Sharedv4"
        },
        "size": {
          "description": "Size specifies the thin provisioned volume size in bytes",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "snapshot_interval": {
          "description": "SnapshotInterval in minutes, set to 0 to disable snapshots",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "SnapshotInterval"
        },
        "snapshot_schedule": {
          "description": "SnapshotSchedule a well known string that specifies when snapshots should be taken.",
          "type": "string",
          "x-go-name": "SnapshotSchedule"
        },
        "sticky": {
          "description": "Sticky volumes cannot be deleted until the flag is removed.",
          "type": "boolean",
          "x-go-name": "Sticky"
        },
        "volume_labels": {
          "description": "VolumeLabels configuration labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "VolumeLabels"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate": {
      "description": "VolumeSpecUpdate provides a method to set any of the VolumeSpec of an existing volume",
      "type": "object",
      "properties": {
        "CosOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_CosOpt"
        },
        "DedupeOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_DedupeOpt"
        },
        "GroupOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_GroupOpt"
        },
        "HaLevelOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_HaLevelOpt"
        },
        "IoProfileOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_IoProfileOpt"
        },
        "JournalOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_JournalOpt"
        },
        "PassphraseOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_PassphraseOpt"
        },
        "QueueDepthOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_QueueDepthOpt"
        },
        "ScaleOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_ScaleOpt"
        },
        "SharedOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_SharedOpt"
        },
        "Sharedv4Opt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_Sharedv4Opt"
        },
        "SizeOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_SizeOpt"
        },
        "SnapshotIntervalOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_SnapshotIntervalOpt"
        },
        "SnapshotScheduleOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_SnapshotScheduleOpt"
        },
        "StickyOpt": {
          "$ref": "#/definitions/isVolumeSpecUpdate_StickyOpt"
        },
        "replica_set": {
          "$ref": "#/definitions/ReplicaSet"
        },
        "volume_labels": {
          "description": "VolumeLabels configuration labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "VolumeLabels"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Cos": {
      "type": "object",
      "properties": {
        "Cos": {
          "$ref": "#/definitions/CosType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Dedupe": {
      "type": "object",
      "properties": {
        "Dedupe": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Group": {
      "type": "object",
      "properties": {
        "Group": {
          "$ref": "#/definitions/Group"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_HaLevel": {
      "type": "object",
      "properties": {
        "HaLevel": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_IoProfile": {
      "type": "object",
      "properties": {
        "IoProfile": {
          "$ref": "#/definitions/IoProfile"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Journal": {
      "type": "object",
      "properties": {
        "Journal": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Passphrase": {
      "type": "object",
      "properties": {
        "Passphrase": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_QueueDepth": {
      "type": "object",
      "properties": {
        "QueueDepth": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Scale": {
      "type": "object",
      "properties": {
        "Scale": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Shared": {
      "type": "object",
      "properties": {
        "Shared": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Sharedv4": {
      "type": "object",
      "properties": {
        "Sharedv4": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Size": {
      "type": "object",
      "properties": {
        "Size": {
          "type": "integer",
          "format": "uint64"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_SnapshotInterval": {
      "type": "object",
      "properties": {
        "SnapshotInterval": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_SnapshotSchedule": {
      "type": "object",
      "properties": {
        "SnapshotSchedule": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeSpecUpdate_Sticky": {
      "type": "object",
      "properties": {
        "Sticky": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeState": {
      "type": "integer",
      "format": "int32",
      "title": "VolumeState represents the state of a volume.",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeStateAction": {
      "type": "object",
      "title": "VolumeStateAction specifies desired actions.",
      "properties": {
        "attach": {
          "$ref": "#/definitions/VolumeActionParam"
        },
        "device_path": {
          "description": "DevicePath Path returned in attach",
          "type": "string",
          "x-go-name": "DevicePath"
        },
        "mount": {
          "$ref": "#/definitions/VolumeActionParam"
        },
        "mount_path": {
          "description": "MountPath Path where the device is mounted",
          "type": "string",
          "x-go-name": "MountPath"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VolumeStatus": {
      "type": "integer",
      "format": "int32",
      "title": "VolumeStatus represents a health status for a volume.",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkAlertsOption_Opt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkAlertsQuery_Query": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkCredentialCreateRequest_CredentialType": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkCredentialInspectResponse_CredentialType": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkSchedulePolicyInterval_PeriodType": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isSdkServiceCapability_Type": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_CosOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_DedupeOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_GroupOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_HaLevelOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_IoProfileOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_JournalOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_PassphraseOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_QueueDepthOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_ScaleOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_SharedOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_Sharedv4Opt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_SizeOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_SnapshotIntervalOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_SnapshotScheduleOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "isVolumeSpecUpdate_StickyOpt": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageAlertsClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageCloudBackupClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageClusterClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageCredentialsClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageIdentityClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageMountAttachClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageNodeClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageObjectstoreClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageSchedulePolicyClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "openStorageVolumeClient": {
      "type": "object",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    }
  },
  "responses": {
    "ClusterPairCreateResponse": {
      "description": "Response for a pair request",
      "headers": {
        "remote_cluster_id": {
          "type": "string",
          "description": "ID of the remote cluster"
        },
        "remote_cluster_name": {
          "type": "string",
          "description": "Name of the remote cluster"
        }
      }
    },
    "ClusterPairGetResponse": {
      "description": "Reponse to get a cluster pair",
      "schema": {
        "$ref": "#/definitions/ClusterPairInfo"
      }
    },
    "ClusterPairProcessResponse": {
      "description": "Response after a pairing has been processed",
      "schema": {
        "type": "object",
        "items": {
          "type": "string"
        },
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "ClusterPairsEnumerateResponse": {
      "description": "Response to enumerate all the cluster pairs",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/ClusterPairInfo"
        }
      }
    },
    "clusterResponse": {
      "description": "ClusterResponse specifies a response that gets returned when requesting the cluster"
    },
    "groupSnapCreateResponse": {
      "description": "GroupSnapCreateRequest specifies a response that get's returned when creating a group snapshot.",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/SnapCreateResponse"
        }
      }
    },
    "snapCreateResponse": {
      "description": "SnapCreateRequest specifies a response that get's returned when creating a snapshot.",
      "schema": {
        "$ref": "#/definitions/VolumeCreateResponse"
      }
    },
    "volumeCreateResponse": {
      "description": "VolumeCreateResponse",
      "schema": {
        "$ref": "#/definitions/VolumeResponse"
      }
    },
    "volumeResponse": {
      "description": "VolumeResponse is a structure that wraps an error."
    },
    "volumeSetResponse": {
      "description": "VolumeSetResponse",
      "schema": {
        "$ref": "#/definitions/VolumeResponse"
      }
    }
  }
}