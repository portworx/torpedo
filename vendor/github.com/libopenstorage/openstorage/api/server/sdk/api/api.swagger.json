{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "LabelSelectorRequirementOperator": {
      "default": "In",
      "description": "- In: In means the value for 'key' should be in one of the given 'values'\n - NotIn: NotIn means the value for 'key' should NOT be in one of the given 'values'\n - Exists: Exists means the 'key' should just exist regardless of the value\n - DoesNotExist: DoesNotExist means the 'key' should NOT exist",
      "enum": [
        "In",
        "NotIn",
        "Exists",
        "DoesNotExist"
      ],
      "title": "This defines operator types used in a label matching rule",
      "type": "string"
    },
    "SdkServiceCapabilityOpenStorageService": {
      "properties": {
        "type": {
          "$ref": "#/definitions/SdkServiceCapabilityOpenStorageServiceType",
          "title": "Type of service supported"
        }
      },
      "type": "object"
    },
    "SdkServiceCapabilityOpenStorageServiceType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "CLUSTER",
        "CLOUD_BACKUP",
        "CREDENTIALS",
        "NODE",
        "OBJECT_STORAGE",
        "SCHEDULE_POLICY",
        "VOLUME",
        "ALERTS",
        "MOUNT_ATTACH"
      ],
      "title": "- UNKNOWN: Unknown service\n - CLUSTER: Cluster management\n - CLOUD_BACKUP: Cloud backup of volumes management\n - CREDENTIALS: Credentials management\n - NODE: Node management\n - OBJECT_STORAGE: Object Storage management\n - SCHEDULE_POLICY: Schedule policy management\n - VOLUME: Volume management\n - ALERTS: Alert enumeration\n - MOUNT_ATTACH: Mount/Attach Support",
      "type": "string"
    },
    "VolumePlacementRuleEnforcementType": {
      "default": "Required",
      "description": "- Required: This specifies that the rule is required and must be strictly enforced\n - Preferred: This specifies that the rule is preferred and can be best effort",
      "enum": [
        "Required",
        "Preferred"
      ],
      "title": "Defines the types of enforcement on the given rules",
      "type": "string"
    },
    "apiAffinityRule": {
      "properties": {
        "match_expressions": {
          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/apiLabelSelectorRequirement"
          },
          "type": "array"
        }
      },
      "title": "AffinityRule specifies the label matching rules for an affinity or anti-affinity",
      "type": "object"
    },
    "apiAlert": {
      "properties": {
        "alert_type": {
          "format": "int64",
          "title": "AlertType user defined alert type",
          "type": "string"
        },
        "cleared": {
          "format": "boolean",
          "title": "Cleared Flag",
          "type": "boolean"
        },
        "count": {
          "description": "Count of such alerts raised so far.",
          "format": "int64",
          "type": "string"
        },
        "first_seen": {
          "description": "Timestamp when such alert was raised the very first time.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "title": "Id for Alert",
          "type": "string"
        },
        "message": {
          "title": "Message describing the Alert",
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/apiResourceType",
          "title": "Resource where Alert occured"
        },
        "resource_id": {
          "title": "ResourceId where Alert occured",
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/apiSeverityType",
          "title": "Severity of the Alert"
        },
        "timestamp": {
          "format": "date-time",
          "title": "Timestamp when Alert occured",
          "type": "string"
        },
        "ttl": {
          "format": "uint64",
          "title": "Time-to-live in seconds for this Alert",
          "type": "string"
        },
        "unique_tag": {
          "title": "UniqueTag helps identify a unique alert for a given resouce",
          "type": "string"
        }
      },
      "title": "Alert is a structure that represents an alert object",
      "type": "object"
    },
    "apiAttachState": {
      "default": "ATTACH_STATE_EXTERNAL",
      "enum": [
        "ATTACH_STATE_EXTERNAL",
        "ATTACH_STATE_INTERNAL",
        "ATTACH_STATE_INTERNAL_SWITCH"
      ],
      "title": "- ATTACH_STATE_EXTERNAL: Attached and available externally\n - ATTACH_STATE_INTERNAL: Attached but only available internally\n - ATTACH_STATE_INTERNAL_SWITCH: Switching from External to Internal",
      "type": "string"
    },
    "apiCosType": {
      "default": "NONE",
      "enum": [
        "NONE",
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "type": "string"
    },
    "apiFSType": {
      "default": "FS_TYPE_NONE",
      "enum": [
        "FS_TYPE_NONE",
        "FS_TYPE_BTRFS",
        "FS_TYPE_EXT4",
        "FS_TYPE_FUSE",
        "FS_TYPE_NFS",
        "FS_TYPE_VFS",
        "FS_TYPE_XFS",
        "FS_TYPE_ZFS",
        "FS_TYPE_XFSv2"
      ],
      "type": "string"
    },
    "apiGroup": {
      "properties": {
        "id": {
          "description": "Id common identifier across volumes that have the same group.",
          "type": "string"
        }
      },
      "title": "Group represents VolumeGroup / namespace\nAll volumes in the same group share this object.\nswagger:model",
      "type": "object"
    },
    "apiIoProfile": {
      "default": "IO_PROFILE_SEQUENTIAL",
      "enum": [
        "IO_PROFILE_SEQUENTIAL",
        "IO_PROFILE_RANDOM",
        "IO_PROFILE_DB",
        "IO_PROFILE_DB_REMOTE",
        "IO_PROFILE_CMS"
      ],
      "type": "string"
    },
    "apiIoStrategy": {
      "description": "IoStrategy defines how I/O should be performed to backing storage media.",
      "properties": {
        "async_io": {
          "description": "AsyncIO enables kaio.",
          "format": "boolean",
          "type": "boolean"
        },
        "early_ack": {
          "description": "EarlyAck enables acks for async I/O at the source.",
          "format": "boolean",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "apiLabelSelectorRequirement": {
      "description": "LabelSelectorRequirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
      "properties": {
        "key": {
          "description": "Key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/LabelSelectorRequirementOperator",
          "description": "Operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "description": "Values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apiObjectstoreInfo": {
      "properties": {
        "access_key": {
          "title": "AccessKey for login into objectstore",
          "type": "string"
        },
        "access_port": {
          "format": "int64",
          "title": "AccessPort is objectstore server port",
          "type": "string"
        },
        "action": {
          "format": "int64",
          "title": "Action being taken on this objectstore",
          "type": "string"
        },
        "current_endpoint": {
          "title": "CurrentEndpoint on which objectstore server is accessible",
          "type": "string"
        },
        "enabled": {
          "format": "boolean",
          "title": "Enable/Disable created objectstore",
          "type": "boolean"
        },
        "endpoints": {
          "items": {
            "type": "string"
          },
          "title": "Endpoints for accessing objectstore",
          "type": "array"
        },
        "region": {
          "title": "Region for this objectstore",
          "type": "string"
        },
        "secret_key": {
          "title": "SecretKey for login into objectstore",
          "type": "string"
        },
        "status": {
          "title": "Status of objectstore running/failed",
          "type": "string"
        },
        "uuid": {
          "title": "UUID of objectstore",
          "type": "string"
        },
        "volume_id": {
          "title": "VolumeID of volume used by object store",
          "type": "string"
        }
      },
      "title": "ObjectstoreInfo is a structure that has current objectstore info\nswagger:model",
      "type": "object"
    },
    "apiReplicaSet": {
      "properties": {
        "nodes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "ReplicaSet set of machine IDs (nodes) to which part of this volume is erasure\ncoded - for clustered storage arrays\nswagger:model",
      "type": "object"
    },
    "apiResourceType": {
      "default": "RESOURCE_TYPE_NONE",
      "enum": [
        "RESOURCE_TYPE_NONE",
        "RESOURCE_TYPE_VOLUME",
        "RESOURCE_TYPE_NODE",
        "RESOURCE_TYPE_CLUSTER",
        "RESOURCE_TYPE_DRIVE"
      ],
      "type": "string"
    },
    "apiRuntimeStateMap": {
      "properties": {
        "runtime_state": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "title": "RuntimeStateMap is a list of name value mapping of driver specific runtime\ninformation.\nswagger:model",
      "type": "object"
    },
    "apiSdkAlertsAlertTypeQuery": {
      "description": "SdkAlertsAlertTypeQuery queries for alerts using alert type\nand it requires that resource type be provided as well.",
      "properties": {
        "alert_type": {
          "description": "Alert type used to build query.",
          "format": "int64",
          "type": "string"
        },
        "resource_type": {
          "$ref": "#/definitions/apiResourceType",
          "description": "Resource type used to build query."
        }
      },
      "type": "object"
    },
    "apiSdkAlertsCountSpan": {
      "description": "SdkAlertsCountSpan to store count range information.",
      "properties": {
        "max_count": {
          "description": "Max count of such alerts raised so far.",
          "format": "int64",
          "type": "string"
        },
        "min_count": {
          "description": "Min count of such alerts raised so far.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "apiSdkAlertsDeleteResponse": {
      "description": "SdkAlertsDeleteResponse is empty.",
      "type": "object"
    },
    "apiSdkAlertsEnumerateResponse": {
      "description": "SdkAlertsEnumerateResponse is a list of alerts.",
      "properties": {
        "alerts": {
          "description": "Response contains a list of alerts.",
          "items": {
            "$ref": "#/definitions/apiAlert"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apiSdkAlertsOption": {
      "description": "SdkAlertsOption contains options for filtering alerts.",
      "properties": {
        "count_span": {
          "$ref": "#/definitions/apiSdkAlertsCountSpan",
          "description": "Query using a count span in which alert count exists."
        },
        "is_cleared": {
          "description": "Query using cleared flag.",
          "format": "boolean",
          "type": "boolean"
        },
        "min_severity_type": {
          "$ref": "#/definitions/apiSeverityType",
          "description": "Query using minimum severity type."
        },
        "time_span": {
          "$ref": "#/definitions/apiSdkAlertsTimeSpan",
          "description": "Query using a time span during which alert was last seen."
        }
      },
      "type": "object"
    },
    "apiSdkAlertsQuery": {
      "description": "SdkAlertsQuery is one of the query types and a list of options.\nEach query object is one of the three query types and a list of\noptions.",
      "properties": {
        "alert_type_query": {
          "$ref": "#/definitions/apiSdkAlertsAlertTypeQuery",
          "description": "Query using alert type and resource type."
        },
        "opts": {
          "description": "Opts is a list of options associated with one of the queries.",
          "items": {
            "$ref": "#/definitions/apiSdkAlertsOption"
          },
          "type": "array"
        },
        "resource_id_query": {
          "$ref": "#/definitions/apiSdkAlertsResourceIdQuery",
          "description": "Query using resource id, alert type and resource type."
        },
        "resource_type_query": {
          "$ref": "#/definitions/apiSdkAlertsResourceTypeQuery",
          "description": "Query only using resource type."
        }
      },
      "type": "object"
    },
    "apiSdkAlertsResourceIdQuery": {
      "description": "SdkAlertsResourceIdQuery queries for alerts using resource id\nand it requires that both alert type and resource type be provided\nas well.",
      "properties": {
        "alert_type": {
          "description": "Alert type used to build query.",
          "format": "int64",
          "type": "string"
        },
        "resource_id": {
          "description": "Resource ID used to build query.",
          "type": "string"
        },
        "resource_type": {
          "$ref": "#/definitions/apiResourceType",
          "description": "Resource type used to build query."
        }
      },
      "type": "object"
    },
    "apiSdkAlertsResourceTypeQuery": {
      "description": "SdkAlertsResourceTypeQuery queries for alerts using only resource id.",
      "properties": {
        "resource_type": {
          "$ref": "#/definitions/apiResourceType",
          "description": "Resource type used to build query."
        }
      },
      "type": "object"
    },
    "apiSdkAlertsTimeSpan": {
      "description": "SdkAlertsTimeSpan to store time window information.",
      "properties": {
        "end_time": {
          "format": "date-time",
          "title": "End timestamp when Alert occured",
          "type": "string"
        },
        "start_time": {
          "format": "date-time",
          "title": "Start timestamp when Alert occured",
          "type": "string"
        }
      },
      "type": "object"
    },
    "apiSdkAwsCredentialRequest": {
      "properties": {
        "access_key": {
          "title": "Access key",
          "type": "string"
        },
        "disable_ssl": {
          "format": "boolean",
          "title": "(optional) Disable SSL connection",
          "type": "boolean"
        },
        "endpoint": {
          "title": "Endpoint",
          "type": "string"
        },
        "region": {
          "title": "Region",
          "type": "string"
        },
        "secret_key": {
          "title": "Secret key",
          "type": "string"
        }
      },
      "title": "Defines credentials for Aws/S3 endpoints",
      "type": "object"
    },
    "apiSdkAwsCredentialResponse": {
      "properties": {
        "access_key": {
          "title": "Access key",
          "type": "string"
        },
        "disable_ssl": {
          "format": "boolean",
          "title": "(optional) Disable SSL connection",
          "type": "boolean"
        },
        "endpoint": {
          "title": "Endpoint",
          "type": "string"
        },
        "region": {
          "title": "Region",
          "type": "string"
        }
      },
      "title": "Defines the response for AWS/S3 credentials",
      "type": "object"
    },
    "apiSdkAzureCredentialRequest": {
      "properties": {
        "account_key": {
          "title": "Account key",
          "type": "string"
        },
        "account_name": {
          "title": "Account name",
          "type": "string"
        }
      },
      "title": "Defines credentials for Azure",
      "type": "object"
    },
    "apiSdkAzureCredentialResponse": {
      "properties": {
        "account_name": {
          "title": "Account name",
          "type": "string"
        }
      },
      "title": "Defines the response for Azure credentials",
      "type": "object"
    },
    "apiSdkCloudBackupCatalogResponse": {
      "properties": {
        "contents": {
          "items": {
            "type": "string"
          },
          "title": "Contents is listing of backup contents",
          "type": "array"
        }
      },
      "title": "Defines a response containing the contents of a backup stored by a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupCreateRequest": {
      "properties": {
        "credential_id": {
          "title": "Credential id refers to the cloud credentials needed to backup",
          "type": "string"
        },
        "full": {
          "format": "boolean",
          "title": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the task performing this backup. This value is required and used for\nidempotency.",
          "type": "string"
        },
        "volume_id": {
          "title": "VolumeID of the volume for which cloudbackup is requested",
          "type": "string"
        }
      },
      "title": "Defines a request to create a backup of a volume to the cloud",
      "type": "object"
    },
    "apiSdkCloudBackupCreateResponse": {
      "properties": {
        "name": {
          "title": "Name of the task performing the backup",
          "type": "string"
        }
      },
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCloudBackupDeleteAllRequest": {
      "properties": {
        "credential_id": {
          "title": "Credential id is the credential for cloud to be used for the request",
          "type": "string"
        },
        "src_volume_id": {
          "title": "id of the volume for the request",
          "type": "string"
        }
      },
      "title": "Defines a request to delete all the backups stored by a cloud provider\nfor a specified volume",
      "type": "object"
    },
    "apiSdkCloudBackupDeleteAllResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCloudBackupDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCloudBackupEnumerateResponse": {
      "properties": {
        "backups": {
          "items": {
            "$ref": "#/definitions/apiSdkCloudBackupInfo"
          },
          "type": "array"
        }
      },
      "title": "Defines a response which lists all the backups stored by a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupHistoryItem": {
      "properties": {
        "src_volume_id": {
          "title": "SrcVolumeID is volume ID which was backedup",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "Status indicates whether backup was completed/failed"
        },
        "timestamp": {
          "format": "date-time",
          "title": "TimeStamp is the time at which either backup completed/failed",
          "type": "string"
        }
      },
      "title": "SdkCloudBackupHistoryItem contains information about a backup for a\nspecific volume",
      "type": "object"
    },
    "apiSdkCloudBackupHistoryResponse": {
      "properties": {
        "history_list": {
          "items": {
            "$ref": "#/definitions/apiSdkCloudBackupHistoryItem"
          },
          "title": "HistoryList is list of past backups on this volume",
          "type": "array"
        }
      },
      "title": "Defines a response containing a list of history of backups to a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupInfo": {
      "properties": {
        "id": {
          "title": "This is the id as represented by the cloud provider",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata associated with the backup",
          "type": "object"
        },
        "src_volume_id": {
          "title": "Source volumeID of the backup",
          "type": "string"
        },
        "src_volume_name": {
          "title": "Name of the sourceVolume of the backup",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "Status indicates the status of the backup"
        },
        "timestamp": {
          "format": "date-time",
          "title": "Timestamp is the timestamp at which the source volume\nwas backed up to cloud",
          "type": "string"
        }
      },
      "title": "SdkCloudBackupInfo has information about a backup stored by a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupOpType": {
      "default": "SdkCloudBackupOpTypeUnknown",
      "description": "- SdkCloudBackupOpTypeUnknown: Unknown\n - SdkCloudBackupOpTypeBackupOp: Backup\n - SdkCloudBackupOpTypeRestoreOp: Restore",
      "enum": [
        "SdkCloudBackupOpTypeUnknown",
        "SdkCloudBackupOpTypeBackupOp",
        "SdkCloudBackupOpTypeRestoreOp"
      ],
      "title": "CloudBackup operations types",
      "type": "string"
    },
    "apiSdkCloudBackupRequestedState": {
      "default": "SdkCloudBackupRequestedStateUnknown",
      "description": "- SdkCloudBackupRequestedStateUnknown: Unknown state\n - SdkCloudBackupRequestedStatePause: Pause the backup or restore\n - SdkCloudBackupRequestedStateResume: Resume the backup or restore\n - SdkCloudBackupRequestedStateStop: Stop a backup or restore",
      "enum": [
        "SdkCloudBackupRequestedStateUnknown",
        "SdkCloudBackupRequestedStatePause",
        "SdkCloudBackupRequestedStateResume",
        "SdkCloudBackupRequestedStateStop"
      ],
      "title": "SdkCloudBackupRequestedState defines states to set a specified backup or restore\nto or from a cloud provider",
      "type": "string"
    },
    "apiSdkCloudBackupRestoreRequest": {
      "properties": {
        "backup_id": {
          "title": "Backup ID being restored",
          "type": "string"
        },
        "credential_id": {
          "title": "The credential to be used for restore operation",
          "type": "string"
        },
        "name": {
          "title": "Name of the task performing this restore",
          "type": "string"
        },
        "node_id": {
          "title": "Optional for provisioning restore\nvolume (ResoreVolumeName should not be specified)",
          "type": "string"
        },
        "restore_volume_name": {
          "title": "Optional volume Name of the new volume to be created\nin the cluster for restoring the cloudbackup",
          "type": "string"
        }
      },
      "title": "Defines a request to restore a volume from an existing backup stored by\na cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupRestoreResponse": {
      "properties": {
        "name": {
          "title": "Name of the task performing the restore",
          "type": "string"
        },
        "restore_volume_id": {
          "title": "VolumeID to which the backup is being restored",
          "type": "string"
        }
      },
      "title": "Defines a response when restoring a volume from a backup stored by\na cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupSchedCreateRequest": {
      "properties": {
        "cloud_sched_info": {
          "$ref": "#/definitions/apiSdkCloudBackupScheduleInfo",
          "title": "Cloud Backup Schedule info"
        }
      },
      "title": "Defines a request to create a schedule for volume backups to a\ncloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupSchedCreateResponse": {
      "properties": {
        "backup_schedule_id": {
          "title": "Id of newly created backup schedule",
          "type": "string"
        }
      },
      "title": "Defines a response containing the id of a schedule for a volume backup\nto a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupSchedDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCloudBackupSchedEnumerateResponse": {
      "properties": {
        "cloud_sched_list": {
          "additionalProperties": {
            "$ref": "#/definitions/apiSdkCloudBackupScheduleInfo"
          },
          "title": "Returns list of backup schedules",
          "type": "object"
        }
      },
      "title": "Defines a response containing a map listing the schedules for volume\nbackups to a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupScheduleInfo": {
      "properties": {
        "credential_id": {
          "title": "The cloud credential used with this schedule",
          "type": "string"
        },
        "full": {
          "description": "Full indicates if scheduled backups should always be full and never incremental.",
          "format": "boolean",
          "type": "boolean"
        },
        "max_backups": {
          "format": "uint64",
          "title": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "string"
        },
        "schedules": {
          "items": {
            "$ref": "#/definitions/apiSdkSchedulePolicyInterval"
          },
          "title": "Schedules are the frequencies of the backup",
          "type": "array"
        },
        "src_volume_id": {
          "title": "The schedule's source volume",
          "type": "string"
        }
      },
      "title": "SdkCloudBackupScheduleInfo describes a schedule for volume backups to\na cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupStateChangeRequest": {
      "properties": {
        "name": {
          "title": "Describes the backup/restore Name\nstate change is being requested",
          "type": "string"
        },
        "requested_state": {
          "$ref": "#/definitions/apiSdkCloudBackupRequestedState",
          "title": "The desired state of the operation"
        }
      },
      "title": "Defines a request to change the state of a backup or restore to or\nfrom a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupStateChangeResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCloudBackupStatus": {
      "properties": {
        "backup_id": {
          "title": "This is the id as represented by the cloud provider",
          "type": "string"
        },
        "bytes_done": {
          "format": "uint64",
          "title": "BytesDone indicates total Bytes uploaded/downloaded",
          "type": "string"
        },
        "completed_time": {
          "format": "date-time",
          "title": "CompletedTime indicates Op's completed time",
          "type": "string"
        },
        "info": {
          "items": {
            "type": "string"
          },
          "title": "Info currently indicates the failure cause for failed backup/restore",
          "type": "array"
        },
        "node_id": {
          "title": "NodeID is the ID of the node where this Op is active",
          "type": "string"
        },
        "optype": {
          "$ref": "#/definitions/apiSdkCloudBackupOpType",
          "title": "OpType indicates if this is a backup or restore"
        },
        "src_volume_id": {
          "title": "SourceVolumeID is the the volume that is either being backed up to cloud\nor target volume to which a backup is being restored",
          "type": "string"
        },
        "start_time": {
          "format": "date-time",
          "title": "StartTime indicates Op's start time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "State indicates if the op is currently active/done/failed"
        }
      },
      "title": "SdkCloudBackupStatus defines the status of a backup stored by a cloud provider",
      "type": "object"
    },
    "apiSdkCloudBackupStatusResponse": {
      "properties": {
        "statuses": {
          "additionalProperties": {
            "$ref": "#/definitions/apiSdkCloudBackupStatus"
          },
          "description": "Statuses is list of currently active/failed/done backup/restores where\nthe key is the id of the task performing backup/restore.",
          "type": "object"
        }
      },
      "title": "Defines a response containing the status of the backups for a specified volume",
      "type": "object"
    },
    "apiSdkCloudBackupStatusType": {
      "default": "SdkCloudBackupStatusTypeUnknown",
      "description": "- SdkCloudBackupStatusTypeUnknown: Unkonwn\n - SdkCloudBackupStatusTypeNotStarted: Not started\n - SdkCloudBackupStatusTypeDone: Done\n - SdkCloudBackupStatusTypeAborted: Aborted\n - SdkCloudBackupStatusTypePaused: Paused\n - SdkCloudBackupStatusTypeStopped: Stopped\n - SdkCloudBackupStatusTypeActive: Active\n - SdkCloudBackupStatusTypeFailed: Failed",
      "enum": [
        "SdkCloudBackupStatusTypeUnknown",
        "SdkCloudBackupStatusTypeNotStarted",
        "SdkCloudBackupStatusTypeDone",
        "SdkCloudBackupStatusTypeAborted",
        "SdkCloudBackupStatusTypePaused",
        "SdkCloudBackupStatusTypeStopped",
        "SdkCloudBackupStatusTypeActive",
        "SdkCloudBackupStatusTypeFailed"
      ],
      "title": "CloudBackup status types",
      "type": "string"
    },
    "apiSdkClusterInspectCurrentResponse": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/apiStorageCluster",
          "title": "Cluster information"
        }
      },
      "title": "Defines a response when inspecting the current cluster",
      "type": "object"
    },
    "apiSdkCredentialCreateRequest": {
      "properties": {
        "aws_credential": {
          "$ref": "#/definitions/apiSdkAwsCredentialRequest",
          "title": "Credentials for AWS/S3"
        },
        "azure_credential": {
          "$ref": "#/definitions/apiSdkAzureCredentialRequest",
          "title": "Credentials for Azure"
        },
        "bucket": {
          "title": "(optional) Name of bucket",
          "type": "string"
        },
        "encryption_key": {
          "title": "(optional) Key used to encrypt the data",
          "type": "string"
        },
        "google_credential": {
          "$ref": "#/definitions/apiSdkGoogleCredentialRequest",
          "title": "Credentials for Google"
        },
        "name": {
          "title": "Name of the credential",
          "type": "string"
        }
      },
      "title": "Defines a request to create credentials",
      "type": "object"
    },
    "apiSdkCredentialCreateResponse": {
      "properties": {
        "credential_id": {
          "title": "Id of the credentials",
          "type": "string"
        }
      },
      "title": "Defines a response from creating a credential",
      "type": "object"
    },
    "apiSdkCredentialDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkCredentialEnumerateResponse": {
      "properties": {
        "credential_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of credentials",
          "type": "array"
        }
      },
      "title": "Defines response for a enumeration of credentials",
      "type": "object"
    },
    "apiSdkCredentialInspectResponse": {
      "description": "Defines the response to an inspection of a credential.\nThis response uses OneOf proto style. Depending on your programming language\nyou will need to check if the value of credential_type is one of the ones below.",
      "properties": {
        "aws_credential": {
          "$ref": "#/definitions/apiSdkAwsCredentialResponse",
          "title": "Aws credentials"
        },
        "azure_credential": {
          "$ref": "#/definitions/apiSdkAzureCredentialResponse",
          "title": "Azure credentials"
        },
        "bucket": {
          "title": "(optional) Name of bucket",
          "type": "string"
        },
        "credential_id": {
          "title": "Credential id",
          "type": "string"
        },
        "google_credential": {
          "$ref": "#/definitions/apiSdkGoogleCredentialResponse",
          "title": "Google credentials"
        },
        "name": {
          "title": "Name of the credential",
          "type": "string"
        }
      },
      "type": "object"
    },
    "apiSdkCredentialValidateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkGoogleCredentialRequest": {
      "properties": {
        "json_key": {
          "title": "JSON Key",
          "type": "string"
        },
        "project_id": {
          "title": "Project ID",
          "type": "string"
        }
      },
      "title": "Defines credentials for Google",
      "type": "object"
    },
    "apiSdkGoogleCredentialResponse": {
      "properties": {
        "project_id": {
          "title": "Project ID",
          "type": "string"
        }
      },
      "title": "Defines the response for Google credentials",
      "type": "object"
    },
    "apiSdkIdentityCapabilitiesResponse": {
      "properties": {
        "capabilities": {
          "items": {
            "$ref": "#/definitions/apiSdkServiceCapability"
          },
          "title": "Provides all the capabilites supported by the cluster",
          "type": "array"
        }
      },
      "title": "Defines a response containing the capabilites of the cluster",
      "type": "object"
    },
    "apiSdkIdentityVersionResponse": {
      "properties": {
        "sdk_version": {
          "$ref": "#/definitions/apiSdkVersion",
          "title": "OpenStorage SDK version used by the server"
        },
        "version": {
          "$ref": "#/definitions/apiStorageVersion",
          "title": "Version information about the storage system"
        }
      },
      "title": "Defines a response containing version information",
      "type": "object"
    },
    "apiSdkNodeEnumerateResponse": {
      "properties": {
        "node_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of all the node ids in the cluster",
          "type": "array"
        }
      },
      "title": "Defines a response with a list of nodes",
      "type": "object"
    },
    "apiSdkNodeInspectCurrentResponse": {
      "properties": {
        "node": {
          "$ref": "#/definitions/apiStorageNode",
          "title": "Node information"
        }
      },
      "title": "Defines a response when inspecting a node",
      "type": "object"
    },
    "apiSdkNodeInspectResponse": {
      "properties": {
        "node": {
          "$ref": "#/definitions/apiStorageNode",
          "title": "Node information"
        }
      },
      "title": "Defines a response when inspecting a node",
      "type": "object"
    },
    "apiSdkObjectstoreCreateRequest": {
      "properties": {
        "volume_id": {
          "title": "Volume on which objectstore will be running",
          "type": "string"
        }
      },
      "title": "Defines a request to create an object store",
      "type": "object"
    },
    "apiSdkObjectstoreCreateResponse": {
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/apiObjectstoreInfo",
          "title": "Created objecstore status"
        }
      },
      "title": "Defines a response when an object store has been created for a\nspecified volume",
      "type": "object"
    },
    "apiSdkObjectstoreDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkObjectstoreInspectResponse": {
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/apiObjectstoreInfo",
          "title": "Contains information about the object store requested"
        }
      },
      "title": "Defines a response when inspecting an object store endpoint",
      "type": "object"
    },
    "apiSdkObjectstoreUpdateRequest": {
      "properties": {
        "enable": {
          "format": "boolean",
          "title": "enable/disable objectstore",
          "type": "boolean"
        },
        "objectstore_id": {
          "title": "Objectstore Id to update",
          "type": "string"
        }
      },
      "title": "Defines a request to update an object store",
      "type": "object"
    },
    "apiSdkObjectstoreUpdateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkSchedulePolicy": {
      "properties": {
        "name": {
          "title": "Name of the schedule policy",
          "type": "string"
        },
        "schedules": {
          "items": {
            "$ref": "#/definitions/apiSdkSchedulePolicyInterval"
          },
          "title": "Schedule policies",
          "type": "array"
        }
      },
      "title": "Defines a schedule policy",
      "type": "object"
    },
    "apiSdkSchedulePolicyCreateRequest": {
      "properties": {
        "schedule_policy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "Schedule Policy"
        }
      },
      "title": "Define a schedule policy request",
      "type": "object"
    },
    "apiSdkSchedulePolicyCreateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkSchedulePolicyDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkSchedulePolicyEnumerateResponse": {
      "properties": {
        "policies": {
          "items": {
            "$ref": "#/definitions/apiSdkSchedulePolicy"
          },
          "title": "List of Schedule Policy",
          "type": "array"
        }
      },
      "title": "Defines a schedule policy enumerate response",
      "type": "object"
    },
    "apiSdkSchedulePolicyInspectResponse": {
      "properties": {
        "policy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "List of Schedule Policy"
        }
      },
      "title": "Defines a schedule policy inspection response",
      "type": "object"
    },
    "apiSdkSchedulePolicyInterval": {
      "properties": {
        "daily": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalDaily",
          "title": "Daily policy"
        },
        "monthly": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalMonthly",
          "title": "Monthly policy"
        },
        "periodic": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalPeriodic",
          "title": "Periodic policy"
        },
        "retain": {
          "format": "int64",
          "title": "Number of instances to retain",
          "type": "string"
        },
        "weekly": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalWeekly",
          "title": "Weekly policy"
        }
      },
      "title": "Defines a schedule policy interval",
      "type": "object"
    },
    "apiSdkSchedulePolicyIntervalDaily": {
      "properties": {
        "hour": {
          "format": "int32",
          "title": "Range: 0-23",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "title": "Range: 0-59",
          "type": "integer"
        }
      },
      "title": "Defines a daily schedule",
      "type": "object"
    },
    "apiSdkSchedulePolicyIntervalMonthly": {
      "properties": {
        "day": {
          "format": "int32",
          "title": "Range: 1-28",
          "type": "integer"
        },
        "hour": {
          "format": "int32",
          "title": "Range: 0-59",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "title": "Range: 0-59",
          "type": "integer"
        }
      },
      "title": "Defines a monthly schedule",
      "type": "object"
    },
    "apiSdkSchedulePolicyIntervalPeriodic": {
      "properties": {
        "seconds": {
          "format": "int64",
          "title": "Specify the number of seconds between intervals",
          "type": "string"
        }
      },
      "title": "Defines a periodic schedule",
      "type": "object"
    },
    "apiSdkSchedulePolicyIntervalWeekly": {
      "properties": {
        "day": {
          "$ref": "#/definitions/apiSdkTimeWeekday"
        },
        "hour": {
          "format": "int32",
          "title": "Range: 0-23",
          "type": "integer"
        },
        "minute": {
          "format": "int32",
          "title": "Range: 0-59",
          "type": "integer"
        }
      },
      "title": "Defines a weekly schedule",
      "type": "object"
    },
    "apiSdkSchedulePolicyUpdateRequest": {
      "properties": {
        "schedule_policy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "Schedule Policy"
        }
      },
      "title": "Define a request to update a schedule policy",
      "type": "object"
    },
    "apiSdkSchedulePolicyUpdateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkServiceCapability": {
      "properties": {
        "service": {
          "$ref": "#/definitions/SdkServiceCapabilityOpenStorageService",
          "title": "service type supported by this cluster"
        }
      },
      "title": "Defines a capability of he cluster",
      "type": "object"
    },
    "apiSdkTimeWeekday": {
      "default": "SdkTimeWeekdaySunday",
      "description": "- SdkTimeWeekdaySunday: Sunday\n - SdkTimeWeekdayMonday: Monday\n - SdkTimeWeekdayTuesday: Tuesday\n - SdkTimeWeekdayWednesday: Wednesday\n - SdkTimeWeekdayThursday: Thursday\n - SdkTimeWeekdayFriday: Friday\n - SdkTimeWeekdaySaturday: Saturday",
      "enum": [
        "SdkTimeWeekdaySunday",
        "SdkTimeWeekdayMonday",
        "SdkTimeWeekdayTuesday",
        "SdkTimeWeekdayWednesday",
        "SdkTimeWeekdayThursday",
        "SdkTimeWeekdayFriday",
        "SdkTimeWeekdaySaturday"
      ],
      "title": "Defines times of day",
      "type": "string"
    },
    "apiSdkVersion": {
      "description": "SDK version in Major.Minor.Patch format. The goal of this\nmessage is to provide clients a method to determine the SDK\nversion run by an SDK server.",
      "properties": {
        "major": {
          "format": "int32",
          "title": "SDK version major number",
          "type": "integer"
        },
        "minor": {
          "format": "int32",
          "title": "SDK version minor number",
          "type": "integer"
        },
        "patch": {
          "format": "int32",
          "title": "SDK version patch number",
          "type": "integer"
        },
        "version": {
          "description": "String representation of the SDK version. Must be\nin `major.minor.patch` format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "apiSdkVolumeAttachRequest": {
      "properties": {
        "options": {
          "$ref": "#/definitions/apiSdkVolumeAttachRequestOptions",
          "title": "Options to attach device"
        },
        "volume_id": {
          "title": "Id of volume",
          "type": "string"
        }
      },
      "title": "Defines a request to attach a volume to the node receiving this request",
      "type": "object"
    },
    "apiSdkVolumeAttachRequestOptions": {
      "properties": {
        "secret_context": {
          "description": "It indicates the additional context which could be used to retrieve the secret.\nIn case of Kubernetes, this is the namespace in which the secret is created.",
          "type": "string"
        },
        "secret_key": {
          "title": "In case of Kubernetes, this will be the key stored in the Kubernetes secret",
          "type": "string"
        },
        "secret_name": {
          "title": "Indicates the name of the secret stored in a secret store\nIn case of Hashicorp's Vault, it will be the key from the key-value pair stored in its kv backend.\nIn case of Kubernetes secret, it is the name of the secret object itself",
          "type": "string"
        }
      },
      "title": "Options to attach device",
      "type": "object"
    },
    "apiSdkVolumeAttachResponse": {
      "properties": {
        "device_path": {
          "title": "Device path where device is exported",
          "type": "string"
        }
      },
      "title": "Defines a response from the node which received the request to attach",
      "type": "object"
    },
    "apiSdkVolumeCloneRequest": {
      "properties": {
        "name": {
          "description": "Unique name of the volume. This will be used for idempotency.",
          "type": "string"
        },
        "parent_id": {
          "description": "Parent volume id or snapshot id will create a new volume as a clone of the parent.",
          "type": "string"
        }
      },
      "title": "Defines a request to clone a volume or create a volume from a snapshot",
      "type": "object"
    },
    "apiSdkVolumeCloneResponse": {
      "properties": {
        "volume_id": {
          "title": "Id of new volume",
          "type": "string"
        }
      },
      "title": "Defines the response when creating a clone from a volume or a snapshot",
      "type": "object"
    },
    "apiSdkVolumeCreateRequest": {
      "description": "Defines a request to create a volume. Use OpenStorageVolume.Update()\nto update any labels on the volume.",
      "properties": {
        "name": {
          "description": "Unique name of the volume. This will be used for idempotency.",
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpec",
          "title": "Volume specification"
        }
      },
      "type": "object"
    },
    "apiSdkVolumeCreateResponse": {
      "properties": {
        "volume_id": {
          "title": "Id of new volume",
          "type": "string"
        }
      },
      "title": "Defines a response to the creation of a volume",
      "type": "object"
    },
    "apiSdkVolumeDeleteResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeDetachRequest": {
      "properties": {
        "options": {
          "$ref": "#/definitions/apiSdkVolumeDetachRequestOptions"
        },
        "volume_id": {
          "title": "Id of the volume",
          "type": "string"
        }
      },
      "title": "Defines a request to detach a volume",
      "type": "object"
    },
    "apiSdkVolumeDetachRequestOptions": {
      "properties": {
        "force": {
          "format": "boolean",
          "title": "Forcefully detach device from the kernel",
          "type": "boolean"
        },
        "unmount_before_detach": {
          "format": "boolean",
          "title": "Unmount the volume before detaching",
          "type": "boolean"
        }
      },
      "title": "Options to detach device",
      "type": "object"
    },
    "apiSdkVolumeDetachResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeEnumerateResponse": {
      "properties": {
        "volume_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of volumes matching label",
          "type": "array"
        }
      },
      "title": "Defines the response when listing volumes",
      "type": "object"
    },
    "apiSdkVolumeEnumerateWithFiltersRequest": {
      "properties": {
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "description": "Volumes to match to this locator.\nIf not provided, all volumes will be returned."
        }
      },
      "title": "Defines a request to list volumes",
      "type": "object"
    },
    "apiSdkVolumeEnumerateWithFiltersResponse": {
      "properties": {
        "volume_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of volumes matching label",
          "type": "array"
        }
      },
      "title": "Defines the response when listing volumes",
      "type": "object"
    },
    "apiSdkVolumeInspectResponse": {
      "properties": {
        "volume": {
          "$ref": "#/definitions/apiVolume",
          "title": "Information about the volume"
        }
      },
      "title": "Defines the response when inspecting a volume",
      "type": "object"
    },
    "apiSdkVolumeMountRequest": {
      "properties": {
        "mount_path": {
          "description": "Mount path for mounting the volume.",
          "type": "string"
        },
        "volume_id": {
          "title": "Id of the volume",
          "type": "string"
        }
      },
      "title": "Defines a request to mount a volume to the node receiving this request",
      "type": "object"
    },
    "apiSdkVolumeMountResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeSnapshotCreateRequest": {
      "description": "Defines the request when creating a snapshot from a volume.",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Labels to apply to snapshot",
          "type": "object"
        },
        "name": {
          "description": "Name of the snapshot.",
          "type": "string"
        },
        "volume_id": {
          "title": "Id of volume to take the snapshot from",
          "type": "string"
        }
      },
      "type": "object"
    },
    "apiSdkVolumeSnapshotCreateResponse": {
      "properties": {
        "snapshot_id": {
          "title": "Id of immutable snapshot",
          "type": "string"
        }
      },
      "title": "Defines a response after creating a snapshot of a volume",
      "type": "object"
    },
    "apiSdkVolumeSnapshotEnumerateResponse": {
      "properties": {
        "volume_snapshot_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of immutable snapshots",
          "type": "array"
        }
      },
      "title": "Defines a response when listing snapshots",
      "type": "object"
    },
    "apiSdkVolumeSnapshotEnumerateWithFiltersRequest": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "(optional) Get snapshots that match these labels",
          "type": "object"
        },
        "volume_id": {
          "title": "(optional) Get the snapshots for this volume id",
          "type": "string"
        }
      },
      "title": "Defines a request to list the snaphots",
      "type": "object"
    },
    "apiSdkVolumeSnapshotEnumerateWithFiltersResponse": {
      "properties": {
        "volume_snapshot_ids": {
          "items": {
            "type": "string"
          },
          "title": "List of immutable snapshots",
          "type": "array"
        }
      },
      "title": "Defines a response when listing snapshots",
      "type": "object"
    },
    "apiSdkVolumeSnapshotRestoreRequest": {
      "properties": {
        "snapshot_id": {
          "title": "Snapshot id to apply to `volume_id`",
          "type": "string"
        },
        "volume_id": {
          "title": "Id of volume",
          "type": "string"
        }
      },
      "title": "Defines a request to restore a volume to a snapshot",
      "type": "object"
    },
    "apiSdkVolumeSnapshotRestoreResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeSnapshotScheduleUpdateRequest": {
      "properties": {
        "snapshot_schedule_names": {
          "items": {
            "type": "string"
          },
          "title": "Names of schedule policies",
          "type": "array"
        },
        "volume_id": {
          "title": "Id of volume",
          "type": "string"
        }
      },
      "title": "Defines a request to update the snapshot schedule of a volume",
      "type": "object"
    },
    "apiSdkVolumeSnapshotScheduleUpdateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeStatsResponse": {
      "properties": {
        "stats": {
          "$ref": "#/definitions/apiStats",
          "title": "Statistics for a single volume"
        }
      },
      "title": "Defines a response containing drive statistics",
      "type": "object"
    },
    "apiSdkVolumeUnmountRequest": {
      "properties": {
        "mount_path": {
          "title": "MountPath for device",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/apiSdkVolumeUnmountRequestOptions",
          "title": "Options to unmount device"
        },
        "volume_id": {
          "title": "Id of volume",
          "type": "string"
        }
      },
      "title": "Defines a request to unmount a volume on the node receiving this request",
      "type": "object"
    },
    "apiSdkVolumeUnmountRequestOptions": {
      "properties": {
        "delete_mount_path": {
          "format": "boolean",
          "title": "Delete the mount path on the node after unmounting",
          "type": "boolean"
        },
        "no_delay_before_deleting_mount_path": {
          "description": "Do not wait for a delay before deleting path.\nNormally a storage driver may delay before deleting the mount path,\nwhich may be necessary to reduce the risk of race conditions. This\nchoice will remove that delay. This value is only usable when\n`delete_mount_path` is set.",
          "format": "boolean",
          "type": "boolean"
        }
      },
      "title": "Options to unmount device",
      "type": "object"
    },
    "apiSdkVolumeUnmountResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSdkVolumeUpdateRequest": {
      "properties": {
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "description": "Change locator values. Some of these values may not be able to be changed.\nNew labels will be added to the current volume labels. To delete a label, set the\nvalue of the label to an empty string."
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpecUpdate",
          "description": "VolumeSpecUpdate provides a method to request that certain values\nin the VolumeSpec are changed. This is necessary as a separate variable\nbecause values like int and bool in the VolumeSpec cannot be determined\nif they are being requested to change in gRPC proto3. Some of these\nvalues may not be able to be changed.\nHere are a few examples of actions that can be accomplished using the VolumeSpec.\nTo resize the volume: Set a new value in spec.size.\nTo change number of replicas: Adjust spec.ha_level.\nTo change the I/O Profile: Adjust spec.io_profile."
        },
        "volume_id": {
          "title": "Id of the volume to update",
          "type": "string"
        }
      },
      "title": "This request is used to adjust or set new values in the volume",
      "type": "object"
    },
    "apiSdkVolumeUpdateResponse": {
      "title": "Empty response",
      "type": "object"
    },
    "apiSeverityType": {
      "default": "SEVERITY_TYPE_NONE",
      "enum": [
        "SEVERITY_TYPE_NONE",
        "SEVERITY_TYPE_ALARM",
        "SEVERITY_TYPE_WARNING",
        "SEVERITY_TYPE_NOTIFY"
      ],
      "type": "string"
    },
    "apiSource": {
      "properties": {
        "parent": {
          "description": "A volume id, if specified will create a clone of the parent.",
          "type": "string"
        },
        "seed": {
          "title": "Seed will seed the volume from the specified URI\nAny additional config for the source comes from the labels in the spec",
          "type": "string"
        }
      },
      "title": "Source is a structure that can be given to a volume\nto seed the volume with data.\nswagger:model",
      "type": "object"
    },
    "apiStats": {
      "properties": {
        "bytes_used": {
          "format": "uint64",
          "title": "BytesUsed",
          "type": "string"
        },
        "interval_ms": {
          "format": "uint64",
          "title": "Interval in ms during which stats were collected",
          "type": "string"
        },
        "io_ms": {
          "format": "uint64",
          "title": "Time spent doing IOs ms",
          "type": "string"
        },
        "io_progress": {
          "format": "uint64",
          "title": "IOs curently in progress",
          "type": "string"
        },
        "read_bytes": {
          "format": "uint64",
          "title": "Number of bytes read",
          "type": "string"
        },
        "read_ms": {
          "format": "uint64",
          "title": "Time spent in reads in ms",
          "type": "string"
        },
        "reads": {
          "format": "uint64",
          "title": "Reads completed successfully",
          "type": "string"
        },
        "write_bytes": {
          "format": "uint64",
          "title": "Number of bytes written",
          "type": "string"
        },
        "write_ms": {
          "format": "uint64",
          "title": "Time spent in writes in ms",
          "type": "string"
        },
        "writes": {
          "format": "uint64",
          "title": "Writes completed successfully",
          "type": "string"
        }
      },
      "title": "Stats is a structure that represents last collected stats for a volume",
      "type": "object"
    },
    "apiStorageCluster": {
      "properties": {
        "id": {
          "title": "Id of the cluster",
          "type": "string"
        },
        "name": {
          "title": "Name of the cluster",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/openstorageapiStatus",
          "title": "Status of the cluster"
        }
      },
      "title": "StorageCluster represents the state and information about the cluster",
      "type": "object"
    },
    "apiStorageMedium": {
      "default": "STORAGE_MEDIUM_MAGNETIC",
      "enum": [
        "STORAGE_MEDIUM_MAGNETIC",
        "STORAGE_MEDIUM_SSD",
        "STORAGE_MEDIUM_NVME"
      ],
      "title": "- STORAGE_MEDIUM_MAGNETIC: Magnetic spinning disk.\n - STORAGE_MEDIUM_SSD: SSD disk\n - STORAGE_MEDIUM_NVME: NVME disk",
      "type": "string"
    },
    "apiStorageNode": {
      "properties": {
        "avg_load": {
          "format": "int64",
          "title": "Average load (percentage)",
          "type": "string"
        },
        "cpu": {
          "format": "double",
          "title": "Cpu usage of the node",
          "type": "number"
        },
        "data_ip": {
          "title": "Data IP",
          "type": "string"
        },
        "disks": {
          "additionalProperties": {
            "$ref": "#/definitions/apiStorageResource"
          },
          "title": "List of disks on the node",
          "type": "object"
        },
        "hostname": {
          "title": "Hostname of the node",
          "type": "string"
        },
        "id": {
          "title": "Id of the node",
          "type": "string"
        },
        "mem_free": {
          "format": "uint64",
          "title": "Free memory of the node",
          "type": "string"
        },
        "mem_total": {
          "format": "uint64",
          "title": "Total memory of the node",
          "type": "string"
        },
        "mem_used": {
          "format": "uint64",
          "title": "Used memory of the node",
          "type": "string"
        },
        "mgmt_ip": {
          "title": "Management IP",
          "type": "string"
        },
        "node_labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "User defined labels for the node",
          "type": "object"
        },
        "pools": {
          "items": {
            "$ref": "#/definitions/apiStoragePool"
          },
          "title": "List of storage pools this node supports",
          "type": "array"
        },
        "scheduler_node_name": {
          "description": "SchedulerNodeName is name of the node in scheduler context. It can be\nempty if unable to get the name from the scheduler.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/openstorageapiStatus",
          "title": "Node status"
        }
      },
      "title": "StorageNode describes the state of the node",
      "type": "object"
    },
    "apiStoragePool": {
      "properties": {
        "Cos": {
          "$ref": "#/definitions/apiCosType",
          "title": "Cos reflects the capabilities of this drive pool"
        },
        "ID": {
          "format": "int32",
          "title": "ID pool ID",
          "type": "integer"
        },
        "Medium": {
          "$ref": "#/definitions/apiStorageMedium",
          "title": "Medium underlying storage type"
        },
        "RaidLevel": {
          "title": "RaidLevel storage raid level",
          "type": "string"
        },
        "TotalSize": {
          "format": "uint64",
          "title": "TotalSize of the pool",
          "type": "string"
        },
        "Used": {
          "format": "uint64",
          "title": "Used size of the pool",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Labels is a list of user defined name-value pairs",
          "type": "object"
        }
      },
      "title": "StoragePool groups different storage devices based on their CosType",
      "type": "object"
    },
    "apiStorageResource": {
      "properties": {
        "id": {
          "description": "Id is the LUN identifier.",
          "type": "string"
        },
        "iops": {
          "format": "uint64",
          "title": "IOPS",
          "type": "string"
        },
        "last_scan": {
          "description": "Timestamp of last time this device was scanned.",
          "format": "date-time",
          "type": "string"
        },
        "medium": {
          "$ref": "#/definitions/apiStorageMedium",
          "description": "Storage medium."
        },
        "metadata": {
          "description": "True if dedicated for metadata.",
          "format": "boolean",
          "type": "boolean"
        },
        "online": {
          "description": "True if this device is online.",
          "format": "boolean",
          "type": "boolean"
        },
        "path": {
          "description": "Path device path for this storage resource.",
          "type": "string"
        },
        "randRW": {
          "format": "double",
          "title": "RandRW",
          "type": "number"
        },
        "rotation_speed": {
          "description": "True if this device is rotational.",
          "type": "string"
        },
        "seq_read": {
          "format": "double",
          "title": "SeqRead",
          "type": "number"
        },
        "seq_write": {
          "format": "double",
          "title": "SeqWrite",
          "type": "number"
        },
        "size": {
          "description": "Total size in bytes.",
          "format": "uint64",
          "type": "string"
        },
        "used": {
          "description": "Physical Bytes used.",
          "format": "uint64",
          "type": "string"
        }
      },
      "title": "StorageResource groups properties of a storage device.\nswagger:model",
      "type": "object"
    },
    "apiStorageVersion": {
      "properties": {
        "details": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information provided by the storage system",
          "type": "object"
        },
        "driver": {
          "title": "OpenStorage driver name",
          "type": "string"
        },
        "version": {
          "title": "Version of the server",
          "type": "string"
        }
      },
      "title": "Version information about the storage system",
      "type": "object"
    },
    "apiVolume": {
      "properties": {
        "attach_info": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "AttachInfo is a list of name value mappings that provides attach information.",
          "type": "object"
        },
        "attach_path": {
          "description": "AttachPath is the mounted path in the host namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attached_on": {
          "description": "AttachedOn is the node instance identifier for clustered systems.",
          "type": "string"
        },
        "attached_state": {
          "$ref": "#/definitions/apiAttachState",
          "description": "AttachedState shows whether the device is attached for internal or external use."
        },
        "ctime": {
          "format": "date-time",
          "title": "Volume creation time",
          "type": "string"
        },
        "device_path": {
          "description": "DevicePath is the device exported by block device implementations.",
          "type": "string"
        },
        "error": {
          "description": "Error is the Last recorded error.",
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/apiFSType",
          "description": "Format specifies the filesytem for this volume."
        },
        "fs_resize_required": {
          "description": "FsResizeRequired if an FS resize is required on the volume.",
          "format": "boolean",
          "type": "boolean"
        },
        "group": {
          "$ref": "#/definitions/apiGroup",
          "description": "Group volumes in the same group have the same group id."
        },
        "id": {
          "description": "Self referential volume ID.",
          "type": "string"
        },
        "last_scan": {
          "description": "LastScan is the time when an integrity check was run.",
          "format": "date-time",
          "type": "string"
        },
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "title": "User specified locator"
        },
        "readonly": {
          "description": "Readonly is true if this volume is to be mounted with readonly access.",
          "format": "boolean",
          "type": "boolean"
        },
        "replica_sets": {
          "description": "ReplicatSets storage for this volumefor clustered storage arrays.",
          "items": {
            "$ref": "#/definitions/apiReplicaSet"
          },
          "type": "array"
        },
        "runtime_state": {
          "description": "RuntimeState is a lst of name value mapping of driver specific runtime\ninformation.",
          "items": {
            "$ref": "#/definitions/apiRuntimeStateMap"
          },
          "type": "array"
        },
        "secure_device_path": {
          "description": "SecureDevicePath is the device path for an encrypted volume.",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/apiSource",
          "description": "Source specified seed data for the volume."
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpec",
          "title": "User specified VolumeSpec"
        },
        "state": {
          "$ref": "#/definitions/apiVolumeState",
          "description": "State is the current runtime state of this volume."
        },
        "status": {
          "$ref": "#/definitions/apiVolumeStatus",
          "description": "Status is the availability status of this volume."
        },
        "usage": {
          "description": "Usage is bytes consumed by vtheis volume.",
          "format": "uint64",
          "type": "string"
        },
        "volume_consumers": {
          "items": {
            "$ref": "#/definitions/apiVolumeConsumer"
          },
          "title": "VolumeConsumers are entities that consume this volume",
          "type": "array"
        }
      },
      "title": "Volume represents an abstract storage volume.\nswagger:model",
      "type": "object"
    },
    "apiVolumeConsumer": {
      "properties": {
        "name": {
          "title": "Name is the name of the volume consumer",
          "type": "string"
        },
        "namespace": {
          "title": "Namespace is the namespace of the volume consumer",
          "type": "string"
        },
        "node_id": {
          "description": "NodeID is the identifier of the node on which the consumer is running. This\nidentifier would be from the perspective of the container runtime or\norchestrator under which the volume consumer resides. For example, NodeID\n can be name of a minion in Kubernetes.",
          "type": "string"
        },
        "owner_name": {
          "title": "OwnerName is the name of the entity who owns this volume consumer",
          "type": "string"
        },
        "owner_type": {
          "description": "OwnerType is the type of the entity who owns this volume consumer. The type would\nbe from the perspective of the container runtime or the orchestrator under which\nthe volume consumer resides. For e.g OwnerType can be a Deployment in Kubernetes.",
          "type": "string"
        },
        "type": {
          "title": "Type is the type of the consumer. E.g a Kubernetes pod",
          "type": "string"
        }
      },
      "title": "VolumeConsumer identifies a consumer for a Volume. An example of a VolumeConsumer\nwould be a Pod in Kubernetes who has mounted the PersistentVolumeClaim for the\nVolume\nswagger: model",
      "type": "object"
    },
    "apiVolumeLocator": {
      "properties": {
        "name": {
          "title": "User friendly identifier",
          "type": "string"
        },
        "volume_labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "A set of name-value pairs that acts as search filters",
          "type": "object"
        }
      },
      "title": "VolumeLocator is a structure that is attached to a volume\nand is used to carry opaque metadata.\nswagger:model",
      "type": "object"
    },
    "apiVolumePlacementRule": {
      "properties": {
        "affected_replicas": {
          "format": "int32",
          "title": "AffectedReplicas defines the number of volume replicas affected by this rule. If not provided,\nrule would affect all replicas\n(optional)",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/apiAffinityRule",
          "title": "Affinity defines the affinity rule for the volume placement"
        },
        "anti_affinity": {
          "$ref": "#/definitions/apiAffinityRule",
          "title": "AntiAffinity defines the anti affinity rule for the volume placement"
        },
        "enforcement": {
          "$ref": "#/definitions/VolumePlacementRuleEnforcementType",
          "title": "Enforcement specifies the rule enforcement policy. Can take values: required or preferred.\n(optional)"
        },
        "weight": {
          "format": "int64",
          "title": "Weight defines the weight of the rule which allows to break the tie with other matching rules. A rule with\nhigher weight wins over a rule with lower weight.\n(optional)",
          "type": "string"
        }
      },
      "title": "VolumePlacementRule defines a single placement rule",
      "type": "object"
    },
    "apiVolumePlacementStrategy": {
      "properties": {
        "rules": {
          "description": "Rules defines a list of rules as part of the placement spec. All the rules specified will\nbe applied for volume placement.\nRules that have enforcement as \"required\" are strictly enforced while \"preferred\" are best effort.\nIn situations, where 2 or more rules conflict, the weight of the rules will dictate which wins.",
          "items": {
            "$ref": "#/definitions/apiVolumePlacementRule"
          },
          "type": "array"
        }
      },
      "title": "VolumePlacementStrategy defines a strategy for placing volumes in the cluster which will be a series of rules",
      "type": "object"
    },
    "apiVolumeSpec": {
      "properties": {
        "aggregation_level": {
          "description": "Aggregatiokn level Specifies the number of parts the volume can be aggregated from.",
          "format": "int64",
          "type": "integer"
        },
        "block_size": {
          "description": "BlockSize for the filesystem.",
          "format": "int64",
          "type": "string"
        },
        "cascaded": {
          "description": "Cascaded is true if this volume can be populated on any node from an external source.",
          "format": "boolean",
          "type": "boolean"
        },
        "compressed": {
          "description": "Compressed is true if this volume is to be compressed.",
          "format": "boolean",
          "type": "boolean"
        },
        "cos": {
          "$ref": "#/definitions/apiCosType",
          "description": "Cos specifies the relative class of service."
        },
        "dedupe": {
          "description": "Dedupe specifies if the volume data is to be de-duplicated.",
          "format": "boolean",
          "type": "boolean"
        },
        "encrypted": {
          "description": "Encrypted is true if this volume will be cryptographically secured.",
          "format": "boolean",
          "type": "boolean"
        },
        "ephemeral": {
          "format": "boolean",
          "title": "Ephemeral storage",
          "type": "boolean"
        },
        "force_unsupported_fs_type": {
          "description": "Use to force a file system type which is not recommended.\nThe driver may still refuse to use the file system type.",
          "format": "boolean",
          "type": "boolean"
        },
        "format": {
          "$ref": "#/definitions/apiFSType",
          "description": "Format specifies the filesystem for this volume."
        },
        "group": {
          "$ref": "#/definitions/apiGroup",
          "title": "Group identifies a consistency group"
        },
        "group_enforced": {
          "description": "GroupEnforced is true if consistency group creation is enforced.",
          "format": "boolean",
          "type": "boolean"
        },
        "ha_level": {
          "description": "HaLevel specifies the number of copies of data.",
          "format": "int64",
          "type": "string"
        },
        "io_profile": {
          "$ref": "#/definitions/apiIoProfile",
          "description": "IoProfile provides a hint about application using this volume."
        },
        "io_strategy": {
          "$ref": "#/definitions/apiIoStrategy",
          "description": "IoStrategy preferred strategy for I/O."
        },
        "journal": {
          "description": "Journal is true if data for the volume goes into the journal.",
          "format": "boolean",
          "type": "boolean"
        },
        "nodiscard": {
          "description": "Nodiscard specifies if the volume will be mounted with discard support disabled.\ni.e. FS will not release allocated blocks back to the backing storage pool.",
          "format": "boolean",
          "type": "boolean"
        },
        "passphrase": {
          "title": "Passphrase for an encrypted volume",
          "type": "string"
        },
        "placement_strategy": {
          "$ref": "#/definitions/apiVolumePlacementStrategy",
          "description": "PlacementStrategy specifies a spec to indicate where to place the volume."
        },
        "queue_depth": {
          "format": "int64",
          "title": "QueueDepth defines the desired block device queue depth",
          "type": "integer"
        },
        "replica_set": {
          "$ref": "#/definitions/apiReplicaSet",
          "description": "ReplicaSet is the desired set of nodes for the volume data."
        },
        "scale": {
          "description": "Scale allows autocreation of volumes.",
          "format": "int64",
          "type": "integer"
        },
        "shared": {
          "description": "Shared is true if this volume can be concurrently accessed by multiple users.",
          "format": "boolean",
          "type": "boolean"
        },
        "sharedv4": {
          "description": "Sharedv4 is true if this volume can be accessed via sharedv4.",
          "format": "boolean",
          "type": "boolean"
        },
        "size": {
          "format": "uint64",
          "title": "Size specifies the thin provisioned volume size in bytes",
          "type": "string"
        },
        "snapshot_interval": {
          "format": "int64",
          "title": "SnapshotInterval in minutes, set to 0 to disable snapshots",
          "type": "integer"
        },
        "snapshot_schedule": {
          "description": "SnapshotSchedule a well known string that specifies when snapshots should be taken.",
          "type": "string"
        },
        "sticky": {
          "description": "Sticky volumes cannot be deleted until the flag is removed.",
          "format": "boolean",
          "type": "boolean"
        },
        "volume_labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "VolumeLabels configuration labels",
          "type": "object"
        }
      },
      "title": "VolumeSpec has the properties needed to create a volume.\nswagger:model",
      "type": "object"
    },
    "apiVolumeSpecUpdate": {
      "properties": {
        "cos": {
          "$ref": "#/definitions/apiCosType"
        },
        "dedupe": {
          "format": "boolean",
          "type": "boolean"
        },
        "group": {
          "$ref": "#/definitions/apiGroup"
        },
        "ha_level": {
          "format": "int64",
          "type": "string"
        },
        "io_profile": {
          "$ref": "#/definitions/apiIoProfile"
        },
        "journal": {
          "format": "boolean",
          "type": "boolean"
        },
        "passphrase": {
          "type": "string"
        },
        "queue_depth": {
          "format": "int64",
          "type": "integer"
        },
        "replica_set": {
          "$ref": "#/definitions/apiReplicaSet",
          "description": "ReplicaSet is the desired set of nodes for the volume data."
        },
        "scale": {
          "format": "int64",
          "type": "integer"
        },
        "shared": {
          "format": "boolean",
          "type": "boolean"
        },
        "sharedv4": {
          "format": "boolean",
          "type": "boolean"
        },
        "size": {
          "format": "uint64",
          "type": "string"
        },
        "snapshot_interval": {
          "format": "int64",
          "type": "integer"
        },
        "snapshot_schedule": {
          "type": "string"
        },
        "sticky": {
          "format": "boolean",
          "type": "boolean"
        },
        "volume_labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "VolumeLabels configuration labels",
          "type": "object"
        }
      },
      "title": "VolumeSpecUpdate provides a method to set any of the VolumeSpec of an existing volume",
      "type": "object"
    },
    "apiVolumeState": {
      "default": "VOLUME_STATE_NONE",
      "description": "VolumeState represents the state of a volume.\n\n - VOLUME_STATE_PENDING: Volume is transitioning to new state\n - VOLUME_STATE_AVAILABLE: Volume is ready to be assigned to a container\n - VOLUME_STATE_ATTACHED: Volume is attached to container\n - VOLUME_STATE_DETACHED: Volume is detached but associated with a container\n - VOLUME_STATE_DETATCHING: Volume detach is in progress\n - VOLUME_STATE_ERROR: Volume is in error state\n - VOLUME_STATE_DELETED: Volume is deleted, it will remain in this state\nwhile resources are asynchronously reclaimed\n - VOLUME_STATE_TRY_DETACHING: Volume is trying to be detached\n - VOLUME_STATE_RESTORE: Volume is undergoing restore",
      "enum": [
        "VOLUME_STATE_NONE",
        "VOLUME_STATE_PENDING",
        "VOLUME_STATE_AVAILABLE",
        "VOLUME_STATE_ATTACHED",
        "VOLUME_STATE_DETACHED",
        "VOLUME_STATE_DETATCHING",
        "VOLUME_STATE_ERROR",
        "VOLUME_STATE_DELETED",
        "VOLUME_STATE_TRY_DETACHING",
        "VOLUME_STATE_RESTORE"
      ],
      "type": "string"
    },
    "apiVolumeStatus": {
      "default": "VOLUME_STATUS_NONE",
      "description": "VolumeStatus represents a health status for a volume.\n\n - VOLUME_STATUS_NOT_PRESENT: Volume is not present\n - VOLUME_STATUS_UP: Volume is healthy\n - VOLUME_STATUS_DOWN: Volume is in fail mode\n - VOLUME_STATUS_DEGRADED: Volume is up but with degraded performance\nIn a RAID group, this may indicate a problem with one or more drives",
      "enum": [
        "VOLUME_STATUS_NONE",
        "VOLUME_STATUS_NOT_PRESENT",
        "VOLUME_STATUS_UP",
        "VOLUME_STATUS_DOWN",
        "VOLUME_STATUS_DEGRADED"
      ],
      "type": "string"
    },
    "openstorageapiStatus": {
      "default": "STATUS_NONE",
      "enum": [
        "STATUS_NONE",
        "STATUS_INIT",
        "STATUS_OK",
        "STATUS_OFFLINE",
        "STATUS_ERROR",
        "STATUS_NOT_IN_QUORUM",
        "STATUS_DECOMMISSION",
        "STATUS_MAINTENANCE",
        "STATUS_STORAGE_DOWN",
        "STATUS_STORAGE_DEGRADED",
        "STATUS_NEEDS_REBOOT",
        "STATUS_STORAGE_REBALANCE",
        "STATUS_STORAGE_DRIVE_REPLACE",
        "STATUS_NOT_IN_QUORUM_NO_STORAGE",
        "STATUS_MAX"
      ],
      "title": "- STATUS_MAX: Add statuses before MAX and update the number for MAX",
      "type": "string"
    }
  },
  "info": {
    "title": "OpenStorage SDK",
    "version": "0.18.0"
  },
  "paths": {
    "/v1/alerts": {
      "delete": {
        "description": "#### Delete\nDelete allows 3 different types of queries as defined below:\n\n* Query that takes only resource type as input\n* Query that takes resource type and alert type as input and\n* Query that takes resource id, alert type and resource type as input.\n\n#### Input\nSdkAlertsEnumerateRequest takes a list of such queries and all alerts\nthat match at least one of the queries are deleted.",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkAlertsDeleteResponse"
            }
          }
        },
        "summary": "Delete allows deleting alerts.",
        "tags": [
          "OpenStorageAlerts"
        ]
      },
      "get": {
        "description": "#### Enumerate\nEnumerate allows 3 different types of queries as defined below:\n\n* Query that takes only resource type as input\n* Query that takes resource type and alert type as input and\n* Query that takes resource id, alert type and resource type as input.\n\n#### Input\nSdkAlertsEnumerateRequest takes a list of such queries and the returned\noutput is a collective ouput from each of these queries. In that sense,\nthe filtering of these queries has a behavior of OR operation.\nEach query also has a list of optional options. These options allow\nnarrowing down the scope of alerts search. These options have a\nbehavior of an AND operation.\n\n#### Examples\nTo search by a resource type in a given time window would require\ninitializing SdkAlertsResourceTypeQuery query and pass in\nSdkAlertsTimeSpan option into SdkAlertsQuery struct and finally\npacking any other such queries into SdkAlertsEnumerateRequest object.\nAlternatively, to search by both resource type and alert type, use\nSdkAlertsAlertTypeQuery as query builder.\nFinally to search all alerts of a given resource type and some\nalerts of another resource type but with specific alert type,\nuse two queries, first initialized with SdkAlertsResourceTypeQuery\nand second initialized with SdkAlertsAlertTypeQuery and both\neventually packed as list in SdkAlertsEnumerateRequest.",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkAlertsEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate allows querying alerts.",
        "tags": [
          "OpenStorageAlerts"
        ]
      }
    },
    "/v1/cloudbackups": {
      "post": {
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCreateResponse"
            }
          }
        },
        "summary": "Creates a backup request for a specified volume. Use\nOpenStorageCloudBackup.Status() to get the current status of the\nbackup request.",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/backup/catalog": {
      "get": {
        "operationId": "Catalog",
        "parameters": [
          {
            "description": "Id of the backup.",
            "in": "query",
            "name": "backup_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Credential id describe the credentials for the cloud.",
            "in": "query",
            "name": "credential_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCatalogResponse"
            }
          }
        },
        "summary": "Catalog returns a list of the contents in the backup",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/backup/{backup_id}": {
      "delete": {
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "backup_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Credential id is the credential for cloud to be used for the request.",
            "in": "query",
            "name": "credential_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Force Delete cloudbackup even if there are dependencies. This may be\nneeded if the backup is an incremental backup and subsequent backups\ndepend on this backup specified by `backup_id`.",
            "format": "boolean",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteResponse"
            }
          }
        },
        "summary": "Deletes a backup stored in the cloud. If the backup is an incremental\nbackup and other backups are dependent on it, it will not be able to be deleted.",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/deleteall": {
      "post": {
        "operationId": "DeleteAll",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteAllRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteAllResponse"
            }
          }
        },
        "summary": "DeleteAll deletes all the backups in the cloud for the specified volume.",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/restore": {
      "post": {
        "operationId": "Restore",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupRestoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupRestoreResponse"
            }
          }
        },
        "summary": "Restore creates a new volume from a backup id. The newly created volume\nhas an ha_level (number of replicas) of only 1. To increase the number of\nreplicas, use OpenStorageVolume.Set() to change the ha_level.",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/schedules": {
      "get": {
        "operationId": "SchedEnumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate cloud backup schedules",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      },
      "post": {
        "operationId": "SchedCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedCreateResponse"
            }
          }
        },
        "summary": "Create cloud backup schedule",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/schedules/{backup_schedule_id}": {
      "delete": {
        "operationId": "SchedDelete",
        "parameters": [
          {
            "in": "path",
            "name": "backup_schedule_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedDeleteResponse"
            }
          }
        },
        "summary": "Delete cloud backup schedule",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/statechange": {
      "post": {
        "operationId": "StateChange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStateChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStateChangeResponse"
            }
          }
        },
        "summary": "StateChange can be used to stop, pause, and restart a backup",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/volume": {
      "get": {
        "operationId": "Enumerate",
        "parameters": [
          {
            "description": "(optional) Source id of the volume for the request.",
            "in": "query",
            "name": "src_volume_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) Cluster id specifies the cluster for the request.",
            "in": "query",
            "name": "cluster_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Credential id is the credential for cloud to be used for the request.",
            "in": "query",
            "name": "credential_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "(optional) All indicates if the request should show cloud backups for all clusters or the current cluster.",
            "format": "boolean",
            "in": "query",
            "name": "all",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupEnumerateResponse"
            }
          }
        },
        "summary": "Return a list of backups for the specified volume",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/volume/history": {
      "get": {
        "operationId": "History",
        "parameters": [
          {
            "description": "This optional value defines which history of backups is being\nrequested. If not provided, it will return the history for all volumes.",
            "in": "query",
            "name": "src_volume_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupHistoryResponse"
            }
          }
        },
        "summary": "History returns a list of backups for a specified volume",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/volume/status": {
      "get": {
        "operationId": "Status",
        "parameters": [
          {
            "description": "VolumeId is an optional value which is used to get information on the\nstatus of a backup for the specified volume. If no volume id and name\nis provided, then status for all volumes is returned.",
            "in": "query",
            "name": "volume_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Local indicates if only those backups/restores that are\nactive on current node must be returned.",
            "format": "boolean",
            "in": "query",
            "name": "local",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of the backup/restore task, if this is specified,\nvolume_id is ignored.",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStatusResponse"
            }
          }
        },
        "summary": "Status returns the status of any cloud backups of a volume",
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/clusters/current": {
      "get": {
        "operationId": "InspectCurrent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkClusterInspectCurrentResponse"
            }
          }
        },
        "summary": "InspectCurrent returns information about the current cluster",
        "tags": [
          "OpenStorageCluster"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate returns a list of credential ids",
        "tags": [
          "OpenStorageCredentials"
        ]
      },
      "post": {
        "description": "##### Example\n{% codetabs name=\"Golang\", type=\"go\" -%}\nid, err := client.Create(context.Background(), \u0026api.SdkCredentialCreateRequest{\n    Name: \"awscred\",\n    CredentialType: \u0026api.SdkCredentialCreateRequest_AwsCredential{\n      AwsCredential: \u0026api.SdkAwsCredentialRequest{\n      AccessKey: \"dummy-access\",\n      SecretKey: \"dummy-secret\",\n      Endpoint:  \"dummy-endpoint\",\n      Region:    \"dummy-region\",\n    },\n  },\n})\n{%- language name=\"Python\", type=\"py\" -%}\nen_resp = client.Create(api_pb2.SdkCredentialCreateRequest(\n  name='awscred',\n  aws_credential=api_pb2.SdkAwsCredentialRequest(\n    access_key='dummy-access',\n    secret_key='dumm-secret',\n    endpoint='dummy-endpoint',\n    region='dummy-region')))\n{%- endcodetabs %}",
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialCreateResponse"
            }
          }
        },
        "summary": "Create is used to submit cloud credentials. It will return an\nid of the credentials once they are verified to work.",
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/credentials/{credential_id}": {
      "delete": {
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "credential_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialDeleteResponse"
            }
          }
        },
        "summary": "Delete a specified credential",
        "tags": [
          "OpenStorageCredentials"
        ]
      },
      "get": {
        "operationId": "Inspect",
        "parameters": [
          {
            "in": "path",
            "name": "credential_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialInspectResponse"
            }
          }
        },
        "summary": "Inspect returns the information about a credential, but does not return the secret key.",
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/credentials/{credential_id}/validate": {
      "get": {
        "operationId": "Validate",
        "parameters": [
          {
            "in": "path",
            "name": "credential_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialValidateResponse"
            }
          }
        },
        "summary": "Validate is used to validate credentials",
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/identities/capabilities": {
      "get": {
        "operationId": "Capabilities",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkIdentityCapabilitiesResponse"
            }
          }
        },
        "summary": "Capabilities returns the supported services by the cluster.\nThis allows SDK implementations to advertise their supported\nservices as the API matures. With this information, clients\ncan determine supported services from storage clusters at\ndifferent versions.",
        "tags": [
          "OpenStorageIdentity"
        ]
      }
    },
    "/v1/identities/version": {
      "get": {
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkIdentityVersionResponse"
            }
          }
        },
        "summary": "Version returns version information about the system.",
        "tags": [
          "OpenStorageIdentity"
        ]
      }
    },
    "/v1/mountattach/attach": {
      "post": {
        "operationId": "Attach",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeAttachRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeAttachResponse"
            }
          }
        },
        "summary": "Attach attaches device to the host that the client is communicating with.",
        "tags": [
          "OpenStorageMountAttach"
        ]
      }
    },
    "/v1/mountattach/detach": {
      "post": {
        "operationId": "Detach",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDetachRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDetachResponse"
            }
          }
        },
        "summary": "Detaches a the volume from the host",
        "tags": [
          "OpenStorageMountAttach"
        ]
      }
    },
    "/v1/mountattach/mount": {
      "post": {
        "operationId": "Mount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeMountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeMountResponse"
            }
          }
        },
        "summary": "Mount mounts an attached volume in the host that the client is communicating with",
        "tags": [
          "OpenStorageMountAttach"
        ]
      }
    },
    "/v1/mountattach/unmount": {
      "post": {
        "operationId": "Unmount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUnmountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUnmountResponse"
            }
          }
        },
        "summary": "Unmount unmounts a mounted volume in the host that the client is communicating with",
        "tags": [
          "OpenStorageMountAttach"
        ]
      }
    },
    "/v1/nodes": {
      "get": {
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate returns the ids of all the nodes in the current cluster",
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/nodes/current": {
      "get": {
        "operationId": "InspectCurrent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeInspectCurrentResponse"
            }
          }
        },
        "summary": "InspectCurrent returns information about the storage node\nwhere the client is currently connected to.",
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/nodes/node/{node_id}": {
      "get": {
        "operationId": "Inspect",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeInspectResponse"
            }
          }
        },
        "summary": "Inspect returns information about the specified node",
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/objectstores": {
      "post": {
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreCreateResponse"
            }
          }
        },
        "summary": "Creates creates an object store endpoint on specified volume",
        "tags": [
          "OpenStorageObjectstore"
        ]
      }
    },
    "/v1/objectstores/{objectstore_id}": {
      "delete": {
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "objectstore_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreDeleteResponse"
            }
          }
        },
        "summary": "Delete destroys the object store endpoint on the volume",
        "tags": [
          "OpenStorageObjectstore"
        ]
      },
      "get": {
        "operationId": "Inspect",
        "parameters": [
          {
            "in": "path",
            "name": "objectstore_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreInspectResponse"
            }
          }
        },
        "summary": "Inspect returns information about the object store endpoint",
        "tags": [
          "OpenStorageObjectstore"
        ]
      },
      "put": {
        "operationId": "Update",
        "parameters": [
          {
            "in": "path",
            "name": "objectstore_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreUpdateResponse"
            }
          }
        },
        "summary": "Updates provided objectstore status.\nThis call can be used to stop and start the server while maintaining the same\nobject storage id.",
        "tags": [
          "OpenStorageObjectstore"
        ]
      }
    },
    "/v1/schedulepolicies": {
      "get": {
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate returns a list of schedules",
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "post": {
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyCreateResponse"
            }
          }
        },
        "summary": "Create creates a new snapshot schedule. They can be setup daily,\nweekly, or monthly.",
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "put": {
        "operationId": "Update",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyUpdateResponse"
            }
          }
        },
        "summary": "Update a snapshot schedule",
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      }
    },
    "/v1/schedulepolicies/{name}": {
      "delete": {
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyDeleteResponse"
            }
          }
        },
        "summary": "Delete removes a snapshot schedule",
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "get": {
        "operationId": "Inspect",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyInspectResponse"
            }
          }
        },
        "summary": "Inspect returns information about a specified schedule",
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      }
    },
    "/v1/volumes": {
      "get": {
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeEnumerateResponse"
            }
          }
        },
        "summary": "Enumerate returns a list of volume ids",
        "tags": [
          "OpenStorageVolume"
        ]
      },
      "post": {
        "description": "##### Example\n{% codetabs name=\"Golang\", type=\"go\" -%}\nid, err := client.Create(context.Background(), \u0026api.SdkVolumeCreateRequest{\n  Name: \"volume-12345-east\",\n  Spec: \u0026api.VolumeSpec {\n    Size: 1234567,\n  },\n})\n{%- language name=\"Python\", type=\"py\" -%}\nen_resp = client.Create(api_pb2.SdkVolumeCreateRequest(\n  name=\"volume-12345-east\",\n  spec=api_pb2.VolumeSpec(size=1234567)))\n{%- endcodetabs %}",
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCreateResponse"
            }
          }
        },
        "summary": "Create creates a volume according to the specification provided",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/clone": {
      "post": {
        "operationId": "Clone",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCloneRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCloneResponse"
            }
          }
        },
        "summary": "Clone creates a new writable volume cloned from an existing volume",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/filters": {
      "post": {
        "operationId": "EnumerateWithFilters",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeEnumerateWithFiltersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeEnumerateWithFiltersResponse"
            }
          }
        },
        "summary": "Enumerate returns a list of volume ids that match the labels if any are provided.",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshot/schedules/{volume_id}": {
      "post": {
        "operationId": "SnapshotScheduleUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotScheduleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotScheduleUpdateResponse"
            }
          }
        },
        "summary": "Sets the snapshot schedules. This information is saved in the VolumeSpec.snapshot_schedule\nas `policy=\u003cname\u003e,...`. This function will overwrite any policy values\nin the volume. To delete the policies in the volume send no policies.",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots": {
      "post": {
        "operationId": "SnapshotCreate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotCreateResponse"
            }
          }
        },
        "summary": "SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),\npoint-in-time snapshot of a volume. To create a new writable volume from\na snapshot, please use OpenStorageVolume.Clone().",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots/restore": {
      "post": {
        "operationId": "SnapshotRestore",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotRestoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotRestoreResponse"
            }
          }
        },
        "summary": "SnapshotRestore restores a volume to a specified snapshot",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots/{volume_id}": {
      "get": {
        "operationId": "SnapshotEnumerate",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotEnumerateResponse"
            }
          }
        },
        "summary": "SnapshotEnumerate returns a list of snapshots for a specific volume",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots/{volume_id}/filters": {
      "post": {
        "operationId": "SnapshotEnumerateWithFilters",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotEnumerateWithFiltersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotEnumerateWithFiltersResponse"
            }
          }
        },
        "summary": "SnapshotEnumerate returns a list of snapshots.\nTo filter all the snapshots for a specific volume which may no longer exist,\nspecifiy a volume id.\nLabels can also be used to filter the snapshot list.\nIf neither are provided all snapshots will be returned.",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/stats/{volume_id}": {
      "get": {
        "operationId": "Stats",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "When set to false the stats are in /proc/diskstats style stats.\nWhen set to true the stats are stats for a specific duration.",
            "format": "boolean",
            "in": "query",
            "name": "not_cumulative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeStatsResponse"
            }
          }
        },
        "summary": "Stats returns the statistics for the requested volume",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/{volume_id}": {
      "delete": {
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDeleteResponse"
            }
          }
        },
        "summary": "Delete deletes the provided volume",
        "tags": [
          "OpenStorageVolume"
        ]
      },
      "get": {
        "operationId": "Inspect",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeInspectResponse"
            }
          }
        },
        "summary": "Inspect returns information about a volume",
        "tags": [
          "OpenStorageVolume"
        ]
      },
      "put": {
        "operationId": "Update",
        "parameters": [
          {
            "in": "path",
            "name": "volume_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUpdateResponse"
            }
          }
        },
        "summary": "Update provides a method for manipulating the specification and attributes of a volume.\nSet can be used to resize a volume, update labels, change replica count, and much more.",
        "tags": [
          "OpenStorageVolume"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0"
}