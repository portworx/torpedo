package tests

import (
	//"github.com/aws/aws-sdk-go/aws"
	//"github.com/aws/aws-sdk-go/service/s3"

	"github.com/portworx/torpedo/drivers/scheduler"
	"github.com/portworx/torpedo/pkg/s3utils"
	"time"

	. "github.com/onsi/ginkgo"

	"github.com/portworx/torpedo/pkg/log"
	//"github.com/portworx/torpedo/drivers/scheduler"
	. "github.com/portworx/torpedo/tests"
)

var _ = Describe("{sseS3encryption}", func() {

	var (
		//scheduledAppContexts     []*scheduler.Context
		customBucket string
		//backupLocationUID string
		//cloudCredUID      string
		//backupName               string
		//cloudCredUidList         []string
		//customBackupLocationName string
		//credName                 string
		customBuckets []string
		bucketNames   []string
		//clusterUid               string
		//bkpNamespaces            []string
		//clusterStatus            api.ClusterInfo_StatusInfo_Status
	)

	Step("Adding Credentials and Registering Backup Location", func() {
		providers := getProviders()
		log.InfoD("Using pre-provisioned bucket. Creating cloud credentials and backup location.")
		//ctx, err := backup.GetAdminCtxFromSecret()
		//log.FailOnError(err, "Fetching px-central-admin ctx")
		// Create a bucket name prefix
		bucketMap := map[string]bool{
			"sse-bucket-with-policy-1":  true,
			"sse-bucket-with-policy-2":  true,
			"sse-bucket-without-policy": false,
		}

		// Create the buckets without policy
		for _, provider := range providers {
			for bucketName, policy := range bucketMap {
				customBucket = GetCustomBucketName(provider, bucketName)
				if policy {
					sseDetails, err := s3utils.GetS3SSEDetailsFromEnv()
					log.FailOnError(err, "Failed to generate s3 bucket policy check for the correctness of policy parameters")
					policy, err := GenerateS3BucketPolicy(sseDetails.SsePolicySid, string(sseDetails.SseEncryptionPolicy), customBucket)
					log.FailOnError(err, "Failed to generate s3 bucket policy check for the correctness of policy parameters")
					err = UpdateS3BucketPolicy(customBucket, policy)
					log.FailOnError(err, "Failed to apply bucket policy")
					log.Infof("Updated S3 bucket policy - %s", globalAWSBucketName)
				}
				customBuckets = append(customBuckets, customBucket)
			}
		}

		// Create the buckets with policy

		//for _, provider := range providers {
		//	for _, customBucket := range bucketNames {
		//cloudCredUID = uuid.New()
		//cloudCredUidList = append(cloudCredUidList, cloudCredUID)
		//backupLocationUID = uuid.New()
		//credName = fmt.Sprintf("autogenerated-cred-%v", time.Now().Unix())
		//err := CreateCloudCredential(provider, credName, cloudCredUID, orgID, ctx)
		//dash.VerifyFatal(err, nil, fmt.Sprintf("Verifying creation of cloud credential named [%s] for org [%s] with [%s] as provider", credName, orgID, provider))
		//log.InfoD("Created Cloud Credentials with name - %s", credName)
		//customBackupLocationName = fmt.Sprintf("autogenerated-backup-location-%v", time.Now().Unix())
		//customBucket = GetCustomBucketName(provider, customBucket)
		//err = CreateBackupLocation(provider, customBackupLocationName, backupLocationUID, credName, cloudCredUID, customBucket, orgID, "")
		//dash.VerifyFatal(err, nil, fmt.Sprintf("Creating backup location %s", customBackupLocationName))
		//log.InfoD("Created Backup Location with name - %s", customBackupLocationName)
		//	}
		//}
	})

	JustAfterEach(func() {
		// Post test custom bucket delete
		providers := getProviders()
		time.Sleep(100 * time.Second)
		for _, provider := range providers {
			for _, customBucket := range bucketNames {
				DeleteBucket(provider, customBucket)
				customBuckets = append(customBuckets, customBucket)
			}
		}
		defer EndPxBackupTorpedoTest(make([]*scheduler.Context, 0))
	})
})
