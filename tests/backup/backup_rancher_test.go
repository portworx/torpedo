package tests

import (
	"fmt"
	. "github.com/onsi/ginkgo"
	"github.com/pborman/uuid"
	"github.com/portworx/torpedo/drivers/backup"
	"github.com/portworx/torpedo/drivers/scheduler"
	"github.com/portworx/torpedo/drivers/scheduler/rke"
	"github.com/portworx/torpedo/pkg/log"
	. "github.com/portworx/torpedo/tests"
	_ "github.com/rancher/norman/clientbase"
	_ "github.com/rancher/rancher/pkg/client/generated/management/v3"
	"os"
	"strings"
	"time"
)

// This testcase creates basic rancher project creation and adding ns to that project
var _ = Describe("{BasicRancherTestcase}", func() {

	var (
		appNamespaces []string
		contexts      []*scheduler.Context
		appContexts   []*scheduler.Context
	)

	JustBeforeEach(func() {
		StartTorpedoTest("BasicRancherTestcase",
			"Creates basic rancher project creation and adding ns to that project", nil, 0)
		log.InfoD("Deploying applications required for the testcase")
		contexts = make([]*scheduler.Context, 0)
		for i := 0; i < Inst().GlobalScaleFactor; i++ {
			taskName := fmt.Sprintf("%s-%d", taskNamePrefix, i)
			appContexts = ScheduleApplications(taskName)
			contexts = append(contexts, appContexts...)
			for _, ctx := range appContexts {
				ctx.ReadinessTimeout = appReadinessTimeout
				namespace := GetAppNamespace(ctx, taskName)
				appNamespaces = append(appNamespaces, namespace)
			}
		}
	})

	It("Basic Backup Creation", func() {
		ctx, err := backup.GetAdminCtxFromSecret()
		log.FailOnError(err, "Fetching px-central-admin ctx")
		Step("Creating backup location and cloud setting", func() {
			log.InfoD("Creating backup location and cloud setting")
			backupLocationProviders := getProviders()
			for _, provider := range backupLocationProviders {
				credName := fmt.Sprintf("autogenerated-cred-%v", time.Now().Unix())
				//cc := AssignClusterCloudCred("", provider)
				credUid := uuid.New()
				err := CreateCloudCredentialNew(provider, ctx, orgID, credName, credUid, "")
				dash.VerifyFatal(err, nil, fmt.Sprintf("Verifying creation of cloud credential named [%s] for org [%s]  as provider %s", credName, orgID, provider))
				customBackupLocationName := fmt.Sprintf("autogenerated-backup-location-%v", time.Now().Unix())
				backupLocationUID := uuid.New()
				err = CreateBackupLocation(provider, customBackupLocationName, backupLocationUID, credName, credUid, getGlobalBucketName(provider), orgID, "")
				dash.VerifyFatal(err, nil, fmt.Sprintf("Creating backup location %s", customBackupLocationName))
			}
		})

		Step("Registering clusters for backup", func() {
			log.InfoD("Registering clusters for backup")
			ctx, err := backup.GetAdminCtxFromSecret()
			log.FailOnError(err, "Fetching px-central-admin ctx")
			kubeconfigs := os.Getenv("KUBECONFIGS")
			kubeconfigList := strings.Split(kubeconfigs, ",")
			clusterProviders := getClusterProviders()
			for _, provider := range clusterProviders {
				for _, kubeconfig := range kubeconfigList {
					clusterCredName := fmt.Sprintf("kubeconfig-autogenerated-cred-%v", time.Now().Unix())
					credUid := uuid.New()
					err := CreateCloudCredentialNew(provider, ctx, orgID, clusterCredName, credUid, kubeconfig)
					dash.VerifyFatal(err, nil, fmt.Sprintf("Verifying creation of cloud credential named [%s] for org [%s] as provider", clusterCredName, orgID))
					err = AddApplicationCluster(kubeconfig, orgID, clusterCredName, credUid, ctx)
					dash.VerifyFatal(err, nil, fmt.Sprintf("Verifying addition of application cluster %s to backup", kubeconfig))
				}
			}
		})

		Step("Creating Project and adding namespace to this project", func() {
			projectName := fmt.Sprintf("new-rke-project-snigdha-%v", time.Now().Unix())
			err, _ = Inst().S.(*rke.Rancher).CreateRancherProject(projectName, "new project")
			dash.VerifyFatal(err, nil, fmt.Sprintf("Creating Rancher project %s", projectName))
			err = Inst().S.(*rke.Rancher).AddNamespacesToProject(projectName, appNamespaces)
			dash.VerifyFatal(err, nil, fmt.Sprintf("Adding namespaces %s to project %s", appNamespaces, projectName))
		})
	})

	JustAfterEach(func() {
		// TO DO
	})

})
