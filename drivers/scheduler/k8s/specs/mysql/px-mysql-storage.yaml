##### Portworx storage class
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
    name: px-mysql-sc
provisioner: kubernetes.io/portworx-volume
parameters:
   repl: "3"
---
##### Portworx persistent volume claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-data
spec:
  storageClassName: px-mysql-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
##### Portworx PVC Snapshot
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ns.{{NAMESPACE}}-name.mysql-snapshot
  annotations:
    px/snapshot-source-pvc: mysql-data
spec:
   storageClassName: px-mysql-sc
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 2Gi
---
##### Portworx PVC clone from snapshot
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: ns.{{NAMESPACE}}-name.mysql-snap-clone
   annotations:
    px/snapshot-source-pvc: ns.{{NAMESPACE}}-name.mysql-snapshot
spec:
   storageClassName: px-mysql-sc
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 2Gi
---
##### Portworx Stork Snapshot
apiVersion: volumesnapshot.external-storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: mysql-snapshot
spec:
  persistentVolumeClaimName: mysql-data
---
##### Portworx PVC clone from VolumeSnapshot using Stork
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: mysql-snap-clone
   annotations:
     snapshot.alpha.kubernetes.io/snapshot: mysql-snapshot
spec:
   storageClassName: stork-snapshot-sc
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 2Gi
