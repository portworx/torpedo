{{- $defaultClaimsCount := 8 }}
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: yes-and-fio-vm
spec:
  running: true
  template:
    metadata:
      labels:
        kubevirt.io/domain: ubuntu-bionic
        kubevirt-key: kubevirt-val
        app: yes-and-fio-vm
    spec:
      domain:
        cpu:
          cores: 4
        devices:
          disks:
            - name: containervolume
              disk:
                bus: virtio
            {{- if gt .ClaimsCount 0}}
            {{- range $i := Iterate .ClaimsCount}}
            - name: datavolume{{ $i }}
              disk:
                bus: virtio
            {{- end}}
            {{- else}}
            {{- range $i := Iterate $defaultClaimsCount}}
            - name: datavolume{{ $i }}
              disk:
                bus: virtio
            {{- end}}
            {{- end}}
            - name: cloudinitvolume
              disk:
                bus: virtio
          interfaces:
            - name: default
              masquerade: {}
        resources:
          requests:
            cpu: 4
            memory: 8192M
      networks:
        - name: default
          pod: {}
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      volumes:
        - name: containervolume
          persistentVolumeClaim:
            claimName: fio-boot-pvc
        {{- if .ClaimsCount }}
        {{- range $val := Iterate .ClaimsCount }}
        - name: datavolume{{ $val }}
          persistentVolumeClaim:
            claimName: fio-disk-{{ $val }}
        {{- end }}
        {{- else }}
        {{- range $val := Iterate $defaultClaimsCount }}
        - name: datavolume{{ $val }}
          persistentVolumeClaim:
            claimName: fio-disk-{{ $val }}
        {{- end }}
        {{- end }}
        - name: cloudinitvolume
          cloudInitNoCloud:
            userData: |-
              #cloud-config
              packages:
                - fio
              chpasswd:
                list: |
                  ubuntu:ubuntu
                  root:toor
                expire: False
              runcmd:
                - mkdir -p /mnt/data
                - |
                  #!/bin/bash
                  mkdir -p /mnt/data
                  # Discover, format, and mount each data volume
                  for dev in $(ls /dev/vd* | grep -v vda); do
                      mkfs.ext4 -F $dev
                      mkdir -p /mnt/data/disk$(echo $dev | sed 's/\/dev\/vd//')
                      echo "Mounting $dev to /mnt/data/disk$(echo $dev | sed 's/\/dev\/vd//')"
                      mount $dev /mnt/data/disk$(echo $dev | sed 's/\/dev\/vd//')
                      echo "$dev mounted"
                  done
                  ls -l /mnt/data
                  # Function to run fio command with retries
                  run_fio() {
                      local dir=$1
                      while true; do
                          fio --name=randrw-disk$(basename ${dir}) --rw=randrw --bs=4k --size=1G --numjobs=1 --runtime=60 --group_reporting --directory=${dir}
                          if [ $? -ne 0 ]; then
                              echo "fio command failed, retrying after 10 seconds"
                              sleep 10
                          fi
                      done
                  }
                  # Function to run dd with yes command to write data continuously
                  run_yes_dd() {
                      local dir=$1
                      while true; do
                          yes "This is disk I/O generated by yes on $(basename ${dir})" | dd of=${dir}/yes_output.txt bs=4k count=256k oflag=append conv=notrunc
                          if [ $? -ne 0 ]; then
                              echo "dd command failed, retrying after 10 seconds"
                              sleep 10
                          fi
                          sleep 60
                      done
                  }
                  # Run fio and yes/dd commands for each mounted volume
                  for i in $(ls /mnt/data); do
                      echo "Running fio and yes/dd on /mnt/data/${i}"
                      run_fio /mnt/data/${i} &
                      run_yes_dd /mnt/data/${i} &
                  done
